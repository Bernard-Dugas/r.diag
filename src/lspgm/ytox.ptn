#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      ytox  X Y Z INPUT OUTPUT [ -name 1 / 2 ]
*
*
*     AUTHORS - B.Dugas, Sept 2004.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/ytox.ptn,v 4.4 2014/09/25 20:20:56 dugas Exp $
*
*
*     DESCRIPTION...
*      A FILE ARITHMETIC PROGRAM WHICH...
*
*      ... PRODUCES FILE Z = Y**X
*
*
*     NOTES:  1) X AND Y MAY CONTAIN REAL OR COMPLEX DATA.
*             2) FOR REAL DATA, THAT OF Y CANNOT BE NEGATIVE.
*             3) 0**0 = 1, RATHER THAN BE INDETERMINATE.
*             4) 0**X = 0, WHEN X.NE.0.
*             5) WHEN THE THE NAMES OF CORRESPONDING VARIABLES
*                IN X AND Y ARE DIFFERENT, THE PROGRAM WILL REPLACE
*                THEN WITH 'YTOX', INDICATING THAT THIS OPERATION WAS
*                PERFORMED. THIS DEFAULT BEHAVIOR CAN BE AVOIDED BY
*                SPECIFYING THE "-name" COMMAND-LINE ARGUMENT WITH
*                A VALUE OF THE ORDINAL OF THE INPUT FILE WHOSE
*                NAMES SHOULD BE KEPT.
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 NOT AS MANY ARRAYS IN FILE Y AS IN FILE X
*       2 MORE THAN ONE SIZE FOR ARRAYS IN X AND/OR Y
*       3 NEGATIVE REAL DATA IN FILE Y
*       4 UNABLE TO READ FILE X
*       5 UNABLE TO READ FILE Y
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM ytox
*    +       (     X,       Y,       Z,       INPUT,      OUTPUT,
*    +       TAPE1=X, TAPE2=Y, TAPE3=Z, TAPE5=INPUT,TAPE6=OUTPUT)
 
*     $Log: ytox.ptn,v $
*     Revision 4.4  2014/09/25 20:20:56  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.3  2008/05/03 21:09:02  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.2  2008/04/25 21:14:06  dugas
*     Toujours utiliser GET_IP1_STRING avant d'imprimer un niveau vertical.
*
*     Revision 4.1  2007/12/20 21:29:17  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.0  2004/11/12 19:54:58  dugas
*     Version initiale.
*
*     

***    Sept 2004 - B.Dugas

*---------------------------------------------------------------------
      IMPLICIT     none

      INTEGER      MAXLEV
      PARAMETER  ( MAXLEV = 999 )

      REAL         ZERO
      REAL*8       X,Y,Z
      LOGICAL      OK,CMPL, ROTAT
      COMPLEX*16   CX,CY,CZ,CZERO
      INTEGER      MAXW,NWDS,LEN,HEAD,NPACK,NF,
     +             NR,KBUF(taille_entete),KPAK,LBUF(taille_entete),LPAK, LEV(MAXLEV),
     +             NLEV,NLEVA,NLEVB,MAXW1,MAXW2,LEN1,LEN2,
     +             LIG,LIH,I,K,L,IO,LENLAB, IER,KEEPNAM
      CHARACTER*4  TYPE,NOM, CHAINE(64),VALEUR,SLEV*15

      INTEGER      NI,NJ
      CHARACTER    GRTYP,GRTYP2
      INTEGER      IG1, IG2, IG3, IG4
      REAL         XG1, XG2, XG3, XG4,
     +             XG12,XG22,XG32,XG42

      INTEGER,     DIMENSION(:), ALLOCATABLE :: IBUF,JBUF
      REAL*8,      DIMENSION(:), ALLOCATABLE :: G,H,TP

      LOGICAL      RPBLOC,SETIO64
      INTEGER      GETHIGH,GETSIZ2
      CHARACTER*4  GETHIC,GETYP,PKTYP
      EXTERNAL     GETSIZ2,RPBLOC,MACSPE,JCLPNT,GETLIGN,BURNF,XIT,
     +             GETSET2,PRECEDE,CMPLBL,PUTSET2,GETLAB,PUTLAB,
     +             SETIO64,GETHIC,GETHIGH,ROWORD,GETYP,CIGAXG

      CHARACTER    NOMPRG*256
      COMMON      /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/ytox.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )

***    ACCEDER LES FICHIERS D'E/S.

      NR = 0
      NF = 4

      CALL JCLPNT( NF, 1,2,3, 6 )

      ROTAT   =.FALSE.
      CZERO   = DCMPLX( 0.0,0.0 )
      KEEPNAM = 0

      CALL SETRABT( '&NON' )

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('NAME',VALEUR )
          IF (OK) READ(VALEUR,'(BN,I5)') KEEPNAM

      END IF

      VALEUR = 'YTOX'

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFER.

  050 MAXW2 = GETSIZ2( 2, LBUF,LEN2,NWDS,LPAK, LEV,NLEVB )
      IF (MAXW2.EQ.0) GOTO 905

      IF (PKTYP.EQ.'SQ')                                       THEN

          GRTYP2 = GETHIC ('GRTYP',LBUF )
          IG1    = GETHIGH('IG1'  ,LBUF )
          IG2    = GETHIGH('IG2'  ,LBUF )
          IG3    = GETHIGH('IG3'  ,LBUF )
          IG4    = GETHIGH('IG4'  ,LBUF )

***        RETREIVE THE GRID DESCRIPTORS FOR THE SECOND FILE.

          IF (GRTYP2.EQ.'L' .OR.
     +        GRTYP2.EQ.'N' .OR.
     +        GRTYP2.EQ.'S')                                   THEN
              CALL CIGAXG( GRTYP2, XG12,XG22,XG32,XG42,
     +                             IG1, IG2, IG3, IG4 )
          ELSE
              XG12 = IG1
              XG22 = IG2
              XG32 = IG3
              XG42 = IG4
          END IF

      END IF

      MAXW1 = GETSIZ2( 1, KBUF,LEN1,NWDS,KPAK, LEV,NLEV )
      IF (MAXW1.EQ.0) GOTO 904

      IF (PKTYP.EQ.'SQ')                                       THEN

          GRTYP = GETHIC ('GRTYP',KBUF )
          IG1   = GETHIGH('IG1'  ,KBUF )
          IG2   = GETHIGH('IG2'  ,KBUF )
          IG3   = GETHIGH('IG3'  ,KBUF )
          IG4   = GETHIGH('IG4'  ,KBUF )

***        RETREIVE THE GRID DESCRIPTORS FOR THE FIRST FILE.

          IF (GRTYP.EQ.'L' .OR.
     +        GRTYP.EQ.'N' .OR.
     +        GRTYP.EQ.'S')                                    THEN
              CALL CIGAXG( GRTYP, XG1,XG2,XG3,XG4,
     +                            IG1,IG2,IG3,IG4 )
          ELSE
              XG1 = IG1
              XG2 = IG2
              XG3 = IG3
              XG4 = IG4
          END IF

***        COMPARE GRID DESCRIPTORS.

          IF (GRTYP.NE.GRTYP2)                                 THEN

              WRITE(6,6300) GRTYP, XG1, XG2, XG3, XG4,
     +                      GRTYP2,XG12,XG22,XG32,XG42
              CALL                                 XIT('  Ytox  ',-2 )

          ELSE IF (XG1.NE.XG12   .OR.
     +             XG2.NE.XG22   .OR.
     +             XG3.NE.XG32   .OR.
     +             XG4.NE.XG42)                                THEN

              IF ((GRTYP.EQ.'G'  .OR.
     +             GRTYP.EQ.'B'  .OR.
     +             GRTYP.EQ.'A') .AND.
     +            (XG1  .EQ.XG12 .AND.
     +             XG3  .EQ.XG32 .AND.
     +             XG4  .EQ.XG42).AND.
     +            (XG2  .EQ. 0.  .OR.
     +             XG2  .EQ. 1.  .OR.
     +             XG22 .EQ. 0.  .OR.
     +             XG22 .EQ. 1.))                              THEN

***                XG2 INDICATES A ROTATED GRID.
***                ALL OTHER DESCRIPTORS IDENTICAL.

                  ROTAT = .TRUE.

                  WRITE(6,6666)

              ELSE

                  WRITE(6,6300) GRTYP, XG1, XG2, XG3, XG4,
     +                          GRTYP2,XG12,XG22,XG32,XG42
                  CALL                             XIT('  Ytox  ',-2 )

              END IF

          END IF

      END IF

      CALL CMPLBL( 0,LBUF, 0,KBUF, OK ) 

      IF (.NOT.OK .OR. NLEV.NE.NLEVB)                          THEN
          WRITE(6,6201) NLEVB ; CALL PRTLAB( LBUF )
          WRITE(6,6201) NLEV  ; CALL PRTLAB( KBUF )
          CALL                                     XIT('  Ytox  ',-2 ) 
      END IF

      NI   = KBUF(5)
      NJ   = KBUF(6)

      LEN  = MAX( LEN1, LEN2  )
      MAXW = MAX( MAXW1,MAXW2 )

      WRITE(TYPE,4) KBUF(1)
      IF (TYPE.EQ.'ZONL')                                      THEN
          NWDS = NI
          NJ   = NI
          NI   = 1
      END IF

      ALLOCATE( IBUF(2*LEN),G(NWDS*NLEV),TP(NWDS),
     +          JBUF(2*LEN),H(NWDS*NLEV) )

***    READ THE NEXT PAIR OF FIELDS. 

  100 CALL GETSET2( 1, G,LEV,NLEVA, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( IBUF,JBUF,G,H,TP )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6100) NR
              CALL                                 XIT('  Ytox  ', 0 ) 

          END IF

          WRITE(TYPE,4) IBUF(1) 

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

***        READ SECOND FIELD.

          CALL GETSET2( 2, H,LEV,NLEVB, JBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN
              DEALLOCATE( IBUF,JBUF,G,H,TP )
              IF (MAXW.EQ.0)                                   THEN
                  CALL PRECEDE( 1,NLEVA )
                  GOTO 050
              END IF
              CALL                                 XIT('  Ytox  ',-1 )
          END IF

          IF (NR.EQ.0) CALL PRTLAB( JBUF )

***        MAKE SURE THAT THE FIELDS ARE STILL THE SAME KIND AND SIZE.

          IF ((TYPE   .NE.'CHAR' .AND.
     +         TYPE   .NE.'LABL') .OR.
     +         IBUF(1).NE.JBUF(1) )                            THEN

              CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

              IF (.NOT.OK .OR. NLEVA.NE.NLEVB .OR.
     +                         NLEV .LT.NLEVB )                THEN
                  WRITE(6,6201) NLEVA ; CALL PRTLAB( IBUF )
                  WRITE(6,6201) NLEVB ; CALL PRTLAB( JBUF )
                  CALL                             XIT('  Ytox  ',-2 ) 
              END IF

          END IF

***        DETERMINE THE SIZE OF THE FIELD.
***        AS WELL, STOP IF FIELD IS COMPLEX AND B IS NOT 0.

          CMPL = (TYPE.EQ.'SPEC' .OR.
     +            TYPE.EQ.'FOUR' .OR.
     +            TYPE.EQ.'CMPL')

          IF (TYPE.NE.'LABL' .AND. TYPE.NE.'CHAR')             THEN

              IF (ROTAT)                                       THEN
                  DO  L=1,NLEVA
                      CALL ROWORD( H((L-1)*NWDS+1),TP,NI,NJ )
                  END DO
              END IF

              IF (TYPE.NE.'CHAR')                              THEN

***                SET G = H**G

                  DO  L=1,NLEVA

                      LIG = (L-1)*NWDS
                      LIH = (L-1)*NWDS

                      IF (CMPL)                                THEN
                          DO  I=1,NWDS,2

                              CX = DCMPLX( G(LIG+I),G(LIG+I+1) )
                              CY = DCMPLX( H(LIH+I),H(LIH+I+1) )

                              IF (CX.EQ.CZERO)                 THEN
                                  CZ = 1.0
                              ELSE IF (CY.EQ.CZERO)            THEN
                                  CZ = 0.0
                              ELSE
                                  CZ = EXP( X * LOG( Y ) )
                              END IF

                              G(LIG+I)   = DBLE ( CZ )
                              G(LIG+I+1) = DIMAG( CZ )

                          END DO
                      ELSE
                          DO  I=1,NWDS

                              X  = G(LIG+I)
                              Y  = H(LIH+I)

                              IF (X.EQ.0.0)                    THEN
                                  Z = 1.0
                              ELSE IF (Y.EQ.0.0)               THEN
                                  Z = 0.0
                              ELSE IF (Y.LT.0.0)               THEN
                                  CALL GET_IP1_STRING( LEV(L),SLEV )
                                  WRITE(6,6003) SLEV,I,Y
                                  CALL             XIT('  Ytox  ',-3 )
                              ELSE
                                  Z = EXP( X * LOG( Y ) )
                              END IF

                              G(LIG+I) = Z

                          END DO
                      END IF

                  END DO
 
              END IF

***            CHECK KEEPNAM TO DEFINE IBUF(3).

              IF (IBUF(3) .NE. JBUF(3))                        THEN
                  IF (KEEPNAM.NE.1 .AND.
     +                KEEPNAM.NE.2 )                           THEN
                      READ(VALEUR,4) IBUF(3)
                  ELSE IF (KEEPNAM .EQ. 2)                     THEN
                     IBUF(3) = JBUF(3)
                  END IF
              END IF

***            SAVE G ON FILE XOUT.

              CALL PUTSET2( 3, G, LEV,NLEVA, IBUF,MAXW )

          ELSE IF (TYPE.EQ.'CHAR')                             THEN

***            SAVE THE LAST CHARACTER RECORD READ FROM X.

              CALL PUTSET2( 3, G, LEV,NLEVA, IBUF,MAXW )

          ELSE IF (TYPE.EQ.'LABL')                             THEN

***            SAVE THE LAST LABEL READ FROM X.

              LENLAB = IBUF(5)

              CALL GETLAB( 0, CHAINE, IBUF,LENLAB, OK )
              WRITE(NOM,4) IBUF(3)
              NLEVA = 1

              IF (NOM.EQ.'LABL')                               THEN
                  CALL PUTLAB( 3, CHAINE, IBUF,LENLAB,
     +                                   .FALSE. , .FALSE. )
              ELSE IF (NOM.EQ.'FILE')                          THEN
                  CALL PUTLAB( 3, CHAINE, IBUF,LENLAB, 
     +                                   .TRUE.  , .FALSE. )
              ELSE IF (NOM.EQ.'INFO')                          THEN
                  CALL PUTLAB( 3, CHAINE, IBUF,LENLAB, 
     +                                   .FALSE. , .TRUE.  )
              END IF

          END IF

      NR = NR+NLEVA
      GOTO 100 

***   E.O.F. ON UNIT #1,#2.

  904 CALL                                         XIT('  Ytox  ',-4 )
  905 CALL                                         XIT('  Ytox  ',-5 )

*---------------------------------------------------------------------

 0004 FORMAT(A4)

 6003 FORMAT(' At level ',A,', point ',I6,', found Y = ',E15.9)

 6100 FORMAT(' Ytox read ',I6,' pairs.')
 6201 FORMAT(' Nlev=',I5)
 6300 FORMAT(' For first file  GRTYP,XG1,XG2,XG3,XG4= ',A,4F10.3/
     +       ' For second file GRTYP,XG1,XG2,XG3,XG4= ',A,4F10.3)
 6666 FORMAT(/' Note: Arrays in the second file will be inverted'/
     +       '       in the North-South direction to orient them'/
     +       '       as their counterparts in the first file.'/)

      END 
#     endif
