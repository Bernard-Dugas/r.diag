#     if !defined( pression_au_toit)
#         define   pression_au_toit 0.01
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE (gpasg)...
*      gpasg  GPFLD GSLNSP GSFLD [ GPTOP ] INPUT OUTPUT  \ 
*             -n VAL1 -kind VAL2 -i VAL3 -b VAL4 -c VAL5 \ 
*             -j VAL6 [VAL7] -k VAL8 [VAL9] [-l VAL10 [VAL11] ] -def [APPEND]
*                                  
*
*     CALL SEQUENCE (gsasg)...
*      gsasg  GSFLD GSLNSP GSFLD [ GPTOP ] INPUT OUTPUT                \ 
*      -n VAL1 -kind VAL2 [ VAL3 ] -i  VAL4 [  VAL5 [ VAL6 ] ] -b VAL7 \ 
*      -c VAL8 -j    VAL8 [ VAL9 ] -k VAL10 [ VAL11 [ VAL12 ] ] \ 
*      -def [APPEND][AABB][DEFLEVS]
*
*
*     DESCRIPTIONS...
*      gpasg  - INTERPOLATE FROM PRESSURE TO SIGMA/HYBRID/GEM/GEM(2/3/4) LEVELS
*      gsasg  - INTERPOLATE BETWEEN SIGMA/HYBRID/GEM/GEM(2/3) LEVELS
*
*
*     AUTHORS - Nils Ek, Bernard Dugas, RPN: Sept 1998 (after GSAPL)
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/gpasg.ptn,v 4.30 2014/12/03 23:57:22 dugas Exp $
*
*
*     PURPOSE - INTERPOLATES FROM PRESSURE OR ETA (SIGMA/HYBRID/GEM/GEM2/GEM3/GEM4)
*               LEVELS TO ANOTHER SET OF ETA LEVELS. THE INTERPOLATION IS
*               LINEAR IN LN(PRES)
*
*
*     INPUT FILES...
*      GPFLD  = SETS OF PRESSURE LEVEL GRID DATA                              (gpasg)
*      GSFLD  = SETS OF ETA (SIGMA/HYBRID/GEM/GEM2/GEM3/GEM4) LEVEL GRID DATA (gsasg)
*      GSLNSP = SERIES OF GRIDS OF LN(SF PRES), WHERE SF PRES IS IN UNITS OF HPa
*    [ GPTOP  = SERIES OF GRIDS OF PRESSURE AT TOP OF MODEL (OPTIONAL, GEM ONLY) ]
*
*      GPTOP AND GSLNSP HAVE UNITS OF MB AND LN(MB), RESPECTIVELY.
*
*     OUTPUT FILE...
*      GSFLD  = SETS OF ETA (SIGMA/HYBRID/GEM/GEM2/GEM3/GEM4) LEVEL GRID DATA
*
*
*     INPUT PARAMETERS USED BY ALL COMMANDS...
*
*      NSL    (n)     = NUMBER OF REQUESTED MODEL LEVELS (DEF 28, MAX 999).
*                       IF NSL IS NEGATIVE, EACH -NSL LEVS VALUES ARE READ WITH
*                       A I10 FORMAT OR AN E10.0 IF ITS VALUE CONTAINS A DECIMAL
*                       POINT.
*      COORD  (kind)  = 'SIG'/'ETA'/'GEM'/'GEM2'/'GEM3'/'GEM4' FOR OUTPUT SIGMA/ETA
*                       AND FOUR VARIANTS OF THE GEM VERTICAL COORDINATES. If the
*                       APPEND-mode is set and COORD='GEM4' (see note #11), the
*                       output file content is used to determine all of the
*                       coordinate parameters.
*      RLUP   (b)     = LAPSE RATE USED TO EXTRAPOLATE UPWARDS (DEF 0.0).
*      RLDN   (c)     = LAPSE RATE USED TO EXTRAPOLATE DOWNWARDS (DEF 0.0).
*      PTOIT  (i)     = PRESSURE (PA) AT THE OUTPUT LID (DEF pression_au_toit).
*      PREF   (j)     = REF PRESSURE USED WHEN COORD='GEM2' OR 'GEM3' (DEF 80000 PA).
*      R      (k)     = (FIRST) EXPONENT USED ONLY WHEN COORD='GEM2','GEM3' or 'GEM4' (DEF 1.0).
*
*      LEVS           = ETA LEVELS *1000 (READ FROM STANDARD INPUT). THE
*                       DEFAULTS ARE AS SPECIFIED IN THE EXAMPLE BELOW.
*
*     THE NEXT TWO INPUT PARAMETRES ARE ONLY USED BY GSASG...
*
*      COORDI (kind2) = INPUT DATA VERTICAL COORDINATE. SUPPORTED OPTIONS INCLUDE
*                       'SIG'/'ETA'/'GEM'/'GEM2'/'GEM3'/'GEM4' AND SEVERAL VARIANTS
*                       OF THE CCCMA GCM VERTICAL COORDINATE.
*      PTOITI (i2)    = PRESSURE (PA) AT THE LID OF INPUT MODEL (DEF = PTOIT)
*
*
*     THE NEXT TWO INPUT PARAMETRES ARE ONLY USED BY GSASG IF COORDI='GEM2' OR 'GEM3'...
*
*      PREFI  (j2)    = INPUT REFERENCE PRESSURE (DEF = PREF).
*      RI     (k2)    = INPUT EXPONENT (DEF = R).
*
*
*     THE NEXT THREE INPUT PARAMETRES ARE ONLY USED IF COORD='GEM4'...
*
*      R2     (k2)    = Second exponent (DEF = R).
*      G4LEV  (l)     = 'MOMENTUM' (default) or 'THERMODYN' to output interpolated
*                       data on the GEM4 momentum or thermodynamic set of levels, resp.
*      lastTatU (l2)  = 'T' => Put last thermodynamic level at last momentum level.
*                       'F' => Do not do this (DEF='F').
*
*
*      Notes: 1) When COORD='GEM', PTOIT is only used if GPTOP is empty
*             2) When COORD='GEM', RLUP and LAY are ignored 
*             3) Units for RLUP and RLDN are that of D(GSFLD)/D(LN PRES).
*                Accordingly, it is assumed that only one variable is
*                to be found in the GPFLD or GSFLD input files,
*                possibly on several timesteps.
*             4) The first input line is NOT read if any command-line
*                parameters are passed.
*             5) Furthermore, the second set of lines will not be read either
*                if the "-def" defaults processing mode is requested without
*                a value. However, if either an 'AABB' and/or an 'APPEND'
*                value is set in GSASG (see notes #9, #11 for more details),
*                a 'DEFVLS' character sequence must also be added to
*                activate this option, as in "-def AABB/DEFLEVS".
*             6) 'GEM' is the original gem coordinate. 'GEM2' is the
*                hybrid coordinate implemented by Edouard & Gravel
*                in GEM/DM V2.2.0, while 'GEM3' is the normalized
*                version that was implemented in GEM/DM v2.3.1, while
*                'GEM4' is the version used onward from GEM/DM v4.0.6. 
*             7) The default value of COORDI is determined by the file type
*                and the program will also try to determine it by the
*                (internal) coding used for the coordinate itself.
*             8) The parametres needed to read/write 'GEM2' or 'GEM3' arrays
*                can only be specified in command-line input mode.
*             9) Specifying "-def AABB" in GSASG will force an attempt to
*                read a text file called aabb.nml, containing a FORTRAN
*                namelist AABB_NML, which in turns will hold two arrays,
*                A and B such that the input data local pressure at level K,
*                PL(K), is defined as "A(K)+B(K)*PS" for most coordinates.
*                For 'GEM4', the corresponding formula to calculate the
*                K-level natural logaritm of the local pressure is rather
*                "A(K)+B(K)*LN(PS/PREF)". The A and B terms should be such
*                as to produce local pressures in Pa units, even though PS
*                is usually read in units of hPa (before being converted
*                to Pa units internally). In all cases, this approach then
*                by-passes the normal COORDI-related calculations for PL(K).
*                The program is then said to operate in AABB-mode.
*                                      *************
*                Given the above, correctly using the AABB option with a
*                GEM4 file requires specifying the "COORDI=GEM4" argument.
*                                      *************
*            10) When COORD='GEM4' *AND* AABB has not been specified, the
*                levels read on input will first be used to generate the
*                two sets of dynamic and thermodynamic GEM4 staggered
*                coordinate levels. Which set will be later used is
*                determined by the value of the G4LEV ('-l') parametre
*                interpolated to the (chosen) set of GEM4 levels.
*                (see above). The input data will then be interpolated to
*                the (chosen) set of GEM4 levels.
*            11) Note that at this time, only VKIND=5002 or 5003 (if
*                lastTatU=T) are supported when actually building a new
*                !! GEM4 vertical level descriptor record.
*            12) Alternatively, specifying "-def APPEND" when COORD='GEM4'
*                indicates that the program should instead attempt to find
*                a !! GEM4 vertical level descriptor record on the output
*                file and use it, instead of creating one. The newly
*                interpolated data that will result will then be appended
*                to the file. All of the VKIND=500x (x=2,3,4,5) are
*                then supported.
*
*
*      READ( 5,5010 ) NSL,COORD,PTOIT,              RLUP,RLDN (gpasg)
*      READ( 5,5015 ) NSL,COORD,PTOIT,COORDI,PTOITI,RLUP,RLDN (gsasg)
*      IF (NSL.GT.0)
*      READ( 5,5020 ) (LEVS(I),I=1,NSL)
*      IF (NSL.LT.0)
*      READ( 5,5030 ) (LEVS(I),I=1,-NSL)
*5010  FORMAT(10X,I5,1X,A4,3E10.0)
*5015  FORMAT(10X,I5,2(1X,A4,E10.0),2E10.0)
*5020  FORMAT(16E5.0)
*5030  FORMAT(8E10.0)
*
*
*     EXAMPLE OF (gsasg) INPUT CARDS...
*
* GSASG.     27 GEM2      0.01 ET15    7.2E-3        0.        0.
*  0. .010 .020 .040 .061 .091 .131 .177 .222 .273 .328 .384 .444 .500 .555 .611
*.666 .722 .773 .818 .859 .894 .925 .950 .970 .985 .995
*
*        01234567890123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     (gsasg+gpasg) EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 NUMBER ETA LEVELS GREATER THAN MAXLEV
*       2 PRESSURE OR MODEL VERT COORDINATE NOT MONOTONIC
*       3 ERROR READING FIRST SET IN GSLNSP
*       4 ERROR READING FIRST SET IN GPFLD OR GSFLD
*       5 GPFLD OR GSFLD AND GSLNSP NOT THE SAME SIZE
*       6 ERROR READING FIRST SET IN GPTOP
*       7 GPTOP, GSLNSP NOT THE SAME SIZE
*       8 ERROR UNPACKING FIRST SET IN GPFLD
*       9 MORE THAN ONE SIZE IN GPFLD OR GSFLD
*      10 MISSING GSLNSP FIELD
*      11 MORE THAN ONE SIZE IN GSLNSP
*      12 MISSING GPTOP FIELD
*      13 MORE THAN ONE SIZE IN GPTOP
*      14 ERROR ABORT READING INPUT CARD 1
*      15 ERROR ABORT READING INPUT CARD 2
*      16 UNSUPPORTED VERTICAL COORDINATE IN GPFLD
*      17 COORD PARAMETRE AND GPFLD DATA MISMATCH
*      19 UNSUPPORTED VERTICAL COORDINATE ON INPUT CARD 2
*      20 UNABLE TO READ AABB NAMELIST
*      21 GSLNSP DOES NOT CONTAIN LN( SURFP ) FOR EARTH
*      22 WRONG NUMBER OF A,B VALUES IN AABB
*      23 UNRECOGNIZED VALUE OF THE G4LEV PARAMETRE
*      24 UNABLE TO ALLOCATE WORKING MEMORY
*      25 GPASG UNABLE TO CREATE (GEM4) TocToc record
*      26 GEM4 INPUT LEVEL MISMATCH
*      27 FOUND DATA NOT OF TYPE 'GRID' OR 'SUBA'
*      28 UNRECOGNIZED -DEF ARGUMENT VALUE
*
*     101 MORE THAN ONE VARIABLE NAME DETECTED, CHECK RLDN/RLUP VALIDITY
*
*     (gsahy) EXIT CONDITIONS...
*       1 CODE NOT YET ACTIVE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      SUBROUTINE gpasg
*    1               (GPFLD,       GSLNSP,       GSFLD,       INPUT,
*    2                                                        OUTPUT,
*    3          TAPE1=GPFLD, TAPE2=GSLNSP, TAPE3=GSFLD, TAPE5=INPUT,
*    4                                                  TAPE6=OUTPUT)
*     ---------------------------------------------------------------

*     $Log: gpasg.ptn,v $
*     Revision 4.31  2016/10/29 20:18  dugas
*     - Ajouter le support de sorties GEM4 dans GSASG.
*     - Modifications syntaxiques de type F77 --> F90.
*     - Modifications au traitement des arguments "-def".
*     - Usage des nouveaux comdecks toc_gest_1.cdk, toc_gest_2.cdk
*       et set_a_b_from_AABB.cdk.
*
*     Revision 4.30  2014/12/03 23:57:22  dugas
*     Correction aux declarations de AO et BO.
*
*     Revision 4.29  2014/09/25 20:20:49  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.28  2014/09/11 20:39:19  dugas
*     Verifier la consistance des niveaux verticaux.
*
*     Revision 4.27  2013/12/18 21:56:33  bernard
*      - Modifier le traitement des erreurs associees a la lecture du fichier
*        namelist aabb.nml.
*
*     Revision 4.26  2013/12/11 20:31:36  dugas
*     Corrections de la modification precedente...
*
*     Revision 4.25  2013/12/11 20:29:38  dugas
*     Verifier si on a plus d'une variable en entree.
*
*     Revision 4.24  2013/10/16 18:41:57  bernard
*     Corriger la documentation et les messages d'erreurs  concernant les AI et BI.
*
*     Revision 4.23  2013/03/21 21:33:40  bernard
*     Implementer le format destination GEM4 dans le mode GPASG.
*
*     Revision 4.22  2012/05/17 22:23:23  dugas
*     - Verification que la pression de surface est appropriee pour notre terre.
*     - Lecture du fichier namelist aabb.nml. Celui-ci doit contenir le
*       namelist FORTRAN AABB_NML, qui contient a son tour les deux
*       vecteurs verticaux A et B. Ces derniers sont utilises dans
*       dans le calcul de la pression locale (PL=A+B*PS). Cette modif
*       est par contre non-supportee pour COORD=GEM4.
*
*     Revision 4.21  2010/02/15 22:39:14  dugas
*     Support BETA de la coordonnee verticale GEM4.
*
*     Revision 4.20  2009/09/08 20:48:17  dugas
*     VKINDI=1 par defaut (parametre d'entree).
*
*     Revision 4.19  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.18  2008/04/28 15:41:58  dugas
*     Ne plus tenir compte du cas non-SQ98.
*
*     Revision 4.17  2007/12/20 21:06:37  dugas
*     - Support du format E10.0 pour les niveaux verticaux en arguments.
*     - Utiliser CONVPR pour decoder les niveaux verticaux.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.16  2006/12/18 12:22:19  dugas
*     Ajouter un message informatif associe a l'erreur -3
*
*     Revision 4.15  2005/04/14 16:54:28  dugas
*     - Proteger PTOITI,PREFI,RI lors de l'appel a LIRPT.
*     - La valeur de defaut de COORDI = COORD.
*     - Corriger la documentation automatique.
*
*     Revision 4.14  2005/04/12 17:39:52  dugas
*     Corriger la documentation automatique.
*
*     Revision 4.13  2005/03/03 20:43:50  dugas
*     Verifier que les donnees sont de type 'GRID' ou 'SUBA'
*
*     Revision 4.12  2003/10/24 20:59:30  dugas
*     Corriger un format de sortie pour le listing.
*
*     Revision 4.11  2002/12/06 16:13:43  dugas
*     Faire en sorte que VKIND ne soit pas defini par LNSP
*
*     Revision 4.10  2002/09/17 17:52:26  dugas
*     Modifier/simplifier le traitement des coordonnees verticales hybrides
*      de GEM (v2.2.0 et v2.3.1). Utilisation systematique de GETKIND et
*      definition du type de coordonnee par defaut selon le genre de
*      fichier rencontre (CCC ou RPN).
*
*     Revision 4.9  2002/01/14 15:32:22  dugas
*     Ajouter le support des coordonnees verticales GEM2 (v2.2.1) et GEM3 (v2.3.1).
*
*     Revision 4.8  2001/11/21 15:46:35  armnrbd
*     Modifier la documentation automatique.
*     Definir LNPT lorsque COORD=GEM en mode GSASG.
*
*     Revision 4.7  2000/11/24 12:31:56  armnrbd
*     Always allocate and initialize the top pressure array.
*
*     Revision 4.6  2000/09/28 03:51:00  armnrbd
*     Modifier l'appel a GETFLD2 pour LNSP.
*
*     Revision 4.5  2000/07/21 16:40:50  armnrbd
*     Ajouter le point d'entree GSASG.
*
*     Revision 4.4  1998/10/20  17:35:50  armnrbd
*     Rafiner le controle de lecture de la deuxieme carte de donnees.
*
*     Revision 4.3  1998/10/01  20:45:10  armnrbd
*     Corriger la lecture des cartes de directives.
*     BugFix sur la conversion a Pascal pour PT.
*
*     Revision 4.2  1998/09/28  21:37:14  armnrbd
*     Corriger le bloc de declarations de variables.
*
*     Revision 4.1  1998/09/28  21:13:06  armnrbd
*     Ajouter un message si PTOIT est lu dans un fichier (COORD=GEM).
*
*     Revision 4.0  1998/09/23  16:08:36  armnrbd
*     Version initiale.
*

*----------------------------------------------------------------------------
      use diag_toc, only: GetTOC, LirTOC, NewTOC, NosTOC

      IMPLICIT    none

      INTEGER,    PARAMETER :: HEAD   = taille_entete
      INTEGER,    PARAMETER :: MAXLEV = 999
      REAL,       PARAMETER :: PTMIN  = pression_au_toit

      CHARACTER(10) CLEVS(MAXLEV)
      CHARACTER   GRTYP,GEM4LEV*10,LIGNE*80,
     +            PKTYP*2,VKINDC*16,CHECK*2,
     +            VERBE*8,VERBEX*8
      CHARACTER(4) TYPE,COORD,COORDI,CLNSP,STATUS
      REAL(8)     PREF8,PTOIT8,R8,R28,PREFI8,CORR1
      LOGICAL     OK,MODETA,MODETAI,DOIT,BIGF,AABB,
     +            SetPTo,DEF,MONOTON,MONOTONE,LAPSE,
     +            FTOPP,RLV,APPEND,BAD_RL,lastTatU
      REAL        FDCOL(MAXLEV),FCOL(MAXLEV),SD(MAXLEV),
     +            PTOIT,PTOITI,PREF,PREFI,R,R2,R0,R20,RI,
     +            RLUP,RLDN,TOPASCL,LNPT,LNPTI,PTOIT0,PREF0,
     +            PRNPL,AMIN,AMAX,AMEAN,BIGBIN,RN(2)
      INTEGER     KBUF(HEAD),LBUF(HEAD),VKIND,VKINDI,VK,
     +            MBUF(HEAD),NF,NPL,NSL,IP1,IP2,version,NBRtoc,
     +            I,J,K,L,M,NAME,MAXL,MAXW,MAXW1,MAXW2,MAXW4,LEN,
     +            LEN1,LEN2,LEN4,NWDS,KPAK,LPAK,MPAK,NPT,NPACK,
     +            NSETS,IO,IER,LIM1,LIM2,TOP,BOT,INC,IUN,HOLD,
     +            TOC_NBR,NFOUT,NI,NJ,LNAME,NPL1,LL,TOPE,BOTE,
     +            INCE,IN1,IG10,IG20, NLEVD,NLEVT

      INTEGER     LEV(MAXLEV)
      REAL        AI (MAXLEV+1),BI   (MAXLEV+1),
     +            AO (MAXLEV)  ,BO   (MAXLEV)

      REAL                    FPC  (MAXLEV),DFLNP(MAXLEV+2)
      REAL        PR (MAXLEV),PRLOG(MAXLEV),DLNP (MAXLEV)

      REAL        A(MAXLEV+1),B(MAXLEV+1)
      NAMELIST   /AABB_NML/ A,B

      LOGICAL,    EXTERNAL :: RPBLOC
      CHARACTER(4), EXTERNAL :: GETYP,GETHIC
      INTEGER,    EXTERNAL :: FCLOS,FNOM,GETHIGH
      INTEGER,    EXTERNAL :: GETSIZ,GETSIZ2,GETKIND
      EXTERNAL    MACSPE,JCLPNT,GETLIGN,XIT,BURNF,CONVPR,
     +            CMPLBL,COORDAB,GETSET2,FMMM2,LEADBLK,
     +            SETKIND,MONVERT,GEMVRTL,ELAEL,
     +            GETFLD2,PAEL,PUTSET2,WRITLEV,
     +            LIRPT,GETPT,SETPT

      INTEGER,    DIMENSION(:), ALLOCATABLE        :: IBUF
      INTEGER,    DIMENSION(:), POINTER            :: LEVS,LEV2D,LEV2T
      REAL,       DIMENSION(:), ALLOCATABLE,TARGET :: LNSP,TOPP,TOPPI
      REAL,       DIMENSION(:), ALLOCATABLE        :: F,ETA
      REAL,       DIMENSION(:,:), POINTER          :: PS2D
      REAL(8),    DIMENSION(:), POINTER            :: A4,B4, AT,BT, AD,BD
      REAL,       DIMENSION(:), POINTER            :: PS

      DATA        DEF   / .FALSE. /,
     +            LAPSE / .TRUE.  /,
     +            FTOPP / .TRUE.  /,
     +            DOIT  / .TRUE.  /,
     +            SetPTo/ .TRUE.  /

      DATA        CHECK / ' '     /
      DATA        MODETA/ .FALSE. /,
     +            MODETAI/.FALSE. /

      DATA      ( CLEVS(L), L=1,28 )
     +                              /
     +           '0.0'  , '0.010', '0.020', '0.040', '0.061',
     +           '0.091', '0.131', '0.177', '0.222', '0.273',
     +           '0.328', '0.384', '0.444', '0.500', '0.555',
     +           '0.611', '0.666', '0.722', '0.773', '0.818',
     +           '0.859', '0.894', '0.925', '0.950', '0.970',
     +           '0.985', '0.995', '1.000'
     +                              /

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/gpasg.ptn,v $'

*-----------------------------------------------------------------------
***   ACCEDER LES FICHIERS D'E/S.

      NF = 6 ; IN1 = 1 ; NFOUT = 3
      CALL JCLPNT( NF, IN1,2,3, 4, 5,6 )

      CALL GETVERB( VERBE )
      CALL LOW2UP( VERBE,VERBE )

      COORDI = ' '
      BIGF   =.FALSE.
      RLV    =.FALSE.
      AABB   =.FALSE.
      APPEND =.FALSE.
      BAD_RL =.FALSE.
      
      IF (VERBE ==  'GPASG')                                   THEN
          VERBEX ='  Gpasg '
      ELSE
     +IF (VERBE ==  'GSASG')                                   THEN
          VERBEX ='  Gsasg '
      ELSE
     +IF (VERBE ==  'GSAHY')                                   THEN
          CALL                                     XIT('  Gsahy ',-1 )
      END IF

      PKTYP = GETYP( IN1 )

      COORD ='GEM2'
      PTOIT = PTMIN
      PREF  = 80000.
      PREF8 = -1.0
      R     =  1.0
      R2    =  1.0
      R0    = -1.0
      R20   = -1.0

      NBRtoc = 0

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

          NSL    = 28
          RLUP   = 0.0
          RLDN   = 0.0

          OK = RPBLOC('KIND',LIGNE)
          IF (OK) COORD = LIGNE

          OK = RPBLOC('N',LIGNE)
          IF (OK) READ(LIGNE,0005,END=914,ERR=914,IOSTAT=IO) NSL

          OK = RPBLOC('B',LIGNE)
          IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) RLUP

          OK = RPBLOC('C',LIGNE)
          IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) RLDN

          SetPTo = RPBLOC('I',LIGNE)
          IF (SetPTo) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) PTOIT

          OK = RPBLOC('J',LIGNE)
          IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) PREF8

          OK = RPBLOC('K',LIGNE)
          IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) R0

          IF (VERBE.EQ.'GSASG')                                THEN

              PTOITI = PTOIT
              PREFI8 = PREF8
              RI     = R

              OK = RPBLOC('KIND2',LIGNE)
              IF (OK) COORDI = LIGNE

              OK = RPBLOC('I2',LIGNE)
              IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) PTOITI
 
              OK = RPBLOC('J2',LIGNE)
              IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) PREFI8

              OK = RPBLOC('K2',LIGNE)
              IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) RI

          END IF

          IF (COORD == 'GEM4')                                 THEN

              lastTatU = .FALSE. ; R2 = R ; GEM4LEV = 'MOMENTUM'

              OK = RPBLOC('K2',LIGNE)
              IF (OK) READ(LIGNE,0011,END=914,ERR=914,IOSTAT=IO) R20

              OK = RPBLOC('L',LIGNE)
              IF (OK .AND.
     +            .NOT.(LIGNE /= '****' .AND. LIGNE /= ' '))   THEN
                  GEM4LEV = LIGNE
                  CALL LOW2UP( GEM4LEV,GEM4LEV )
              END IF


              OK = RPBLOC('L2',LIGNE)
              IF (OK. AND. (LIGNE == 't' .OR. LIGNE == 'T'))
     +            lastTatU = .TRUE.

          END IF

          OK = RPBLOC('DEFAUT',LIGNE)
          IF (OK)                                              THEN
              IF (LIGNE /= ' ') CALL LEADBLK( LIGNE )
              IF (LIGNE == '-1')                               THEN
                  DEF = OK
              ELSE IF (LIGNE /= ' ')                           THEN
                  CALL low2up( LIGNE,LIGNE )
                  IF (index( LIGNE,'AABB'   )  > 0) AABB   = OK
                  IF (index( LIGNE,'APPEND' )  > 0) APPEND = OK
                  IF (index( LIGNE,'DEFLEVS' ) > 0) DEF    = OK
                  IF (.NOT.(APPEND .OR. AABB .OR. DEF))        THEN
                      WRITE(6,6028) TRIM( LIGNE )
                      CALL                         XIT( Verbex ,-28)
                  END IF
              END IF
          END IF

          IF (COORD /= 'GEM4') APPEND = .FALSE.

          IF (APPEND)                                          THEN
              ! Does NFOUT point to an pre-existing file.
              CALL GETSTAT( NFOUT, STATUS )
              IF (STATUS == 'OLD')                             THEN
                  ! Yes, activate the 'APPEND' mode.
                  CALL PUTPOSIT( NFOUT,'APPEND' )
              ELSE
                  APPEND = .FALSE.
              END IF
          END IF

      ELSE

***        READ THE FIRST CONTROL CARD.

          CALL GETLIGN( 5,LIGNE,80,OK ) 

          IF (.NOT.OK)                                         THEN
              GOTO 914
          ELSE
              IF (VERBE.EQ.'GPASG')                            THEN
                   READ( LIGNE, 5010,END=914,ERR=914,IOSTAT=IO) 
     +                   NSL,COORD,PTOIT,RLUP,RLDN
              ELSE IF (VERBE.EQ.'GSASG')                       THEN 
                   READ( LIGNE, 5015,END=914,ERR=914,IOSTAT=IO) 
     +                   NSL,COORD,PTOIT,COORDI,PTOITI,RLUP,RLDN
              END IF
          END IF  

      END IF

***    ACCOUNT FOR DEFAULT TREATMENT.

      IF (NSL.LT.0)                                            THEN
          NSL  = -NSL
          BIGF =.TRUE.
      END IF

      ALLOCATE( ETA(NSL),LEVS(NSL) )

      IF (COORD.NE.' ') CALL LEADBLK( COORD )
      IF (COORD.EQ.' ') COORD = 'DEF'

                                                 VKINDC = 'HYBRIDE'
      IF (COORD /= 'GEM2' .AND. COORD /= 'GEM4') VKINDC = 'ETA'

      IF (VERBE.EQ.'GSASG')                                    THEN

          IF (COORDI.NE.' ') CALL LEADBLK( COORDI )
          IF (COORDI.EQ.' ') COORDI = 'DEF'

          IF (AABB .AND. COORDI == 'DEF') COORDI = 'GEM'

          IF (PREFI8 <= 0.0_8)                                 THEN
              ! Reset PREF8 for GEM4. PREF is already set otherwise.
              IF (COORDI == 'GEM4') PREFI8 = 100000.
          ELSE IF (COORDI == 'GEM4')                           THEN
              PREFI8 = 100000. ! This is the only allowed value.
          ELSE
              PREFI = PREFI8
          END IF

      ELSE
          COORDI = 'PRES'
      END IF

      IF (R0  > 0.) R  = R0
      IF (R20 > 0.) R2 = R20

      IF (PREF8 <= 0.0_8)                                      THEN
          ! Reset PREF8 for GEM4. PREF is already set otherwise.
          IF (COORD == 'GEM4') PREF8 = 100000.
      ELSE IF (COORD == 'GEM4')                                THEN
          PREF8 = 100000. ! This is the only allowed value.
      ELSE
          PREF = PREF8
      END IF

      IF (COORD.EQ.'SIG')                                      THEN 
          PTOIT = MAX( PTOIT, 0.00 ) 
          LNPT  = PTOIT
      ELSE IF (COORD(1:3).NE.'GEM')                            THEN
          PTOIT = MAX( PTOIT, PTMIN ) 
      END IF

      IF (COORDI == 'GEM4') PREFI = 100000.

      IF (COORD.NE.'SIG') LNPT = LOG( PTOIT )

      IF (NSL.GT.MAXLEV) CALL                      XIT( VERBEX ,-1 )

!!!   IF (PKTYP.EQ.'SQ')                                       THEN
!!!       IF  (COORD .EQ.'GEM2' .OR.
!!!  +         COORD .EQ.'GEM3' )
!!!  +         CALL SETPT( PTOIT,PREF,R )
!!!       IF ((COORDI.EQ.'DEF'  .OR.
!!!  +         COORDI.EQ.'GEM2' .OR.
!!!  +         COORDI.EQ.'GEM3' ) .AND. VERBE.EQ.'GSASG')
!!!  +         CALL SETPT( PTOITI,PREFI,RI )
!!!   END IF

      IF (.NOT.(APPEND .OR. (DEF .AND. (NSL == 28))))          THEN

***        READ THE REQUESTED ETA LEVELS.

          IF (BIGF)                                            THEN
              DO  K=1,(NSL-1)/8+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 915
                  ELSE
                      LIM1 = 8*(K-1)+1
                      LIM2 = MIN( NSL, 8*K )
                      READ( LIGNE, 5030,END=915,ERR=915,IOSTAT=IO) 
     +                                  (CLEVS(I),I=LIM1,LIM2)
                  END IF  
                  IF (INDEX( LIGNE,'.').NE.0) RLV = .TRUE.
              END DO
          ELSE
              DO  K=1,(NSL-1)/16+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 915
                  ELSE
                      LIM1 = 16*(K-1)+1
                      LIM2 = MIN( NSL, 16*K )
                      READ( LIGNE, 5020,END=915,ERR=915,IOSTAT=IO) 
     +                                  (CLEVS(I),I=LIM1,LIM2)
                  END IF  
                  IF (INDEX( LIGNE,'.').NE.0) RLV = .TRUE.
              END DO
          END IF

          CALL BURNF

      ELSE

          RLV = .TRUE.

      END IF

***    GET SIZE FROM FIRST SET OF BUFFERS.
 
      MAXW1 = GETSIZ2( IN1, KBUF,LEN1,NWDS,KPAK, LEV,NPL )

      IF (MAXW1.EQ. 0 .OR.
     +    NSL  .EQ. 0 .OR.
     +    NSL  .GT. MAXLEV) CALL                   XIT( VERBEX ,-4 )

***    CHECKS THE VERTICAL LEVEL INFORMATION THAT CAN BE
***    RETREIVED FROM THE FIRST INPUT FILE (GPFLD/GSFLD)

      IF (PKTYP.EQ.'SQ')                                       THEN

          IF (.NOT.AABB .AND. VERBE.EQ.'GSASG')                THEN

#             define COORD COORDI
#             define VKIND VKINDI
!!!           define NO_TOC_GEM4_IN
#             define NO_UPDATING_PARAMS
#             include "toc_gest_1.cdk"
#             undef  VKIND
#             undef  COORD

***            DEFINE NEW VALUES OF PTOIT,PREF AND R ?

              IF (PTOIT0 /= -1. .AND. COORDI /= 'GEM4')        THEN
                  PTOITi  = PTOIT0
                  PREFi   = PREF0
                  Ri      = R0
              END IF

          ELSE IF (VERBE.EQ.'GPASG')                           THEN

              VKINDI = GETKIND() ! Retreives the LEV type found by GETSIZ2.

              IF (VKINDI.NE.2)                                 THEN
                  CALL                             XIT( VERBEX ,-16)
              END IF

          END IF

      ELSE IF (COORDI.EQ.'DEF' .AND. .NOT.AABB)                THEN

          IF (VERBE.EQ.'GSASG') COORDI = 'ET15'

      END IF

      CORR1 = LOG( 100._8 ) ! Used in AABB-mode with GEM4

      NI = KBUF(5) ; NJ = KBUF(6)
      
***    CHECK OUTPUT LEVS CONSISTENCY.

                           VKIND = 1
      IF (COORD == 'GEM2'  .OR.
     +    COORD == 'GEM4') VKIND = 5

      IF (.NOT.APPEND)                                         THEN

          DO  K=1,NSL

          IF (.NOT.RLV)                                        THEN
              READ( CLEVS(K),10, ERR=915,END=915,IOSTAT=IO ) LEVS(K)
              CALL CONVPR( LEVS(K), ETA(K), VK, -2 )
              IF (PKTYP.EQ.'SQ')                               THEN
                  IF (VK.NE.VKIND) CALL            XIT( VERBEX , -19)
                  CALL CONVPR( LEVS(K), ETA(K), VK, +2 )
              ELSE IF (VK.EQ.2)                                THEN
                  ETA(K) = ETA(K) * 0.001
                  IF (K.EQ.NSL .AND. LEVS(K).EQ.1) ETA(K) = 1.0
              END IF
          ELSE
              READ( CLEVS(K),11, ERR=915,END=915,IOSTAT=IO ) ETA(K)
              IF (PKTYP.EQ.'SQ')                                THEN
                  CALL CONVPR( LEVS(K), ETA(K), VKIND, +2 )
              ELSE
                  CALL LVCODE( LEVS(K), ETA(K), 1 ) 
              END IF
          END IF

          END DO

      END IF

      IF (PKTYP.EQ.'SQ')                                       THEN
          IF (COORD  == 'GEM4')                                THEN

              IF (APPEND)                                      THEN

***            TRY LOOKKING FOR A !! RECORD ON NFOUT.

                  CALL LirToc( NFOUT, NBRtoc )

                  IF (NBRtoc > 0)                              THEN
                      call GetTOC( NFOUT, 'IP1',IP1, NBRtoc )
                      call GetTOC( NFOUT, 'IP2',IP2, NBRtoc )
                  END IF

              END IF

              IF (NBRtoc == 0)                                 THEN

***                Define a TocToc (GEM4) record.

                  PREF8 = PREF ; PTOIT8 = PTOIT
                  VERSION = 2 ; if (lastTatU) VERSION = 3

                  GRTYP = GETHIC('GRTYP',KBUF )

                  IF (.NOT.(GRTYP == 'Z' .OR. GRTYP == 'U'))   THEN
                      IP1 = 0 ; IP2 = 0
                  ELSE
                      IP1  = GETHIGH('IG1',KBUF )
                      IP2  = GETHIGH('IG2',KBUF )
                  END IF

                  RN(1) = R ; RN(2) = R2

                  CALL  NewTOC ( NFOUT, VERSION,ETA,RN,
     +                       PTOIT8,PREF8,IP1,IP2, NBRtoc )

              END IF

              If (NBRtoc == 0) CALL                XIT( VERBEX ,-25 )

              IF (GEM4LEV == 'MOMENTUM' .or. GEM4LEV == 'DYN') THEN
                 CALL GetTOC( NFOUT,'VIPM',LEVS,IP1,IP2 )
                 CALL GETTOC( NFOUT,'CA_M', A4, IP1,IP2 )
                 CALL GETTOC( NFOUT,'CB_M', B4, IP1,IP2 )
              ELSE IF (GEM4LEV == 'THERMODYN')                 THEN
                 CALL GetTOC( NFOUT,'VIPT',LEVS,IP1,IP2 )
                 CALL GETTOC( NFOUT,'CA_T', A4, IP1,IP2 )
                 CALL GETTOC( NFOUT,'CB_T', B4, IP1,IP2 )
              ELSE
                  WRITE(6,6023) GEM4LEV
                  CALL                             XIT( VERBEX ,-23 )
              END IF

              NSL = size( LEVS )
              IF (NSL < 1 .OR. NSL > MAXLEV) CALL  XIT( VERBEX ,-23 )
              DEALLOCATE( ETA ) ; ALLOCATE( ETA(NSL) )

              AO(1:NSL) = A4(1:NSL) ; BO(1:NSL) = B4(1:NSL)

              DO  K=1,NSL
                  CALL CONVPR( LEVS(K), ETA(K), VK, -2 )
                  IF (VK /= VKIND) CALL            XIT( VERBEX ,-19 )
              END DO

              CALL GETTOC( NFOUT, 'PTOP' ,PTOIT8, IP1,IP2 )
              CALL GETTOC( NFOUT, 'PREF' ,PREF8 , IP1,IP2 )
              CALL GETTOC( NFOUT, 'RC_1' ,R8    , IP1,IP2 )
              CALL GETTOC( NFOUT, 'RC_2' ,R28   , IP1,IP2 )

              PTOIT = PTOIT8 ; PREF = PREF8 
              R = R8 ; R2 = R28

          END IF
      END IF

      MAXW2 = GETSIZ( 2, LBUF,LEN2,NWDS,LPAK )

      IF (MAXW2.EQ. 0) CALL                        XIT( VERBEX ,-3 )

      LEN  = MAX( LEN1, LEN2  )
      MAXW = MAX( MAXW1,MAXW2 )

      WRITE(CLNSP,0004) LBUF(3)

      IF (CLNSP.NE.'LP'  .AND.
     +    CLNSP.NE.'LNSP')                                     THEN
          WRITE(6,6003) CLNSP
          CALL                                     XIT( VERBEX ,-3 )
      END IF

***    COMPARE FIRST SETS.

      CALL CMPLBL( 0,KBUF, 0,LBUF, OK ) 

      IF (.NOT.OK)                                             THEN
          CALL PRTLAB( KBUF ) ; CALL PRTLAB( LBUF )
          CALL                                     XIT( VERBEX ,-5 ) 
      END IF

      IF (VERBE.EQ.'GSASG')                                    THEN

          IF (COORDI.EQ.'SIG')                                 THEN 
              PTOITI = MAX( PTOITI, 0.00 ) 
          ELSE IF (COORDI(1:3).NE.'GEM')                       THEN
              PTOITI = MAX( PTOITI, PTMIN ) 
          END IF

      END IF 

***    IS THERE A TOP PRESSURE FILE AVAILABLE.

      FTOPP = .FALSE.
      IF ( NF.GE.4 .AND. (COORD.EQ.'GEM'.OR.COORDI.EQ.'GEM'))
     +     FTOPP = .TRUE.

***    PRINT OUT OPERATING PARAMETRES.

      IF      (COORD      .EQ.'GEM' .OR.
     +         COORDI     .EQ.'GEM')                           THEN
          IF (.NOT.FTOPP) WRITE(6,6000) COORD,PTOIT
          IF (     FTOPP) WRITE(6,6050) COORD
      ELSE IF (COORD(1:3) .NE.'GEM' .AND.
     +         COORDI(1:3).NE.'GEM')                           THEN
          IF (VERBE.EQ.'GPASG')                                THEN
              WRITE(6,6100) RLUP,RLDN,COORD,PTOIT
          ELSE IF (VERBE.EQ.'GSASG')                           THEN
              WRITE(6,6150) COORDI,PTOITI,COORD,PTOIT,RLUP,RLDN
          END IF
      END IF
 
***    CHECK THAT PR and ETA ARE MONOTONIC AND (SLIGHTLY) CONSISTENT.

      DO  L=1,NPL
          CALL CONVPR( LEV(L),PR(L), VKINDI, -2 )
          ! Account for the CCCma file conventions
          IF (VERBE == 'GSASG' .AND. VKINDI == 2) PR(L) = PR(L) * 0.001
      END DO

      CALL MONVERT( ETA,NSL, TOPE,BOTE,INCE, MONOTONE )
      CALL MONVERT( PR, NPL, TOP, BOT, INC,  MONOTON )

      IF (.NOT.SetPTo)                                         THEN
          ! PTOIT not set. Use value from input file ?
          IF (VERBE == 'GPASG' .OR. .NOT.APPEND)               THEN
              IF (VERBE == 'GPASG')                            THEN
                  PTOIT = PR(TOP)
              ELSE IF (.NOT.APPEND)                            THEN
                  PTOIT = PTOITi
              END IF
              WRITE(6,'(A)')
     +        'Specifying output PTOIT from value found in input file'
          END IF
      END IF

      CALL GEM23_SANITY_CHECK( COORD, ETA(TOPE),PREF,PTOIT )

      CALL WRITLEV( ETA,NSL,'Output ' // COORD )

      IF (.NOT.MONOTONE) CALL                      XIT( VERBEX ,-2 )

***    EVALUATE THE PARAMETRES OF THE OUTPUT
***    ETA VERTICAL DISCRETIZATION.

      IF (COORD.EQ.'GEM2' .OR. COORD.EQ.'GEM3')                THEN

          IF (.NOT.MODETA .AND. COORD.EQ.'GEM3')               THEN

              MODETA =.TRUE.

              ETA(1:NSL) = ETA(1:NSL)
     +                   + ( 1.0 - ETA(1:NSL) ) * PTOIT / PREF

          END IF

          WRITE(6,6100) RLUP,RLDN,COORD,PTOIT
          WRITE(6,6250) PREF,R

          CALL GENAB( AO,BO, ETA, PTOIT,PREF,R, NSL )

      ELSE IF (COORD == 'GEM4')                                THEN

          WRITE(6,6100) RLUP,RLDN,COORD,PTOIT
          WRITE(6,6252) PREF,R,R2

      ELSE IF (COORD /= 'GEM')                                 THEN

          CALL COORDAB( AO,BO, NSL,ETA, COORD,PTOIT )

      ELSE

***        For GEM, PRLOC = PTOIT + ETA(:) * ( PS(:) - PTOIT )
***        where PTOIT could be a 2D field (see FTOPP).

          AO(1:NSL) = PTOIT*(1.0-ETA(1:NSL))
          BO(1:NSL) = ETA(1:NPL)

      END IF

      IF (FTOPP .AND.
     +   (COORDI.EQ.'GEM' .OR. COORD.EQ.'GEM'))                THEN

***        COMPARE FIRST TOPP WITH LNSP.

          MAXW4 = GETSIZ(  4, MBUF,LEN4,NWDS,MPAK )
          IF (MAXW4.EQ. 0) CALL                    XIT( VERBEX ,-6 )

          CALL CMPLBL( 0,LBUF, 0,MBUF, OK ) 

          IF (.NOT.OK)                                         THEN
              CALL PRTLAB( LBUF ) ; CALL PRTLAB( LBUF )
              CALL                                 XIT( VERBEX ,-7 ) 
          END IF

          LEN  = MAX( LEN, LEN4  )
          MAXW = MAX( MAXW,MAXW4 )

      END IF

      CALL GEM23_SANITY_CHECK( COORDI, PR(TOP),PREFI,PTOITI )

      IF (VERBE.EQ.'GPASG')                                    THEN
          CALL WRITLEV( PR,NPL,'Input PRES' )
      ELSE IF (VERBE.EQ.'GSASG')                               THEN
          CALL WRITLEV( PR,NPL, 'Input '// COORDI )
      END IF

      IF (.NOT.MONOTON) CALL                       XIT( VERBEX ,-2 )

      IF (VERBE == 'GPASG')                                    THEN

***        INPUT PRESSURE LEVELS IS CONVERTED TO PASCALS.

          TOPASCL = 100.0

          DO  L=1,NPL
              PR(L)    = PR(L)*TOPASCL   
              PRLOG(L) = LOG( PR(L) )
          END DO

      ELSE IF (VERBE.EQ.'GSASG' .AND. .NOT.AABB)               THEN

***        EVALUATE THE PARAMETERS OF THE SOURCE
***        ETA VERTICAL DISCRETIZATION.

          IF (COORDI == 'GEM2' .OR. COORDI == 'GEM3')          THEN

              IF (.NOT.MODETAI .AND. COORDI.EQ.'GEM3')         THEN

                  MODETAI =.TRUE.

                  PR(1:NPL) = PR(1:NPL)
     +                      + ( 1.0 - PR(1:NPL) ) * PTOITI / PREFI

              END IF

              WRITE(6,6102) COORDI,PTOITI
              WRITE(6,6251) PREFI,RI

              CALL GENAB( AI,BI, PR, PTOITI,PREFI,RI, NPL )

          ELSE IF (COORDI == 'GEM4')                           THEN

***            Dynamic or Thermodynamic input levels  ?

              CALL GetTOC( IN1,'VIPM',LEV2D,IG10,IG20 )
              CALL GetTOC( IN1,'VIPT',LEV2T,IG10,IG20 )
              NLEVD = size( LEV2D ) ; NLEVT = size( LEV2T )

              CALL GETTOC( IN1,'CA_M', AD,  IG10,IG20 )
              CALL GETTOC( IN1,'CB_M', BD,  IG10,IG20 )
              CALL GETTOC( IN1,'CA_T', AT,  IG10,IG20 )
              CALL GETTOC( IN1,'CB_T', BT,  IG10,IG20 )

              FIND_LEVELS : DO  I=1,NPL

                  AI(I) = -1.0

                  DO  J=1,NLEVD
                      IF (LEV2D(J) == LEV(I))                  THEN
                          AI(I) = AD(J) ; BI(I) = BD(J)
                          CYCLE FIND_LEVELS
                      END IF
                  END DO

                  DO  J=1,NLEVT
                      IF (LEV2T(J) == LEV(I))                  THEN
                          AI(I) = AT(J) ; BI(I) = BT(J)
                          CYCLE FIND_LEVELS
                      END IF
                  END DO

                  IF (AI(I) < 0.0)                             THEN
                      WRITE(6,6026) I,PR(I)
                      CALL                         XIT( VERBE ,-26)
                  END IF

              END DO FIND_LEVELS

!!!           ! GEM4 is not supported in this mode.
!!!           WRITE(6,'("GEM4 not supported in GSASG if AABB=F")')

          ELSE IF (COORDI.NE.'GEM')                            THEN

              CALL COORDAB( AI,BI, NPL,PR, COORDI,PTOITI )

          ELSE

***            For GEM, PRLOCI = PTOITI + ETAI(:) * ( PSI(:) - PTOITI )
***            where PTOITI could be a 2D field (see FTOPPI).

              AI(1:NPL) = PTOIT*(1.0-PR(1:NPL))
              BI(1:NPL) = PR(1:NPL)

          END IF
          
          IF (COORDI.NE.'SIG')                                 THEN
              LNPTI = LOG( PTOITI )
          ELSE
              LNPTI =      PTOITI
          END IF

      ELSE IF (VERBE.EQ.'GSASG' .AND. AABB)                    THEN

***        AI and BI are read from namelist file 'aabb.nml'.

#         define NSL NPL
#         define COORD COORDI
#         include "set_a_b_from_AABB.cdk"
#         undef COORD
#         undef NSL

          AI = A ; BI = B

      END IF 

***    RESET OUTPUT VERTICAL COORDINATE PARAMETRES SETTINGS, IF NEED BE.

      IF (PKTYP.EQ.'SQ')                                       THEN
          IF (COORD.EQ.'GEM2' .OR.
     +        COORD.EQ.'GEM3' )                                THEN
              CALL SETPT( PTOIT,PREF,R )
          ELSE
              CALL SETPT( -1.0,-1.0,-1.0 )
          END IF
      END IF

***    ALLOCATE WORKING MEMORY.

      NAME = KBUF(3)
      WRITE(TYPE,0004) KBUF(1)

      IF (TYPE.NE.'GRID' .AND.
     +    TYPE.NE.'SUBA') CALL                     XIT( VERBEX ,-27) 

      MAXL = MAX( NSL,NPL )+1 

      ALLOCATE( IBUF(LEN),LNSP(NWDS),F(NWDS*MAXL), STAT=IER )
      IF (IER /= 0) GOTO 924

      PS => LNSP ! PS points to LNSP
      
***    ALWAYS ALLOCATE AND INITIALIZE THE TOP PRESSURE ARRAYS.

      ALLOCATE( TOPP(NWDS),TOPPI(NWDS), STAT=IER )
      IF (IER /= 0) GOTO 924

      TOPP = LNPT ; TOPPI = LNPTI
*---------------------------------------------------------------------

***    GET NEXT SET FROM FILE GPFLD.
 
      NSETS = 0

  150 CALL GETSET2( IN1, F, LEV,NPL1, IBUF,MAXW,OK )

          IF (NSETS.EQ.0) CALL PRTLAB( IBUF )

          IF (.NOT.OK)                                         THEN
              WRITE(6,6300) VERBE,NSETS,NAME
              IF (NSETS.EQ.0)                                  THEN
                  CALL                             XIT( VERBEX ,-8 )
              ELSE IF (BAD_RL)                                 THEN
                  write(6,6101)
                  CALL                             XIT( VERBEX ,-101)
              ELSE
                  IF (COORDI == 'GEM4' .AND.
     +                COORD  /= 'GEM4')
     +            CALL NosTOC( NFOUT )
                  CALL                             XIT( VERBEX , 0 )
              END IF
              GOTO 1000
          END IF

          CALL CMPLBL( 0,IBUF, 0,KBUF, OK )

          IF (.NOT.OK .OR. NPL /= NPL1)                        THEN
              IF (.NOT.OK)                                     THEN
                  CALL PRTLAB( IBUF ) ; CALL PRTLAB( KBUF )
              END IF
              IF (NPL /= NPL1) WRITE(6,6009) NPL, NPL1
              CALL                                 XIT( VERBEX ,-9 ) 
          END IF

          IF (PKTYP == 'SQ')                                   THEN
              CALL CONVPR( LEV(NPL),PRNPL, VKIND, -2 )
              IF ((VKIND /= 2 .AND. VERBE == 'GPASG')
     +       .OR. (VKIND == 2 .AND. VERBE /= 'GPASG'))         THEN
                  CALL PRTLAB( IBUF ) ; CALL       XIT( VERBEX ,-16)
              END IF
          END IF

          NPT   = IBUF(2)
          LNAME = IBUF(3)
          NPACK = IBUF(8)

          IF (LNAME /= NAME) BAD_RL = .TRUE.

***        GET LN(SF PRES) FOR THIS STEP, PUT BEFORE F IN MEMORY.
 
          CALL GETFLD2( 2, LNSP, 'GRID'//'SUBA',NPT,CLNSP,
     +                            -1,IBUF,MAXW,OK )

          IF (NSETS.EQ.0) CALL PRTLAB( IBUF )
          IF (.NOT.OK) CALL                        XIT( VERBEX ,-10)

          CALL CMPLBL( 0,IBUF, 0,LBUF, OK )

          IF (.NOT.OK)                                         THEN
              CALL PRTLAB( IBUF ) ; CALL PRTLAB( LBUF )
              CALL                                 XIT( VERBEX ,-11) 
          END IF

***        CHECK THAT LNSP REALLY CONTAINS LN( SURFP ).

          IF (CHECK.EQ.' ')                                    THEN
              CALL FMMM2( AMIN,AMAX,AMEAN, LNSP,NWDS )
              AMIN = EXP( AMIN ) ; AMAX = EXP( AMAX )
              IF (AMIN .LE. 330    .OR.
     +            AMAX .GE. 1212.) CALL            XIT( VERBEX ,-21)
              CHECK = 'OK'
          END IF

          IF (COORD.EQ.'GEM'.OR.COORDI.EQ.'GEM')               THEN

              IF (FTOPP)                                       THEN

***                GET TOPP FOR THE CURRENT STEP.
 
                  CALL GETFLD2( 4, TOPP, 'GRID'//'SUBA',NPT,'PT',
     +                                        -1,IBUF,MAXW,OK )

                  IF (NSETS.EQ.0) CALL PRTLAB( IBUF )
                  IF (.NOT.OK) CALL                XIT( VERBEX ,-12)
              
                  CALL CMPLBL( 0,IBUF, 0,MBUF, OK )

                  IF (.NOT.OK)                                 THEN
                      CALL PRTLAB( IBUF ) ; CALL PRTLAB( MBUF )
                      CALL                         XIT( VERBEX ,-13) 
                  END IF

                  TOPPI = TOPP

              END IF

          END IF

          IF (VERBE.EQ.'GPASG')                                THEN

              IF (COORD.EQ.'GEM')                              THEN

***                CONVERT TOPP AND LNSP TO LN(PRESSURE IN PASCALS)

                  IF (FTOPP) TOPP = LOG( TOPP *100. )
                  LNSP = LNSP+CORR1

***                DO INTERPOLATION USING (LOCAL VERSIONS)
***                OF GEM ROUTINES.

                  CALL GEMVRTL( F, LNSP, TOPP,NWDS, ETA,NSL , PRLOG,NPL,
     +                             LAPSE, FDCOL,SD,FCOL, TOP,BOT,INC )

              ELSE IF (COORD == 'GEM4')                        THEN

                  IF (.NOT.ASSOCIATED( PS2D ))                 THEN
                      ALLOCATE( PS2D(NI,NJ), STAT=IER )
                      IF (IER /= 0) GOTO 924
                  END IF

***                DO INTERPOLATION FROM GEM4 TO PRESSURE.
***                LOCAL PRESSURES CALCULATED INTERNALLY.

                  PS2D(1:NWDS,1) = EXP( LNSP(1:NWDS) + CORR1 )

                  CALL PLAGEM4( F,PS2D, PR,LEVS,
     +                      NI,NJ, NPL,NSL,
     +                      RLUP,RLDN,
     +                      IP1,IP2 )

              ELSE

***                INTERPOLATE IN-PLACE FROM PRESSURE TO ETA.
 
                  CALL PAEL( F,    NWDS,ETA,NSL,
     +                       F,    PRLOG,NPL, 
     +                       LNSP, RLUP,RLDN, A,B )
 
              END IF

          ELSE IF (VERBE.EQ.'GSASG')                           THEN

***            CONVERT LNSP AND TOPP TO PRESSURE IN PASCALS.

              LNSP = LNSP+CORR1
                  
              IF (FTOPP .OR. DOIT)                             THEN
                  IF (COORD .EQ.'GEM') TOPP  = EXP( TOPP ) 
                  IF (COORDI.EQ.'GEM') TOPPI = EXP( TOPPI )
                  DOIT    = .FALSE.
              END IF

***            INTERPOLATE FROM ETA TO DESIRED SET OF ETA LEVELS

              CALL ELAEL( F,    PR, NPL,AI,BI, COORDI,PTOITI,
     +                    F,    ETA,NSL,AO,BO, COORD ,PTOIT ,
     +                    LNSP, TOPP,TOPPI, RLUP,RLDN, NWDS )

          END IF

***        CHANGE IP1 CODING TO ETA FOR STANDARD FILES.

          IF (PKTYP.EQ.'SQ') CALL SETKIND( VKINDC )

***        WRITE THE PRESSURE/NEW ETA LEVEL GRIDS ONTO FILE 3.

          IBUF(3) = LNAME
          IBUF(4) = LEVS(NSL)
          IBUF(8) = NPACK

          CALL PUTSET2( 3, F,  LEVS,NSL,IBUF,MAXW )

          IF (NSETS.EQ.0) CALL PRTLAB( IBUF )
          NSETS = NSETS+1

      GOTO 150
 
***    E.O.F. ON INPUT.
 
 0914 IF (IO.NE.0) WRITE(6,6014) VERBE,IO
      CALL                                         XIT( VERBEX ,-14)
 0915 IF (IO.NE.0) WRITE(6,6014) VERBE,IO
      CALL                                         XIT( VERBEX ,-15)
 0920 IF (IO.NE.0) WRITE(6,6020) VERBE,IO
      CALL                                         XIT( VERBEX ,-20)
 0924 CALL                                         XIT( VERBEX ,-24)

 1000 CONTINUE

*---------------------------------------------------------------------
 0004 FORMAT(A4)
 0005 FORMAT(BN,I5)
 0010 FORMAT(BN,I10)
 0011 FORMAT(BN,E10.0)

 5010 FORMAT(10X,I5,1X,A4,3E10.0)
 5015 FORMAT(10X,I5,2(1X,A4,E10.0),2E10.0)
 5020 FORMAT(16A5)
 5030 FORMAT(8A10)

 6003 FORMAT(' Found ',A,' while expecting LP or LNSP'/)
 6009 FORMAT(' Expecting ',I3,' levels, found ',I3,' instead.'/)
 6014 FORMAT( A6,' reports I/O error number ',I5/)
 6016 FORMAT(' Unsupported vertical coordinate in gsfld, VKIND =',I9/)
 6020 FORMAT( A6,' Unable to read AI,BI in aabb.nml namelist file,',
     +      ' error no.',I5/)
 6021 FORMAT(' More that one input vertical coordinate'/) 
 6022 FORMAT(' Wrong number of A,B entries in AABB namelist.',
     +       ' Expecting ',I3,' of each, but found ',I3,'.'/)
 6023 FORMAT(' Unrecognized value of the G4LEV parametre... ',A/)
 6026 FORMAT(' Did not find level ',I3,1X,E15.7,' in !!'/)
 6028 FORMAT(' Unrecognized -def argument value... ',A/)

 6000 FORMAT(' COORD=',1X,A4,', PTOIT (PA)=',F10.3)
 6050 FORMAT(' COORD=',1X,A4,', PTOIT array is read')

 6100 FORMAT(' RLUP,RLDN = ',2F6.2,', COORD=',1X,A4,
     +       ', PTOIT (PA)=',F10.3)
 6101 FORMAT(' MORE THAN ONE VARIABLE NAME DETECTED, RLUP/RPDN'/
     +       ' VALUES MAY NOT BE APPROPRIATE.'/)
 6102 FORMAT(' COORDI=',1X,A4,', PTOITI (PA)=',F10.3)
 6110 FORMAT(' Using A and B from file aabb.nml'/)

 6150 FORMAT(' COORDI =',1X,A4,', PTOITI (PA)=',F10.3,
     +       ' COORDO =',1X,A4,', PTOITO (PA)=',F10.3,
     +       ' RLUP,RLDN = ',2F6.2)

 6250 FORMAT(' p.ref (pa)=',F10.3,', r (exponent)=',F10.3)
 6251 FORMAT(' p.refi(pa)=',F10.3,', ri(exponent)=',F10.3)
 6252 FORMAT(' p.ref (pa)=',F10.3,', r(exponents)=',2F10.3)

 6300 FORMAT('0',A6,' produced ',I5,' sets of ',A4)

      END
#     endif
