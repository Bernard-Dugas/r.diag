#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      xplot  xin input output [-t1 VAL1 -name VAL2 -lv1 VAL3 \ 
*                               -a VAL4 -b VAL5 -c VAL6 \ 
*                               -kind VAL7 [VAL8] -label VAL9]
*
*
*     DESCRIPTION...
*      PLOTS SINGLE LEVEL ZONAL/MERIDIONAL CROSS SECTION CURVE
*
*
*     AUTHOR  - N.E.SARGENT
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/xplot.ptn,v 4.15 2014/09/25 20:20:56 dugas Exp $
*
*
*     PURPOSE - PLOTS GLOBAL ZONALLY/MERIDIONALLY AVERAGED SINGLE LEVEL FIELD
*               VERSUS LATITUDE/LONGITUDE.
*
*
*     INPUT FILE...
*      XIN = FILE CONTAINING CURVES TO BE PLOTTED. NOTE THAT MULTI-LEVEL
*            ZONAL RECORDS WILL NOT BE TREATED BY XPLOT. CONVERSION USING
*            THE -SINGLZ KEYWORD SHOULD BE DONE AS A PRELIMINARY STEP.
*
*
*     INPUT PARAMETERS (FIRST LINE)
*      NSTEP   (t1)   = TIMESTEP NUMBER (BLANK INPUT DEFAULTS TO -1)
*      NAME           = NAME OF VARIABLE TO BE PLOTTED
*                       THE NAMES 'NEXT' AND 'SKIP' ARE RECOGNIZED BUT FILE XIN
*                       IS REWOUND BEFORE EACH SEARCH. THIS ALLOWS FIELDS TO BE
*                       IN ANY ORDER ON THE FILE, BUT 'NEXT' ALWAYS SELECTS THE
*                       FIRST FIELD AND 'SKIP' IS A NULL OPERATION. THE DEFAULT
*                       IS 'ALL', WHICH IMPLIES PLOTTING ALL RECORDS.
*      LEVEL   (lv1)  = LEVEL NUMBER (BLANK INPUT DEFAULTS TO -1)
*      YLO,YHI (a,b)  = LOWER,UPPER LIMITS OF VERTICAL AXIS.
*                       TICK MARKS DIVIDE THE AXIS INTO 10 DIVISIONS BETWEEN
*                       YLO AND YHI. A SOLID LINE IS DRAWN AT Y=0 IF YLO.LT.0.
*                       AND YHI.GT.0.,  BUT AT YLO OTHERWISE. IF YLO=YHI, THE
*                       PROGRAMS USES AUTOMATICALLY DETERMINED VALUES.
*      MS             = PRINTER PLOT PARAMETER (NOW IGNORED).
*      FMISS   (c)    = LOWER BOUND FOR VALUES TO BE PLOTTED.  IF VALUES ARE
*                       MISSING AT SOME LATITUDE,  CODE THEM AS LESS THAN FMISS
*                       AND NO POINT WILL BE PLOTTED FOR THAT LATITUDE, (VALUES
*                       LESS THAN FMISS ARE NOT PLOTTED).
*                       FMISS=0 OR BLANK DEFAULTS TO FMISS=-36.E36 .
*      NZMS   (kind1) = 0/1 FOR ZONAL/MERIDIONAL PLOT.
*      VKIND  (kind2) = VERTICAL LEVEL TYPE. IT CAN ONLY BE USED WITH CMC/RPN STD
*                       FILES AND THEN LV1 AND LV2 ARE ASSUMED TO CONTAIN DECODED
*                       VALUES. FURTHERMORE, THIS PARAMETRE CAN ONLY BE SPECIFIED
*                       IN COMMAND-LINE MODE. THE CURRENTLY SUPPORTED VALUES ARE:
*                       'HAUTEUR'   , heights (m) with respect to sea level
*                       'SIGMA'     , classical terrain following (0.0 -> 1.0)
*                       'ETA'       , first version of the GEM ETA coordinate
*                       'PRESSION'  , pressure (mb)
*                       'ARBITRAIRE', arbitrary level (no units apply)
*                       'HAUTEURS'  , heights (M) with respect to the surface
*                       'HYBRIDE'   , hybrid GEM coordinate
*                       'THETA'     , potential temperature coordinate
*                       'GALCHEN'   , GalChen generalized coordinate
*
*     INPUT PARAMETERS (SECOND LINE)
*      LABEL          = 80 CHARACTER LABEL PRINTED ABOVE PLOT.
*                       THE DEFAULT IS 'AUTOMATIC', WHICH IS
*                       APPROPRIATE WHEN NAME='ALL'.
*
*      FURTHERMORE, WHEN NAME='ALL', THE ACTUAL PRINTED LABEL WILL
*      BE THE SUPPLIED LABEL PLUS (IF THIS LAST IS SHORT ENOUGH)
*      THE RECORD ORDINAL, THE VARIABLE NAME, LEVEL AND TIMESTEP
*      (THESE REQUIRE 38 CHARACTERS TO BE PRINTED IN THE LABEL).
*
*     READ(5,5010) NSTEP,NAME,LEVEL,YLO,YHI,MS,FMISS,NZMS
*     READ(5,5012,END=902) LABEL
*5010 FORMAT(10X,I10,1X,A4,I5,2E10.0,I5,E10.0,I5)
*5012 FORMAT(A80)
*
*
*     EXAMPLE OF INPUT CARDS...
*
*  XPLOT         182  SUB    1   -5.0E-5    5.0E-5    1   -1.0E-4    0
*  JUL ZONALLY AVERAGED E-P (KG M-2 S-1), SHUTZ AND GATES.
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*
*     FATAL CONDITIONS...
*       1 UNABLE TO READ DIRECTIVES CARD
*       2 UNABLE TO READ LABEL CARD
*       3 FOUND MULTI-LEVEL ZONAL RECORD
*
*     NON-FATAL CONDITION...
*     101 FINISHED READING XIN
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM XPLOT
*     PROGRAM XPLOT (XIN,       INPUT,       OUTPUT,
*    1         TAPE1=XIN, TAPE5=INPUT, TAPE6=OUTPUT,
*    2                                 TAPE8       )
*     ----------------------------------------------
*
*     $Log: xplot.ptn,v $
*     Revision 4.15  2014/09/25 20:20:56  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.14  2010/05/06 16:25:30  dugas
*     - Le format natif/interne des dates est maintenant le DateTimeStamp CMC/RPN.
*     - Ainsi, les dates valides vont de l'an 0 a l'an 9999. La resolution
*       temporelle de ces dates est de trois heures, sauf pout les periodes de
*       1900 a 1979, ou elle est de une heure, et de 1980 a 2235 ou elle est
*       de 5 secondes.
*     - Le support des annees bisectyles peut etre desactive avec l'argument
*       global de la ligne de command '-bisect'. Par defaut, sa valeur = ON.
*     - Les arguments de type dates sur la ligne de commande peuvent avoir
*       jusqu'a 20 caracteres de long (I20) et sont lus dans des variables
*       de type INTEGER(8).
*     - La routine PDATE est utilisee pour generer une date imprimable.
*
*     Revision 4.13  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.12  2007/12/20 21:07:49  dugas
*     - Specifier explicitement le type de niveau vertical recherche.
*     - Support du format E10.0 pour les niveaux verticaux en arguments.
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.11  2003/10/02 16:21:12  dugas
*     Ajouter le support de donnees hemispheriques
*
*     Revision 4.10  2003/06/23 14:40:38  dugas
*     Ajouter des valeurs par defauts a nstep et lev (i.e. -1).
*     Corriger la lecture des parametres de ligne de commande.
*
*     Revision 4.9  2002/02/02 00:30:47  dugas
*     Forcer la majusculisation du parametre NAME
*
*     Revision 4.8  2001/03/16 22:07:02  armnrbd
*     Utiliser GETHIC/GETHIGH plutot que GETPARC/GETPARI.
*
*     Revision 4.7  1998/10/19 18:31:45  armnrbd
*     Modifier la documentation.
*     Appeller la fonction Y2KDAT.
*
*     Revision 4.6  1998/07/14  18:19:17  armnrbd
*     Agrandir le format de la date pour le mode automatique (bis).
*
*     Revision 4.5  1998/07/14  16:50:58  armnrbd
*     Agrandir le format de la date pour le mode automatique.
*
*     Revision 4.4  1998/05/21  20:20:58  armnrbd
*     Modifier la valeur par defaut de taille_entete
*
*     Revision 4.3  1998/02/18  16:53:26  armnrbd
*     Verifier les niveaux input avec CHKLVLC.
*
*     Revision 4.2  1998/01/16  19:35:23  armnrbd
*     Corriger la documentation.
*
*     Revision 4.1  1998/01/07  18:26:03  armnrbd
*     Implanter le support de RPBLOC.
*     Implanter un mode automatique.
*
*     Revision 4.0  1994/11/17  14:22:46  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:57:30  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.1  93/06/09  17:01:36  armnrbd
*     Premiere version UNIX qui fonctionne.
*     
*     Revision 1.0  93/06/09  12:13:32  armnrbd
*     Initial revision
*     
***    HISTORIQUES DES MODIFICATIONS:

*     SEP 21/89 - F.MAJAESS (MODIFIED TO HANDLE BOTH ZONAL AND MERIDIONA
*     NOV 06/85 - F.ZWIERS (CHANGE LABELS)
*     JAN 16/85 - B.DUGAS, R.LAPRISE, N.E.SARGENT. (CHANGE FMISS, ISIZ)
*
*---------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     HEAD
      PARAMETER ( HEAD = taille_entete )

      INTEGER*8   NSTEP
      LOGICAL     OK,ALL
      CHARACTER*20 CSTEP,CLEV,CKIND,LTEMPS,ETIKET*12
      CHARACTER   IFMTY*7,IFMTX*7,LABEL*80,LABELI*80
      CHARACTER*4 LATGL(7),LATGN(7),LATGS(7),
     +            LONGL(13),NAME,PNAME
      REAL        YLO,YLOI,YHI,YHII,RLVL,
     +            FMISS,XX,YY,YZ,X,YB,YE,DX,FINC,SCAL
      INTEGER     I,J,K,ICHARS,NFF,NPLOT,IO,MAXW,
     +            VKIND,STAMP,NPTS,LEVEL,NZMS,MS,ISIZ,
     +            IOR,MAJRX,MINRX,MAJRY,MINRY,L,HEM,
     +            IXLAB,IYLAB,IGPH,MAXS,IER,VKIND0,
     +            JBUF(HEAD),LENJ,NWDS,JPAK

      INTEGER,    DIMENSION(:), ALLOCATABLE :: BUF
      REAL,       DIMENSION(:), ALLOCATABLE :: G,Y
 
      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      LOGICAL     RPBLOC
      INTEGER*8   Y2KDAT8
      INTEGER     GETKIND,GETSIZ
      CHARACTER*4 GETHIC,GETYP,PKTYP,VALEUR*80
      EXTERNAL    RPBLOC,GETYP,JCLPNT,SYSDAT,DISPLA,GETLIGN,
     +            XIT,GETFLD2,SET,PWRIT,LABMOD,GRIDAL,LINE,
     +            BURNF,FRSTPT,VECTOR,FRAME,OPNSET,PRECON3,
     +            GETHIC,Y2KDAT8,GETKIND,GETSIZ,
     +            DATE2STAMP,PDATE

      DATA   LATGL / '90N','60','30', '0','30','60','90S' /
      DATA   LATGN / '90N','75','60','45','30','15','0'   /
      DATA   LATGS / '0'  ,'15','30','45','60','75','90S' /
      DATA   LONGL / '0','30','60','90','120','150','180',
     +               '210','240','270','300','330','360E' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/xplot.ptn,v $'

*-----------------------------------------------------------------------
      NFF = 3
      CALL JCLPNT( NFF, 1, 5,6 )

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

      MAXW = GETSIZ( 1, JBUF,LENJ,NWDS,JPAK )
      IF (MAXW.LE.0) CALL                      XIT(' Xplot  ',-101)

      MAXW = MAX( MAXW,9999 )

      VKIND0 = GETKIND( )
      VKIND  = VKIND0
      CKIND  = ' '

      ALLOCATE( BUF(HEAD+MAXW),G(MAXW),Y(MAXW) )

      CALL SYSDAT
      CALL DISPLA( 2,0,1 )
      CALL OPNSET( 'CASE',4,1 )

      ALL   =.FALSE.
      MAXS  = MAXW
      NPLOT = 0 

      FMISS  = -36.E36

 050  CONTINUE

      CSTEP = ' '
      CLEV  = ' '

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          NAME   ='ALL'
          YLOI   = 0.0
          YHII   = 0.0
          MS     =  0
          NZMS   =  0
          LABELI ='AUTOMATIC'

          ALL = RPBLOC('DEFAUT',VALEUR)

          OK = RPBLOC('T1',VALEUR)
          IF (OK) CSTEP = VALEUR

          OK = RPBLOC('NAME',VALEUR)
          IF (OK) NAME = VALEUR

          OK = RPBLOC('LV1',VALEUR)
          IF (OK) CLEV = VALEUR

          OK = RPBLOC('A',VALEUR)
          IF (OK) READ( VALEUR,15, END=900,ERR=900,IOSTAT=IO ) YLOI

          OK = RPBLOC('B',VALEUR)
          IF (OK) READ( VALEUR,15, END=900,ERR=900,IOSTAT=IO ) YHII

          OK = RPBLOC('C',VALEUR)
          IF (OK) READ( VALEUR,15, END=900,ERR=900,IOSTAT=IO ) FMISS

          OK = RPBLOC('KIND',VALEUR)
          IF (OK) READ( VALEUR,05, END=900,ERR=900,IOSTAT=IO ) NZMS

          OK = RPBLOC('KIND2',VALEUR)
          IF (OK) CKIND = VALEUR

          IF (CKIND.NE.' ')                                    THEN
              CALL SETKIND( CKIND )
              VKIND = GETKIND( )
          END IF

          OK = RPBLOC('LABEL',VALEUR)
          IF (OK) LABELI = VALEUR

      ELSE

***        READ THE CONTROL CARDS.
 
          CALL GETLIGN( 5, VALEUR,80, OK )

          IF (.NOT.OK)                                         THEN
              GOTO 900
          ELSE
              READ( VALEUR, 5010,END=900 ) 
     +        CSTEP,NAME,CLEV,YLOI,YHII,MS,FMISS,NZMS
          END IF
 
          IF(FMISS.EQ.0.0) FMISS=-36.E36

          CALL GETLIGN( 5, LABELI,80, OK )
          IF (.NOT.OK) GOTO 902

      END IF

      IF (CSTEP.EQ.' ') CSTEP = '-1'
      READ( CSTEP,20, END=900,ERR=900,IOSTAT=IO ) NSTEP

      NSTEP = Y2KDAT8( NSTEP ) ; CALL DATE2STAMP( NSTEP,STAMP )

      IF (CLEV .EQ.' ')                                        THEN
          CLEV   = '-1'
          LEVEL  =  -1
          VALEUR = CLEV
      ELSE
          IF (INDEX( CLEV,'.' ).EQ.0 .AND. CKIND.EQ.' ')       THEN
              READ( CLEV, 10, ERR=900,END=900,IOSTAT=IO ) LEVEL
              CALL CONVPR( LEVEL, RLVL, VKIND, -2 )
              IF (PKTYP.EQ.'SQ') CALL CONVPR( LEVEL, RLVL, VKIND, +2 )
          ELSE
              READ( CLEV, 15, ERR=900,END=900,IOSTAT=IO ) RLVL
              IF (PKTYP.EQ.'SQ')                               THEN
                  CALL CONVPR( LEVEL, RLVL, VKIND,  +2 )
              ELSE
                  CALL LVCODE( LEVEL, RLVL/1000.,1 ) 
              ENDIF
         ENDIF
      END IF

***    CONSIDER 'ALL' MODE.

      CALL LOW2UP( NAME,NAME )
      IF (NAME .NE.'    ') CALL LEADBLK( NAME )

      IF (NAME.EQ.'   '  .OR.
     +    NAME.EQ.'ALL')  ALL  = .TRUE.
      IF (NAME.EQ.'ALL'  .OR.
     +    NAME.EQ.'NEXT') NAME = ' '

  100 NPLOT = NPLOT+1

      
          IF (CLEV.NE.'-1') call get_ip1_string( LEVEL,VALEUR(1:12) )

          IF (YLOI.LT.YHII)                                    THEN
              WRITE(6,6100) NPLOT,TRIM( CSTEP ),NAME,VALEUR(1:12),YLOI,YHII,
     +                      FMISS,NZMS,LABELI
          ELSE
              WRITE(6,6101) NPLOT,TRIM( CSTEP ),NAME,VALEUR(1:12),
     +                      FMISS,NZMS,LABELI
          END IF

***        GET THE FIELD INTO G.
 
          CALL GETFLD2( 1, G, 'ZONL',STAMP,NAME,LEVEL, BUF,MAXS,OK )

          IF (.NOT.OK)                                         THEN
              WRITE(6,6010) NAME,TRIM( CSTEP ),VALEUR(1:12)
              CALL BURNF
              CALL                                  XIT('  Xplot ',-101)
          END IF
 
          CALL PRTLAB2(' Found: ', BUF )

          IF (BUF(6).NE.1)                                     THEN
              WRITE(6,6003)
              CALL                                  XIT('  Xplot ',-3 )
          END IF

***        CHECK FOR HEMISPHERIC DATA. 

          HEM = BUF(7)

          IF (HEM.LT.0 .OR. HEM.GT.2) HEM = 0

***        COPY IT INTO ARRAY Y (REVERSING ARRAY ELEMENTS FOR LATITUDES).
 
          NPTS = BUF(5)
          IF (NZMS.EQ.0)                                       THEN
              DO  J=1,NPTS
                  Y(J) = G(NPTS-J+1)
              END DO
          ELSE
              DO  J=1,NPTS
                  Y(J) = G(J)
              END DO
          END IF
 
          CALL SET(.01,.99,.01,.99,.01,.99,.01,.99,1)
          XX   = 0.05
          YY   = 0.9
          ISIZ = 1
          IOR  = 0
 
***        PRINT HEADING.

          LABEL = LABELI

          IF (ALL)                                             THEN

              CALL PDATE( LTEMPS,BUF(2) )
              CALL LEADBLK( LTEMPS )
              WRITE(PNAME,4) BUF(3)

              call get_ip1_string( buf(4),VALEUR(1:12) )
              call leadblk( VALEUR )

              IF (PKTYP.EQ.'SQ')                               THEN
                  ETIKET(1:4)  = GETHIC ( 'ETIK1',BUF )
                  ETIKET(5:8)  = GETHIC ( 'ETIK2',BUF )
                  ETIKET(9:12) = GETHIC ( 'ETIK3',BUF )
              ELSE
                  ETIKET   = ' '
              END IF

              DO  L=80,1,-1
                  IF (LABEL(L:L).NE.' ') GOTO 125
              END DO
  125         IF (L.LE.42)                                     THEN
                  WRITE(LABEL(L+1:L+46),40) NPLOT,PNAME
                  LABEL =      TRIM( LABEL  )//
     +                    ' '//TRIM( VALEUR )//
     +                    ' '//TRIM( LTEMPS )//
     +                    ' '//TRIM( ETIKET )
              END IF

          END IF

          CALL LOW2UP( LABEL,LABEL )

          CALL PWRIT( XX,YY,'@4'//LABEL,82,ISIZ,IOR,0 )
 
***        DRAW GRID OUTLINES.
 
          IF (YLOI.GE.YHII)                                    THEN

***            DETERMINE APPROPRIATE VALUES FOR YLO,YHI.

              CALL PRECON3( YLO,YHI,FINC,SCAL,Y,NPTS,1,10,FMISS )

              IF (YHI.NE.0.0) YHI = MAX( YHI,YLO+10.*FINC )
              IF (YLO.NE.0.0) YLO = YLO-FINC

              YLO = YLO/SCAL
              YHI = YHI/SCAL

              WRITE(6,6020) YLO,YHI

          ELSE

              YLO = YLOI
              YHI = YHII
              
          END IF

          CALL SET( .15,.85,.05,.85,.15,.85,YLO,YHI,1 )
 
          IF (NZMS.EQ.0)                                       THEN
              MAJRX = 6
          ELSE
              MAJRX = 12
          END IF

          MINRX =  2
          MAJRY = 10
          MINRY =  0
          IXLAB =  0
          IYLAB =  1
          IGPH  =  9
 
          IFMTY ='(E10.3)'
          IFMTX ='(E10.3)'
          CALL LABMOD( IFMTX,IFMTY,10,10,0,1,0,0,0 )
          CALL GRIDAL( MAJRX,MINRX,MAJRY,MINRY,
     +                 IXLAB,IYLAB,IGPH,.15,YLO )
 
***        DRAW ZERO LINE (IF NEEDED).
 
          IF (YLO*YHI.LT.0.0)                                  THEN

              YZ = 0.0
              CALL LINE( .15,YZ,.85,YZ )

              IF (NZMS.EQ.0)                                   THEN

                  DO  150 I=15,165,15
                      X  = FLOAT( I )*(.7/180)+.15
                      YB = YZ
                      YE = YZ+(YHI-YLO)*.01
                      CALL LINE( X,YB,X,YE )
  150             CONTINUE

              ELSE

                  DO  200 I=15,345,15
                      X  = FLOAT( I )*(.7/360)+.15
                      YB = YZ
                      YE = YZ+(YHI-YLO)*.01
                      CALL LINE( X,YB,X,YE )
  200             CONTINUE

              END IF

          ELSE

              YZ=YLO

          END IF
 
***        PLOT CURVE.
 
          DX = 0.7/FLOAT(NPTS+1)
          I  = 0
  250     I  = I+1
          IF (I.GT.NPTS) GOTO 350
          IF (Y(I).LE.FMISS) GOTO 250
              X = 0.15+FLOAT( I )*DX
              CALL FRSTPT( X,Y(I) )
              CALL VECTOR( X,Y(I) )
  300         I = I+1
              IF (I.GT.NPTS) GOTO 350
              IF (Y(I).LE.FMISS) GOTO 250
                  X = 0.15+FLOAT( I )*DX
                  CALL VECTOR( X,Y(I) )
              GOTO 300
  350     CONTINUE
 
***        LABEL X-AXIS.
 
          CALL SET( .01,.99,.01,.99,.01,.99,.01,.99,1 )
 
          IF (NZMS.EQ.0)                                       THEN

              DO  400 K=1,7

                                        ICHARS = 2
                  IF (K.EQ.1.OR.K.EQ.7) ICHARS = 3

                  X = FLOAT( K-1 )*(.7/6.)+.14

                  IF (HEM.EQ.0)                                 THEN
                      IF (K.EQ.4) ICHARS = 1
                      CALL PWRIT( X,.035,'@4'//LATGL(K),ICHARS+2,1,0,0 )
                  ELSE IF (HEM.EQ.1)                            THEN
                      IF (K.EQ.7) ICHARS = 1
                      CALL PWRIT( X,.035,'@4'//LATGN(K),ICHARS+2,1,0,0 )
                  ELSE IF (HEM.EQ.2)                            THEN
                      IF (K.EQ.1) ICHARS = 1
                      CALL PWRIT( X,.035,'@4'//LATGS(K),ICHARS+2,1,0,0 )
                  END IF

  400         CONTINUE

          ELSE

              DO  450 K=1,13

                                         ICHARS = 3
                  IF (K.EQ.1)            ICHARS = 1
                  IF (K.GE.2.AND.K.LE.4) ICHARS = 2
                  IF (K.EQ.13)           ICHARS = 4

                  X = FLOAT( K-1 )*(.7/12.)+.14
                  CALL PWRIT( X,.035,'@4'//LONGL(K),ICHARS+2,1,0,0 )

  450         CONTINUE

          END IF
 
***        PRINT X IN UPPER RIGHT HAND CORNER AND FINISH PLOT.
 
          CALL PWRIT(.97,.97,'@4X',3,0,0,0)
          CALL FRAME

      IF (ALL)                                                 THEN
          GOTO 100
      ELSE
          GOTO 050
      END IF
 
***    E.O.F. ON INPUT.
 
  900 IF (NPLOT.EQ.0) CALL                         XIT('  Xplot ',-1 )
      CALL                                         XIT('  Xplot ', 0 )
  902 CALL                                         XIT('  Xplot ',-2 )
*-----------------------------------------------------------------------

 0004 FORMAT(A4)
 0005 FORMAT(BN,I5)
 0010 FORMAT(BN,I10)
 0015 FORMAT(BN,E10.0)
 0020 FORMAT(BN,I20)
 0040 FORMAT(1X,I3.3,1X,A4)

 5010 FORMAT(10X,A10,1X,A4,A5,2E10.0,I5,E10.0,I5)
 6003 FORMAT(' Xplot cannot treat multi-level zonal records.'/)
 6010 FORMAT(' Unable to find-',A4,' at timestep-',A,' and level-',A)
 6020 FORMAT(' YLO= ',G12.4,', YHI= ',G12.4)
 6100 FORMAT(/' For plot no. ',I3,', requesting...'//
     +  '       NSTEP NAME        LEVL        YLO        YHI     ',
     +        ' FMISS NZMS'/ A,1X,A4, A, 3E11.4, I5 /
     +    '     and LABEL = "',A80,'"'/)
 6101 FORMAT(/' For plot no. ',I3,', requesting...'//
     +  '       NSTEP NAME        LEVL      FMISS NZMS'/
     +            A,1X,A4,  A, E11.4, I5  /
     +    '     and LABEL = "',A80,'"'/)

      END
#     endif
