#     if !defined (grille_maximale)
#         define   grille_maximale 200000
#     endif
#     if !defined (memoire_maximale)
#         define   memoire_maximale 10000000
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      tsafc  TSER FCOEFS INPUT OUTPUT [-lon VAL1]
*
* 
*     AUTHORS  - F. ZWIERS AND B. DUGAS, AUG 15/85.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/tsafc.ptn,v 4.10 2014/09/25 20:20:55 dugas Exp $
*
* 
*     PURPOSE  - COMPUTE FINITE FFT'S OF TIME SERIES. 
*
*     NOTE     - THE LONGEST TIME SERIES THAT CAN BE PROCESSED HAS 
                 grille_maximale POINTS. 
* 
*
*     INPUT FILE... 
*      TSER   = FILE OF TIME SERIES WITH PROPER TIME SERIES LABELS. 
* 
*     OUTPUT FILE... 
*      FCOEFS = CONTAINS THE TSER TIME SERIES FINITE FOURIER TRANSFORMS. 
*               THE RECORDS IN FCOEFS FILE HAVE LABEL: 
* 
*                 IBUF(1) = 'FOUR' IF INPUT = 'ZONL' OR 'GRID', 'SPEC'
*                           IF INPUT = 'COEF'. 'CMPL' IS NOT CHANGED
*                 IBUF(2) = ORDINAL OF LOCATION OF REAL OR COMPLEX
*                           POINT IN ORIGINAL LATLON ARRAY IF 
*                           KIND = 'ZONL', 'CMPL' OR 'GRID', 
*                         = LOCATION OF COEFFICIENT IN THE REAL LA*2 
*                           LENGTH VECTOR IF KIND = 'COEF' . 
*                 IBUF(3) = NAME 
*                 IBUF(4) = LEVEL 
*                 IBUF(5) = FOR ALL EXCEPT 'CMPL', LENGTH/2 + 1 WHERE
*                           LENGTH IS THE LENGTH OF THE TRANSFORMED TIME
*                           SERIES. 
*                         = FOR THE COMPLEX 'CMPL', LENGTH ITSELF.
*                 IBUF(6) = 1 
*                 IBUF(7) = DIMENSIONS OF ARRAY KHEM (IN FORMAT CCCRRRK,
*                           WHERE CCC IS THE NUMBER OF LONGITUDES AND RRR
*                           IS THE NUMBER OF LATITUDES,  OR  LRLMT)
*                 IBUF(8) = PACKING DENSITY 
* 
*
*     INPUT PARAMETER... 
* 
*      LENGTH = THE ACTUAL LENGTH USED IN THE TRANSFORM. THIS NUMBER 
*      (lon)    IS EVEN. THE REST (IF ANY) OF THE SERIES IS DISCARDED... 
* 
* 
*      READ(5,5000) LENGTH
*5000  FORMAT(10X,I5)
*
*
*     EXAMPLE OF INPUT CARD... 
* 
* TSAFC    9732 
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*      0 NO PROBLEMS
*      1 ILLEGAL (NEGATIVE) LENGTH SPECIFIED
*      2 ILLEGAL DATA TYPE FOUND AT START OF TSER
*      3 TSER TIME SERIES TOO LONG
*      4 ILLEGAL DATA TYPE FOUND IN TSER
*      5 MORE THAN ONE SIZE IN TSER
*      6 PREMATURE END OF FILER ON INPUT
*      7 PREMATURE END OF FILER ON TSER
*      8 UNABLE TO ALLOCATE WORKING MEMORY
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM TSAFC 
*     PROGRAM TSAFC (TSER,       FCOEFS,       INPUT,       OUTPUT, 
*    1       C TAPE1=TSER, TAPE2=FCOEFS, TAPE5=INPUT, TAPE6=OUTPUT) 
*     ------------------------------------------------------------- 

*     $Log: tsafc.ptn,v $
*     Revision 4.10  2014/09/25 20:20:55  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.9  2010/03/21 23:11:41  dugas
*     Allocation de memoire ALLOCATE plutot que HPALLOC.
*
*     Revision 4.8  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.7  2007/12/20 21:17:51  dugas
*     Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.6  2006/07/04 19:11:16  dugas
*     Enlever la premiere definition de taille_entete.
*
*     Revision 4.5  1999/05/07 00:39:20  armnrbd
*     Version compatible avec les fichiers standards RPN.
*
*     Revision 4.4  1998/07/03  02:26:44  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1998/05/21  20:20:56  armnrbd
*     Modifier la valeur par defaut de taille_entete
*
*     Revision 4.2  1996/01/26  21:36:08  armnrbd
*     Corriger une erreur lorsque l'on veut racourcir la transformee.
*     Utiliser la transformation de Stockham plutot que de Temperton.
*
*     Revision 4.1  1995/07/03  19:11:04  armnrbd
*     Corriger le mauvais usage de NSET et NS dans la boucle principale.
*
*     Revision 4.0  1994/11/17  14:22:14  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:57:19  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.1  93/08/19  15:20:28  15:20:28  armnrbd (Bernard Dugas)
*     Modifications cosmetiques.
*     
*     Revision 1.0  93/02/18  12:54:01  armnrbd
*     Initial revision
*      
*     APR 28/89 - B.DUGAS. (CORRECT THE OUTPUT NUMBER OF RECORDS PROCESS 
*     AUG 15/85 - F. ZWIERS, B.DUGAS. 

*----------------------------------------------------------------------- 
      IMPLICIT    none

      INTEGER     HEAD
      PARAMETER ( HEAD = taille_entete )

***    MAXL   = LONGEST TIME SERIES THAT CAN BE PROCESSED 
***    MAXW   = IS LENGTH OF INPUT/OUTPUT BUFFER -- MUST BE AT LEAST 
***             MAXL+2 
***    MAXMEM = IS LENGTH OF MEMORY AVAILABLE FOR STORING TIME SERIES 
***    MAXS   = MAXIMUM NUMBER OF TIME SERIES WHICH CAN BE PROCESSED IN 
***             ONE BLOCK -- NOTE THAT IX MUST BE DIMENSIONED MAXS*HEAD

      INTEGER     MAXW
      PARAMETER ( MAXW = grille_maximale )
      INTEGER     MAXMEM
      PARAMETER ( MAXMEM = memoire_maximale )
      INTEGER     MAXS
      PARAMETER ( MAXS = 256 )
      INTEGER     MAXL
      PARAMETER ( MAXL = MAXW-2 )

      REAL        C
      CHARACTER   LIGNE*80
      LOGICAL     OK,RPBLOC
      CHARACTER*4 TYPE,COUT,FFT,PKTYP
      INTEGER     ADD,BASE,NF,LENGTH,LEN,LENB2P1,
     +            JUMP,FLEN,NSET,KIND,NOUT,NBLOCK,MEM,
     +            I,J,N,IO,NS,IER,CMPL,NBW

      POINTER   ( XP,C(2,1) )

      REAL,       ALLOCATABLE, DIMENSION(:) :: X
      INTEGER,    ALLOCATABLE, DIMENSION(:) :: IX,IBUF

#     include    "machtype.cdk"

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      CHARACTER   GETYP*4
      EXTERNAL    GETYP,JCLPNT,RPBLOC,GETLIGN,BURNF,XIT,GETBUF2,
     +            GETFLD2,VFFT2,PUTFLD2,CSFFT,PUTHIC

      DATA        FFT  / 'STOC' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/tsafc.ptn,v $'

*---------------------------------------------------------------------
      ALLOCATE( IBUF(HEAD+MAXW),IX(HEAD*MAXS) )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 4 
      CALL JCLPNT( NF, 1,2, 5,6 )
 
***    VERIFIER LA TAILLE DES MOTS.
 
      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

      NBW = 32

      IF ((MACHINE.EQ.2 .AND. PKTYP.EQ.'  ') .OR.
     +     MACHINE.EQ.1)
     +     NBW = 64

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

***        CHECK PARAMETRE BLOCK.

          LENGTH = 0

          OK = RPBLOC('LON',LIGNE)  
          IF (OK) READ(LIGNE,'(BN,I10)',ERR=9000,END=9000,IOSTAT=IO) 
     +                                  LENGTH

      ELSE

***        READ UNIT 5 FOR LENGTH. 
 
          CALL GETLIGN( 5, LIGNE, 80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 9000
          ELSE
              READ( LIGNE, 5000,ERR=9000,END=9000,IOSTAT=IO ) LENGTH
              CALL BURNF
          END IF

      END IF
      
      IF (LENGTH.LT.0)                                         THEN 
          WRITE(6,6005) LENGTH 
          CALL                                     XIT('  Tsafc ',-1 ) 
      END IF 
 
***    GET LABEL OF THE FIRST RECORD 
 
      CALL GETBUF2( -1, IBUF,HEAD,OK )
      IF (.NOT.OK) GOTO 9010
      CALL PRTLAB( IBUF )

      KIND = IBUF(1)
      WRITE(TYPE,0004) KIND

      IF (IBUF(6).NE. 1    .OR. 
     +   (TYPE   .NE.'GRID'.AND. 
     +    TYPE   .NE.'ZONL'.AND. 
     +    TYPE   .NE.'COEF'.AND. 
     +    TYPE   .NE.'CMPL'.AND.
     +    TYPE   .NE.'SUBA')   )                               THEN 
          WRITE(6,6030) 
          CALL                                     XIT('  Tsafc ',-2 ) 
      END IF 
 
***    WHAT IS THE VALUE OF KIND FOR THE OUTPUT SERIES ? 
 
      IF (TYPE   .EQ.'COEF')                                   THEN 
          COUT = 'SPEC'
          CMPL =  1
      ELSE IF (TYPE .EQ.'CMPL')                                THEN 
          COUT = 'CMPL'
          CMPL =  2
      ELSE IF (TYPE .EQ.'SUBA')                                THEN
          COUT = 'SUBA'
          CMPL =  1
      ELSE 
          COUT = 'FOUR'
          CMPL =  1
      END IF 

      READ(COUT,0004) NOUT
 
      LEN = IBUF(5) 
      IF (LENGTH.EQ.0 .OR. LEN.LT.LENGTH)                      THEN 
          LENGTH = LEN 
          WRITE(6,6035) LENGTH 
      END IF 
 
***    TIME SERIES SHOULD BE OF EVEN LENGTH, SO 
***    DROP ONE OBSERVATION IF THE LENGTH IS ODD. 
 
      IF (MOD(LENGTH,2).NE.0) LENGTH = LENGTH-1 
 
      IF (LENGTH.GT.MAXL)                                      THEN 
          WRITE(6,6040) 
          CALL                                     XIT('  Tsafc ',-3 ) 
      END IF 
 
      JUMP    = LENGTH+2 
      LENB2P1 = LENGTH/2 + 1 
      FLEN    = 1.0/FLOAT( LENGTH ) 
      NSET    = 0
 
***    TIME SERIES WILL BE PROCESSED IN GROUPS OF NBLOCK AT ONE 
***    TIME TO TAKE ADVANTAGE OF THE VECTORIZATION OF THE FFT. 
 
      NBLOCK = MIN( (MAXMEM-LEN*CMPL)/(JUMP*CMPL)+1, MAXS ) 
      MEM    = NBLOCK*JUMP*CMPL+LEN

      ALLOCATE( X(MEM),STAT=IER )
      IF (IER /= 0) CALL                           XIT('  Tsafc ',-8 )

      XP = LOC( X(1) )
*----------------------------------------------------------------------- 
 
***    MAIN EVENT LOOP 
 
 1000 CONTINUE
 
***        LOAD A BLOCK OF TIME SERIES 
 
          NS = 0
          DO 1050 N=1,NBLOCK 

              ADD = (N-1)*JUMP + 1 

              IF (CMPL.EQ.1)                                   THEN
             CALL GETFLD2( 1, X(  ADD),  TYPE ,-1,' ',-1, IBUF,MAXW,OK )
              ELSE
             CALL GETFLD2( 1, C(1,ADD), 'CMPL',-1,' ',-1, IBUF,MAXW,OK ) 
              END IF

              IF (.NOT.OK) GOTO 1100 
 
              NS  = NS+1

              WRITE(TYPE,0004) IBUF(1)

              IF (IBUF(6).NE.1)                                THEN 
                  WRITE(6,6050) NSET*NBLOCK + N 
                  CALL PRTLAB( IBUF )
                  WRITE(6,6060) 
                  CALL                             XIT('  Tsafc ',-4 ) 
              END IF 
 
              IF (IBUF(5).NE.LEN)                              THEN 
                  WRITE(6,6050) NSET*NBLOCK + N 
                  CALL PRTLAB( IBUF )
                  WRITE(6,6070) 
                  CALL                             XIT('  Tsafc ',-5 ) 
              END IF 
 
              BASE=(N-1)*HEAD
              DO  J=1,HEAD
                  IX(BASE+J) = IBUF(J)
              END DO

              IF (PKTYP.EQ.'SQ')                               THEN
                  IF (TYPE.EQ.'ZONL' .OR. TYPE.EQ.'GRID')      THEN
                      CALL PUTHIC( '@','GRTYP',IX(BASE) )
                  ELSE IF (TYPE.EQ.'SPEC')                     THEN
                      CALL PUTHIC( '&','GRTYP',IX(BASE) )
                  END IF
              END IF

 1050     CONTINUE 
 
***        PROCESS THIS BLOCK OF TIME SERIES -- THE 
***        CURRENT BLOCK CONTAINS NS TIME SERIES. 
 
 1100     IF (NS.EQ.0) GOTO 2000 
 
***        PAD THE END OF EACH SERIES WITH TWO ZEROS BECAUSE 
***        THE FFT IS RETURNED IN THE SAME SPACE AND IS TWO 
***        WORDS LONGER THAN THE INPUT TIME SERIES. 
 
          IF (CMPL.EQ.1)                                       THEN
              DO  I=LENGTH+1,NS*JUMP-1,JUMP 
                  X(I)   = 0.0 
                  X(I+1) = 0.0 
              END DO
          ELSE
              DO  I=LENGTH+1,NS*JUMP-1,JUMP 
                  C(1,I)   = 0.0 
                  C(2,I)   = 0.0 
                  C(1,I+1) = 0.0 
                  C(2,I+1) = 0.0 
              END DO
          END IF
 
***       FFT THE BLOCK 
 
          IF (CMPL.EQ.1)                                       THEN
              CALL VFFT2( X, 1,JUMP,LENGTH,NS,-1, FFT,IER ) 
          ELSE
              CALL CSFFT( C, JUMP,LENGTH,NS, -1 )
          END IF

***        OUTPUT THE BLOCK 

          DO  I=1,HEAD
              IBUF(I) = IX(I)
          END DO

                              IBUF(1) = NOUT 
                              IBUF(5) = LENGTH
          IF (COUT.NE.'CMPL') IBUF(5) = LENB2P1 
          IF (COUT.EQ.'SUBA') IBUF(5) = IBUF(5)*2
          IF (COUT.EQ.'SPEC') IBUF(8) = -NBW

          DO 1200 N=1,NS 

              BASE = (N-1)*HEAD
              DO  I=2,4 
                              IBUF(I) = IX(BASE+I) 
              END DO

              ADD = (N-1)*JUMP+1 
              IF (CMPL.EQ.1)                                   THEN
                  CALL PUTFLD2( 2, X(  ADD), IBUF,MAXW ) 
              ELSE
                  CALL PUTFLD2( 2, C(1,ADD), IBUF,MAXW ) 
              END IF

 1200     CONTINUE 

      IF (NS.EQ.NBLOCK)                                        THEN
          NSET = NSET+1 
          GOTO 1000 
      END IF
*----------------------------------------------------------------------- 
 
 2000 CONTINUE 
 
***    ALL DONE. 
 
      IF (NS.EQ.0)                                             THEN
          BASE        = (NBLOCK-1)*HEAD
      ELSE
          BASE        = (NS    -1)*HEAD
      END IF

      IX(BASE+1)      =  NOUT 

                          IX(BASE+5) = LENGTH
      IF (COUT.NE.'CMPL') IX(BASE+5) = LENB2P1
      IF (COUT.EQ.'SUBA') IX(BASE+5) = IX(BASE+5)

      IF (COUT.EQ.'SPEC')
     +    IX(BASE+8)  = -NBW

      CALL PRTLAB( IX(BASE+1) )
      WRITE(6,6080) NSET*NBLOCK+NS 

      CALL                                         XIT('  Tsafc ', 0 ) 
 
***    PREMATURE EOF ON UNIT 1. 
 
 9000 WRITE(6,6000) 
      CALL                                         XIT('  Tsafc ',-6 ) 
 
***    PREMATURE EOF ON UNIT 1. 
 
 9010 WRITE(6,6010) 
      CALL                                         XIT('  Tsafc ',-7 ) 
*----------------------------------------------------------------------- 
 0004 FORMAT(A4)
 5000 FORMAT(10X,I5) 

 6000 FORMAT('0Input file is empty.') 
 6005 FORMAT('0Length value is ',I6) 
 6010 FORMAT('0Input file of time series is empty.') 
 6030 FORMAT('0First record in input file of time series', 
     +       ' does not have a time series label.') 
 6035 FORMAT('0Length set to ibuf(5) =',I5) 
 6040 FORMAT('0A time series in the input file is too long.') 
 6050 FORMAT('0Label for record ',I5,':') 
 6060 FORMAT(11X,'is not a time series label.') 
 6070 FORMAT('0Change of length detected in the input time series.') 
 6080 FORMAT('0Processed ',I10,' records.') 

      END 
#     endif
