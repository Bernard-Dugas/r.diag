#     if !defined (nombre_de_rapports)
#         define   nombre_de_rapports 100000
#     endif
#     if !defined (memoire_maximale)
#         define   memoire_maximale 1000000000
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      tmmult  A B C OUTPUT
*
*
*     AUTHOR - B.Dugas, OCTOBRE 13/88.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/tmmult.ptn,v 4.12 2014/09/25 20:20:55 dugas Exp $
*
*
*     DESCRIPTION...                                                t
*      Tmmult multiplie deux matrices A et B de telle sorte que  C=A *B. 
*      Les matrices sont entreposees selon leur colonnes. Il faut donc
*      que le nombre d'elements dans chaque enregistrements de  A et B
*      soit egal (i.e. le nombre de colonnes dans la transposee de A
*      est egal au nombre de lignes dans B). Ce programme peut etre
*      utile dans un calcul de type co-variance puisqu'il evite alors
*      une etape de transposition.
*
*      Notes: 1) A et B peuvent contenir plus d'une variable et/ou plus
*                d'un niveau vertical. Une colonne debute par un changement
*                de pas-de-temps. Les pas de temps de B sont utilises dans C. 
*             2) Le nombre maximal de colonnes (pas de temps) dans B est fixe
                 a nombre_de_rapports.
*             3) Les donnees de A ou B doivent etre du meme type, soit
*                complexe, soit reelles.
*             4) Si les donnees sont complexes, on utilise la transposee 
*                conjugee complexe de a dans le produit.
*     
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 UNABLE TO READ FIRST SET IN FILE A OR FILE B
*       2 SPECTRAL/COEFFICIENT DATA TYPE NOT SUPPORTED
*       3 A,B CONTAIN A MIX OF COMPLEX AND REAL DATA
*       4 COLUMNS IN A-TRANSPOSE IS NOT EQUAL TO ROWS IN B
*       5 NO ENOUGH MEMORY
*       6 PREMATURE EOF IN B
*       7 MORE THAN ONE SIZE IN B
*       8 PREMATURE EOF IN A
*       9 MORE THAN ONE SIZE IN A
*      10 NO ENOUGH RECORDS IN FILE A
*      11 NO ENOUGH RECORDS IN FILE B
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM tmmult 
*    1             (      A,       B,       C,       OUTPUT, 
*    2              TAPE1=A, TAPE2=B, TAPE3=C, TAPE6=OUTPUT) 

*     $Log: tmmult.ptn,v $
*     Revision 4.12  2014/09/25 20:20:55  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.11  2012/08/29 15:51:34  dugas
*      - Declarations de variables 'a la' F90.
*      - Allocations dynamiques via ALLOCATE plutot que HPALLOC.
*      - Mise-a-jour du traitement des series temporelles pour les grilles GEM.
*
*     Revision 4.10  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.9  2007/12/20 21:17:51  dugas
*     Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.8  2005/04/14 18:19:48  dugas
*     Assurer la coherence des donnees a l'entree avec CMPLBL.
*
*     Revision 4.7  2003/05/23 21:13:05  dugas
*     Ajouter le support de IO64B
*
*     Revision 4.6  1999/04/28 21:00:24  armnrbd
*     Modifier les formats d'impressions de messages.
*
*     Revision 4.5  1998/07/03 02:26:43  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.4  1998/05/21  20:20:56  armnrbd
*     Modifier la valeur par defaut de taille_entete
*
*     Revision 4.3  1997/10/28  15:59:26  armnrbd
*     Dimensionner IERR avec le parametre HEAD.
*
*     Revision 4.2  1996/06/28  20:52:34  armnrbd
*     Traiter le plus possible de colonnes de A a la fois.
*
*     Revision 4.1  1996/06/17  18:06:24  armnrbd
*     Ajouter le support des fichiers CMPL.
*
*     Revision 4.0  1994/11/17  14:22:12  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.3  94/10/03  16:33:29  16:33:29  armnrbd (Bernard Dugas)
*     Utiliser les pas de temps de B dans les colonnes de C.
*     
*     Revision 3.2  94/08/16  21:18:29  21:18:29  armnrbd (Bernard Dugas)
*     Conserver les premiers JBUF et KBUF lus par GETSIZ3.
*     
*     Revision 3.1  94/04/05  21:42:09  21:42:09  armnrbd (Bernard Dugas)
*     Premiere version fonctionnelle.
*     
*     Revision 3.0  94/04/04  21:59:16  armnrbd
*     Initial UNIX version.
*     
*      
***   Premiere version: 04 avril 1994 - B. Dugas. 
 
*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER, PARAMETER :: HEAD   = taille_entete
      INTEGER, PARAMETER :: MAXCOL = nombre_de_rapports
      INTEGER, PARAMETER :: MAXLEV = 999
      INTEGER, PARAMETER :: MAXMEM = memoire_maximale
      INTEGER, PARAMETER :: MAXVAR = 256

      CHARACTER*2 PKTYP
      REAL*8      CL,FR,FI
      LOGICAL     OK,FULL,ERR
      CHARACTER*4 TYPE,TYPEO,
     +            VARIAB0(MAXVAR),VARIAB1(MAXVAR),VARIAB2(MAXVAR)
      INTEGER     JBUF(HEAD),KBUF(HEAD),NWDS,NWDS2,JPAK,KPAK,
     +            LEN,LEN2,M,M1,NF,ILG,ILAT,KHEM,COL,I,J,K,L,N,
     +            WHEREA,WHEREB,IERR(HEAD),TIME,NV,MAXL,MAXW,
     +            MAXW1,MAXW2,NVAR1,NVAR2,NLEV,NLEV1,NLEV2,LIGNES,
     +            LEV(MAXLEV),LEV0(MAXLEV),LEV1(MAXLEV),LEV2(MAXLEV),
     +            JB,NROWS,NCOLS,TIMEB(MAXCOL+1),CMPL,IPAK,NPAS,
     +            NPAS0,NPASB(MAXCOL+1),IL,NVAR0,NLEV0,NLV0,
     +            NAME,NIV0,DEET

      REAL(8),    ALLOCATABLE,DIMENSION(:)   :: A,B,C
      REAL(8),    ALLOCATABLE,DIMENSION(:,:) :: D,E,F
      INTEGER,    ALLOCATABLE,DIMENSION(:)   :: IBUF
 
      LOGICAL,    EXTERNAL :: SETIO64
      INTEGER,    EXTERNAL :: GETSIZ3,GETHIGH
      CHARACTER*4,EXTERNAL :: GETYP
      EXTERNAL    SUIVANT,PRECEDE,JCLPNT,
     +            XIT,GETFLD2,PUTMSET
     +            WRITLEV2,CMPLBL

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        CMPL / 1 /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/tmmult.ptn,v $'

*---------------------------------------------------------------------
***    PHASE PREPARATOIRE. 
 
      NF = 4 
      CALL JCLPNT( NF, 1,2,3, 6 )

      PKTYP = GETYP( 1 )
      OK = SETIO64(.TRUE.)

***    DETERMINER LA TAILLE DES
***    COLONNES DES DEUX MATRICES.

      MAXW1 = GETSIZ3( 1, JBUF, LEN,NWDS,JPAK, .FALSE.,
     +                    LEV1,NLEV1, VARIAB1,NVAR1, MAXVAR )

      MAXW2 = GETSIZ3( 2, KBUF, LEN2,NWDS2,KPAK, .FALSE.,
     +                    LEV2,NLEV2, VARIAB2,NVAR2, MAXVAR )

      IF (MAXW1 .LE. 0 .OR.
     +    MAXW2 .LE. 0) CALL                       XIT(' Tmmult ',-1 )

      IPAK = MAX( JPAK,KPAK )

      WRITE(TYPE,4) JBUF(1)

      IF (TYPE.EQ.'ZONL') NWDS  = JBUF(5)
      IF (TYPE.EQ.'CMPL' .OR.
     +    TYPE.EQ.'FOUR') CMPL  = 2

***    SAUVER TYPE POUR LA SORTIE.

      TYPEO = TYPE

      NV = NVAR1*NLEV1
      M  = NV*NWDS/CMPL

      WRITE(TYPE,4) KBUF(1)

      IF (TYPE .EQ.'COEF' .OR. 
     +    TYPE .EQ.'SPEC' .OR.
     +    TYPEO.EQ.'SPEC' .OR.
     +    TYPEO.EQ.'COEF') CALL                    XIT(' Tmmult ',-2 )

      IF ((CMPL.EQ.2 .AND. (TYPE.NE.'CMPL' .AND. TYPE.NE.'FOUR')) .OR.
     +    (CMPL.EQ.1 .AND. (TYPE.EQ.'CMPL' .OR.  TYPE.EQ.'FOUR')) )
     +    CALL                                     XIT(' Tmmult ',-3 )

      IF (TYPE.EQ.'ZONL')  NWDS2 = KBUF(5)

      M1 = NVAR2*NLEV2*NWDS2/CMPL

***    LIRE TOUS LES ENREGISTREMENTS DE UNIT#2 POUR VERIFIER
***    QUE LE PROBLEME MATRICIEL EST BIEN POSE. CONSERVER LES
***    KBUF(2) POUR LA SORTIE.

      DO  K=1,HEAD
          IERR(K) = KBUF(K)
      END DO

      IF (PKTYP.EQ.'SQ') DEET = GETHIGH('DEET',KBUF )

      COL  =  0 
      NPAS0 = -1
      NPAS  = -1
      TIME = -1
  050 CALL SUIVANT( 2, KBUF, ERR,OK )

          IF (.NOT.OK ) GOTO 100
          IF (     ERR) GOTO 9911

***        S'ASSURER DE LA CONSISTANCE DES DIMENSIONS DE B.

          CALL CMPLBL( 0,KBUF, 0,IERR, OK )
          IF (.NOT.OK)                                         THEN
              WRITE(6,6007) ; CALL PRTLAB2(' Last   IBUF : ', KBUF )
                              CALL PRTLAB2(' First  IBUF : ', IERR )
              CALL                                 XIT(' Tmmult ',-7 )
          END IF

          IF (PKTYP == 'SQ') NPAS0 = GETHIGH('NPAS',KBUF )

          IF ((KBUF(2) /= TIME .OR. NPAS /= NPAS0) .AND.
     +        COL     .LT.MAXCOL   )                           THEN

              COL        = COL+1 
              TIME       = KBUF(2)
              TIMEB(COL) = TIME

              NPAS       = NPAS0
              NPASB(COL) = NPAS

          END IF

      GOTO 050 
 
  100 IF (COL.EQ.0) GOTO 9911
      CALL PRECEDE( 2,-1 )
 
      DO  K=1,HEAD
          KBUF(K) = IERR(K)
      END DO

***    LIRE UNIT#1 POUR DETERMINER LE
***    NOMBRE DE LIGNES DANS LA MATRICE C.
 
      DO  J=1,HEAD
          IERR(J) = JBUF(J)
      END DO

      NVAR0 = 1
      NLEV0 = 1
      NLV0  = 1

      NAME  = JBUF(3)
      NIV0  = JBUF(4)
      KHEM  = JBUF(7)

      WRITE(VARIAB0(NVAR0),4) NAME
      LEV0(NLV0) = NIV0

CCC   print *,NVAR0,' ',VARIAB0(NVAR0),' ',NLEV0,' ',NIV0

      TIME   = -1
      LIGNES =  0 
  150 CALL SUIVANT( 1, JBUF, ERR,OK )

          IF (.NOT.OK ) GOTO 200
          IF (     ERR) GOTO 9910

***        S'ASSURER DE LA CONSISTANCE DES DIMENSIONS DE A.

          CALL CMPLBL( 0,JBUF, 0,IERR, OK )
          IF (.NOT.OK)                                         THEN
              WRITE(6,6007) ; CALL PRTLAB2(' Last  IBUF : ', JBUF )
                              CALL PRTLAB2(' First IBUF : ', IERR )
              CALL                                 XIT(' Tmmult ',-9 )
          END IF

          IF (KHEM.GT. 10     .AND.
     +       (NAME.NE.JBUF(3) .OR.
     +        NIV0.NE.JBUF(4) ))                               THEN

***            TROUVER TOUTES LES VARIABLES ET
***            NIVEAUX DE CETTE SERIE TEMPORELLE.

              IF (NAME.NE.JBUF(3))                             THEN
                  NLV0  = 1
                  NVAR0 = NVAR0+1
              ELSE
                 IF (NVAR0.EQ.1)
     +           NLEV0 = NLEV0+1
                 NLV0  = NLV0+1
              END IF

              NAME = JBUF(3)
              NIV0 = JBUF(4)

              WRITE(VARIAB0(NVAR0),4) NAME

              IF (NVAR0.NE.1)                                  THEN
                  IF (NIV0.NE.LEV0(NLV0)) KHEM  = 0
              ELSE
                  LEV0(NLEV0) = NIV0
              END IF

CCC           print *,NVAR0,' ',VARIAB0(NVAR0),' ',NLEV0,' ',NIV0
              
          END IF

          IF (TIME.NE. JBUF(2))                                THEN
              TIME   = JBUF(2)
              LIGNES = LIGNES + 1
          END IF

      GOTO 150 

  200 IF (M1.EQ.0) GOTO 9910
      CALL PRECEDE( 1,-1 )

      DO  J=1,HEAD
          JBUF(J) = IERR(J)
      END DO

      ILG     = JBUF(5) 
      ILAT    = JBUF(6) 

      IF (M1 .NE. M)                                           THEN 
          WRITE(6,6004) M1,M
          CALL                                     XIT(' Tmmult ',-4 ) 
      END IF 

***    TENTER DE RECONSTRUIRE LES DIMENSIONS DE LA
***    MATRICE TRANSPPOSEE A L'AIDE DE JBUF(7).

      IF (KHEM.GT.10)                                          THEN
          JB    = JBUF(7)
          NCOLS = JB/10000
          NROWS = (JB-NCOLS*10000)/10
CCC       print *,NCOLS,NROWS,NLEV0,NVAR0,LIGNES
          IF (NCOLS*NROWS*NLEV0*NVAR0.NE.LIGNES)               THEN
              NCOLS = LIGNES
              NROWS = 1
          END IF
          KHEM  = MOD( JBUF(7),10 )
      ELSE
          NCOLS = LIGNES
          NROWS = 1
          KHEM  = (ILG*1000+ILAT)*10+JBUF(7)
      END IF

      LEN  = MAX( LEN,LEN2 )
      MAXW = LEN-HEAD
 
***    DETERMINONS LE NOMBRE MAXIMAL DE LIGNES QUI PEUVENT
***    ETRE LUES A LA FOIS, SELON LA MEMOIRE MAXIMALE QUE L'ON A.

      MAXL = MIN( LIGNES,( (MAXMEM - LEN)/CMPL - M - LIGNES )/M )

      IF (MAXL.EQ.LIGNES)                                      THEN 
          FULL = .TRUE. 
      ELSE IF (MAXL.GT.0)                                      THEN
          FULL = .FALSE. 
      ELSE
          WRITE(6,6005) MAXMEM,M
          CALL                                     XIT(' Tmmult ',-5 )
      END IF 
 
***    ... ET DEMANDONS-LA.

      IF (CMPL == 1)                                           THEN
          ALLOCATE( A((MAXL+1)*M),STAT=IERR(1) )  ! A-TR
          ALLOCATE( B(         M),STAT=IERR(2) )  ! B COLONNE
          ALLOCATE( C(    LIGNES),STAT=IERR(3) )  ! C COLONNE
          IF (IERR(1) /= 0 .or. loc( A ) == 0  .or.
     +        IERR(2) /= 0 .or. loc( B ) == 0  .or.
     +        IERR(3) /= 0 .or. loc( C ) == 0)                 THEN
             WRITE(6,6005) MAXMEM,M
             CALL                                  XIT(' Tmmult ',-5 )
          END IF
      ELSE ! Cas de donnnes complexes.
          ALLOCATE( D(2,(MAXL+1)*M),STAT=IERR(1) )  ! D-TR
          ALLOCATE( E(2,         M),STAT=IERR(2) )  ! E COLONNE
          ALLOCATE( F(2,    LIGNES),STAT=IERR(3) )  ! F COLONNE
          IF (IERR(1) /= 0 .or. loc( D ) == 0  .or.
     +        IERR(2) /= 0 .or. loc( E ) == 0  .or.
     +        IERR(3) /= 0 .or. loc( F ) == 0)                 THEN
             WRITE(6,6005) MAXMEM,M
             CALL                                  XIT(' Tmmult ',-5 )
          END IF
      END IF

      ALLOCATE( IBUF(LEN),STAT=IERR(4) )  ! IBUF

***    ANNONCER CE QUI VA SUIVRE.

      WRITE(6,6100) 'A',(VARIAB1(I),I=1,NVAR1)
      CALL WRITLEV2( LEV1,NLEV1,JBUF )

      WRITE(6,6100) 'B',(VARIAB2(I),I=1,NVAR2)
      CALL WRITLEV2( LEV2,NLEV2,KBUF )

      WRITE(6,6150) LIGNES, COL, M, MAXL
*---------------------------------------------------------------------- 
***    EFFECTUONS LE CALCUL DE C UNE COLONNE A LA FOIS. 
 
      DO  300 J=1,COL 
 
***        LECTURE DES DONNEES (SELON LE MODE FULL OU NON) 
***        ET CALCUL DE LA COLONNE COURANTE DE C. 
 
***        ON COMMENCE PAR LIRE LA J-IEME COLONNE DE B.

          WHEREB = 1
          DO  N=1,NVAR2

***            LIRE LES PROCHAINS NVAR2*NLEV2 CHAMPS DE B.

              IF (CMPL == 1)                                   THEN
                  CALL GETSET2( 2, B(  WHEREB), LEV,NLEV,
     +                                          IBUF,MAXW,OK )
              ELSE
                  CALL GETSET2( 2, E(1,WHEREB), LEV,NLEV,
     +                                          IBUF,MAXW,OK )
              END IF
                  
              IF (.NOT.OK .OR. NLEV.NE.NLEV2)                  THEN 
                  WRITE(6,6006) J 
                  CALL                             XIT(' Tmmult ',-6 ) 
              END IF 

              WHEREB = WHEREB+NLEV2*NWDS2

          END DO

***        INITIALISER LA J-IEME COLONNE DE C ...
 
          DO  I=1,LIGNES*CMPL
              C(I) = 0.0 
          END DO
 
***        ... ET PUIS ON S'OCCUPE DES LIGNES DE A-TRANSOPOSE ... 
 
          IF (J.NE.1 .AND. .NOT.FULL) CALL PRECEDE( 1,-1 )
 
***        ... MAXL LIGNES A LA FOIS.

          DO  250 IL=1,LIGNES,MAXL

              IF (J.EQ.1 .OR. .NOT.FULL)                       THEN

                  WHEREA = 1

                  DO  L=IL,MIN( IL+MAXL-1, LIGNES )
                  DO  K=1,NVAR1

***                    LIRE LES PROCHAINS MAXL*NVAR1*NLEV1 CHAMPS DE A.

                      IF (CMPL == 1)                           THEN
                          CALL GETSET2( 1, A(  WHEREA),LEV,NLEV,
     +                                                 IBUF,MAXW,OK )
                      ELSE
                          CALL GETSET2( 1, D(1,WHEREA),LEV,NLEV,
     +                                                 IBUF,MAXW,OK )
                      END IF

                      IF (.NOT.OK .OR. NLEV.NE.NLEV1)          THEN 
                          WRITE(6,6008) ((L-1)*NVAR1+K-1)*NLEV1+NLEV 
                          CALL                     XIT(' Tmmult ',-8 ) 
                      END IF 

                      WHEREA = WHEREA+NLEV1*NWDS

                  END DO
                  END DO

              END IF

***            CALCULER LE RESULTAT DU PRODUIT.

              WHEREA = 0
              DO  L=IL,MIN(IL+MAXL-1,LIGNES)

                  IF (CMPL.EQ.1)                           THEN
                      CL = 0.0
                      DO  I=1,M
                          CL = CL+A(WHEREA+I)*DBLE( B(I) )
                      END DO
                      C(L) = CL
                  ELSE IF (CMPL.EQ.2)                      THEN
                      FR = 0.0
                      FI = 0.0
                      DO  K=1,M
                          FR = FR+D(1,WHEREA+I)*DBLE( E(1,I) )
     +                       +    D(2,WHEREA+I)*DBLE( E(2,I) )
                          FI = FI+D(1,WHEREA+I)*DBLE( E(2,I) )
     +                       -    D(2,WHEREA+I)*DBLE( E(1,I) )
                      END DO
                      F(1,L) = FR
                      F(2,L) = FI
                  END IF

                  WHEREA = WHEREA+M

              END DO

  250     CONTINUE 
 
***        RE-DEFINIR LE TAMPON D'INFORMATION, ... 
 
          READ(TYPEO,4)  IBUF(1) 
                         IBUF(2) = TIMEB(J)
                         IBUF(4) = 1
                         IBUF(5) = NCOLS
                         IBUF(6) = NROWS
                         IBUF(7) = KHEM
                         IBUF(8) = IPAK
 
          IF (PKTYP.EQ.'SQ')                                   THEN
              CALL PUTHIGH( NPASB(J),'NPAS' ,IBUF )
              IF (DEET.EQ.0)                                   THEN
                  IBUF(2) = NPASB(J)
              ELSE
                  CALL PUTHIGH( DEET,'DEET',IBUF )
              END IF
          END IF
 
***        ... ET ENFIN, ECRIRE LA COLONNE AVEC LES
***        MEMES ETIQUETTES QUE TROUVEES PAR GETSIZ3.

          IF (NCOLS*NROWS*NLEV0*NVAR0.EQ.LIGNES)               THEN
              IF (CMPL == 1)                                   THEN
                  CALL PUTMSET( 3, C, LEV0,NLEV0, 
     +                                VARIAB0,NVAR0, IBUF,MAXW )
              ELSE
                  CALL PUTMSET( 3, F, LEV0,NLEV0, 
     +                                VARIAB0,NVAR0, IBUF,MAXW )
              END IF
          ELSE
              IF (CMPL == 1)                                   THEN
                  CALL PUTFLD2( 3, C, IBUF,MAXW )
              ELSE
                  CALL PUTFLD2( 3, F, IBUF,MAXW )
              END IF
          END IF

  300 CONTINUE 
 
*---------------------------------------------------------------------- 
***    FIN NORMALE. 
 
      CALL                                         XIT(' Tmmult ', 0 ) 
 
***    FIN PREMATUREE DE L'INFORMATION SUR UNIT#1. 
 
 9910 CALL                                         XIT(' Tmmult ',-10 ) 
 
***    FIN PREMATUREE DE L'INFORMATION SUR UNIT#2. 
 
 9911 CALL                                         XIT(' Tmmult ',-11 ) 
*---------------------------------------------------------------------- 

    4 FORMAT(A4) 

 6004 FORMAT(/' Number of columns in first matrix =',I6,' and'/ 
     +        ' Number of lines in second matrix  =',I6,'.'/) 
 6005 FORMAT(/' Maxmem, number of rows are ',2I8,', respectively.'/)
 6006 FORMAT(/' Error reading unit 2 after ',I6,' record(s).'/) 
 6007 FORMAT(/' More than one size in file. ')
 6008 FORMAT(/' Error reading unit 1 after ',I6,' record(s).'/) 

 6100 FORMAT(/' In file ',A,', variable(s) = ',16(A4,1X))
 6150 FORMAT(/' The output matrix has ',
     +          I6,' row(s) and ',I6,' column(s).'/
     +        ' The A/B common dimension is ',I6,'.'/
     +        ' A is processed ',I6,' columns at a time.'/)
 
      END 
#     endif

