#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      xlin  XIN XOUT INPUT OUTPUT [ -kind VAL1 ]
*
*
*     AUTHORS - B.Dugas, JULY 2009.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/vminmax.ptn,v 1.4 2014/09/25 20:20:55 dugas Exp $
*
*
*     DESCRIPTION...
*      A FILE ARITHMETIC PROGRAM WHICH...
*
*      ... PRODUCES FILE XOUT = VERTICAL MIN/MAX OF XIN AT EACH GRID POINT
*
*     PARAMETERS...
*
*      KIND = Accepted values are 'MAX' and 'MIN' (default is 'MAX').
*
*      READ( 5,5010 ) KIND
*5010  FORMAT(10X,A)
*
*
*     NOTE THAT MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER
*     THE "MISSING_VALUE" ENVIRONMENT VARIABLE OR THE "-mvalue"
*     COMMAND-LINE ARGUMENT. PLEASE SEE THE R.DIAG WEB
*     DOCUMENTAION FOR MORE DETAILS.
*
*
*     EXAMPLE OF INPUT CARD...
*
* VMINMAX MAX
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 ERROR READING INPUT PARAMETERS
*       2 PREMATURE EOF ON XIN
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM vminmax
*    +            ( XIN,        XOUT,       INPUT,      OUTPUT,
*    +       TAPE1= XIN, TAPE2= XOUT, TAPE5=INPUT,TAPE6=OUTPUT)
 
*     $Log: vminmax.ptn,v $
*     Revision 1.4  2014/09/25 20:20:55  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 1.3  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 1.2  2010/02/15 23:01:00  dugas
*     Corriger les bornes du calcul.
*
*     Revision 1.1  2009/07/10 21:52:39  dugas
*     Premiere version.
*

*---------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     MAXLEV
      PARAMETER ( MAXLEV = 999 )

      REAL        ZERO
      REAL*8      EPSILON,MISFLAG
      CHARACTER   VALEUR*20,NOM*4,KIND*3
      CHARACTER   TYPE*4,LIGNE*256
      LOGICAL     OK,SPEC,RPBLOC,MVALUE,VMAX,VMIN
      INTEGER     HEAD,JBUF(taille_entete),NLEV,NLEVG,
     +            LEV(MAXLEV),NF,IO,LEN,NWDS,JPAK,MAXW,NR,
     +            I,L,LENLAB,NWDS2,IER,START

      EXTERNAL    MACSPE,JCLPNT,GETLIGN,BURNF,FILEV,
     +            GETSET2,XIT,PUTFLD2,MISPAR,
     +            RPBLOC,GETLAB,PUTLAB

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL*8,     DIMENSION(:), ALLOCATABLE :: G,H

      LOGICAL     SETIO64
      INTEGER     GETSIZ2
      EXTERNAL    GETSIZ2,SETIO64

      DATA        VMIN, VMAX / .FALSE.,.FALSE. /

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/vminmax.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 4
      CALL JCLPNT( NF, 1,2, 5,6 )

      NR = 0

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          KIND   = ' '

          OK = RPBLOC('KIND',VALEUR)
          IF (OK) KIND = VALEUR

      ELSE

***        READ A,B AND NEWNAM FROM UNIT 5 (STDIN).
 
          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 901
          ELSE
              READ( LIGNE, 5010,ERR=900,END=901,IOSTAT=IO ) KIND
              CALL BURNF
          END IF

      END IF

      IF (KIND == ' ') KIND = 'MAX'
      WRITE(6,6007) KIND

      CALL LOW2UP( KIND,KIND )
      IF (KIND == 'MAX') VMAX = .TRUE.
      IF (KIND == 'MIN') VMIN = .TRUE.
 
      IF (.NOT.(VMIN.OR.VMAX)) CALL                XIT('Vminmax',-1 ) 

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFERS.

  050 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )
      IF (MAXW.LE.0) GOTO 902

      WRITE(TYPE,4) JBUF(1)
      IF (TYPE.EQ.'ZONL') NWDS = JBUF(5)

      ALLOCATE( IBUF(2*LEN),G(MAX( MAXW,NWDS*NLEV )),
     +                      H(MAX( MAXW,NWDS )) )

      IF (NR.NE.0) CALL PRTLAB( JBUF )

***    READ THE NEXT SET OF GRIDS FROM FILE XIN. 

  100 CALL GETSET2( 1, G,LEV,NLEVG, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( IBUF,G )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT('Vminmax', 0 ) 

          END IF

***        CHECK MISSING VALUE PARAMETRES.

          CALL MISPAR( MVALUE,MISFLAG,EPSILON )
          IF (MVALUE) EPSILON = ABS( MISFLAG )*EPSILON

***        BY-PASS LABEL RECORDS.

          WRITE(TYPE,4) IBUF(1) 

          IF (TYPE.NE.'LABL')                                  THEN

              SPEC = (TYPE.EQ.'SPEC' .OR.
     +                TYPE.EQ.'FOUR' .OR.
     +                TYPE.EQ.'CMPL')

***            VERIFY SIZES.

                                  NWDS2 = IBUF(5)
              IF (TYPE.NE.'ZONL') NWDS2 = IBUF(5)*IBUF(6)
              IF (SPEC)           NWDS2 = NWDS2*2

              IF (NWDS*NLEV .LT. NWDS2*NLEVG)                  THEN
                  CALL                             PRECEDE( 1,1 )
                  DEALLOCATE( IBUF,G,H )
                  GOTO 050
              END IF

              IF (TYPE.NE.'CHAR')                              THEN

                  IF (NR.EQ.0) CALL PRTLAB( IBUF )

***                SET H = VERTICAL MIN OR MAX OF G

                  H(1:NWDS2) = G(1:NWDS2)

                  IF (MVALUE)                                  THEN
                      DO  L=2,NLEVG
                          START = (L-1)*NWDS2
                          DO  I=1,NWDS2
                              IF (ABS( G(I)-MISFLAG ).LE.EPSILON) CYCLE
                              IF (VMIN) H(I) = MIN( H(I),G(START+I) )
                              IF (VMAX) H(I) = MAX( H(I),G(START+I) )
                          END DO
                      END DO
                  ELSE
                      DO  L=2,NLEVG
                          START = (L-1)*NWDS2
                          DO  I=1,NWDS2
                              IF (VMIN) H(I) = MIN( H(I),G(START+I) )
                              IF (VMAX) H(I) = MAX( H(I),G(START+I) )
                          END DO
                      END DO
                  END IF
 
              END IF

***            SAVE H ON FILE XOUT.

              IF (TYPE == 'ZONL')                              THEN
                  IBUF(4) = LEV(NLEVG)
                  IBUF(6) = 1
              END IF

              CALL PUTFLD2( 2, H, IBUF,MAXW )

          ELSE

***            SAVE THE LAST LABEL READ.

              LENLAB = IBUF(5)

              CALL GETLAB( 0, LIGNE, IBUF,LENLAB, OK )
              WRITE(NOM,4) IBUF(3)
              NLEVG = 1

              IF (NOM.EQ.'LABL')                               THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB,
     +                                   .FALSE. , .FALSE. )
              ELSE IF (NOM.EQ.'FILE')                          THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, 
     +                                   .TRUE.  , .FALSE. )
              ELSE IF (NOM.EQ.'INFO')                          THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, 
     +                                   .FALSE. , .TRUE.  )
              END IF

          END IF

      NR = NR+NLEVG
      GOTO 100 

***    E.O.F. ON UNIT #5.
 
  900 IF (IO.NE.0) WRITE(6,6100) IO
  901 CALL                                         XIT('Vminmax',-1 )

***   E.O.F. ON UNIT #1.

  902 CALL                                         XIT('Vminmax',-2 )
*---------------------------------------------------------------------

 0004 FORMAT(A4)

 5010 FORMAT(10X,A)

 6007 FORMAT('0 Vminmax KIND =',A)
 6010 FORMAT('0 Vminmax read',I6,' records.')
 6100 FORMAT(' Vminmax reports I/O error number ',I3,' on unit 5.')
 6110 FORMAT(' Vminmax is stripping label records...')

      END 
#     endif








