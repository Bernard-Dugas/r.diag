#     include "diagmacros.cdk"
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      gadd  X Y Z OUTPUT
*      gmlt  X Y Z OUTPUT
*      gdiv  X Y Z OUTPUT
*
*
*     AUTHOR - B.Dugas,  15 novembre 95.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/gadd.ptn,v 4.16 2014/09/25 19:32:34 dugas Exp $
*
*
*     DESCRIPTION...
*      A SET OF CCC FILE ARITHMETIC PROGRAMS WHICH...
*
*      ... PRODUCES FILE  Z = X + (FIRST SET OF RECORDS OF) Y (gadd)
*      ... PRODUCES FILE  Z = X * (FIRST SET OF RECORDS OF) Y (gmlt)
*      ... PRODUCES FILE  Z = X / (FIRST SET OF RECORDS OF) Y (gdiv)
*
*      A BARE MINIMALAMOUNT OF CHECKING IS DONE TO ENSURE THAT THE
*      OPERATION MAKES SENSE. SPECIFICALLY:
*              1) AS IN MLTF, DIVISION BY ZERO YIELDS ZERO.
*              2) THE TWO FILES SHOULD HAVE THE SAME TYPE OF RECORDS
*                 (I.E. THE SAME GRID DESCRIPTORS FOR CMC/RPN FILES).
*              3) a) IF Y HAS MORE THAN ONE LEVEL, IT SHOULD HAVE THE
*                 SAME NUMBER AS FOUND IN X. b) IF THE NUMBER OF LEVELS
*                 IN THE TWO FILES IS DIFFERNT AND THAT OF Y IS NOT 
*                 EQUAL TO ONE, THE PROGRAM ABORTS. FINALLY, c) IF
*                 Y ONLY HOLDS ONE LEVEL, IT WILL BE USED WITH ALL
*                 LEVELS OF X (I.E. BACKWARD COMPATIBILITY MODE).
*
*      NOTES: 1) gadd IS FUNCTIONNALY EQUIVALENT TO THE RCM PROGRAM add2d AND
*                gmlt IS FUNCTIONNALY EQUIVALENT TO THE RCM PROGRAM mlt2d
*             2) Operations on arrays that have the same size but different grid
*                descriptor sets (GRTYP,IGi) is possible if using the "-na" argument.
*
*           
*
*     MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER THE "MISSING_VALUE"
*     ENVIRONMENT VARIABLE OR THE "-mvalue" COMMAND-LINE ARGUMENT. HERE
*     IS HOW THIS WORKS OUT IN MORE DETAIL: WHEN...
*
*        X (not missing) & Y (not missing) => Z = X (operand) Y
*        X (    missing) & Y (not missing) => Z = u (operand) Y
*        X (not missing) & Y (    missing) => Z = X
*        X (    missing) & Y (    missing) => Z = Missing value
*
*      where 1) the operand is "+" "*" or "/";
*            2) u is the operand unit, such that: u (operand) v = v
*    
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 UNABLE TO READ FIRST SET OF Y
*       2 RECORDS NOT THE SAME SIZE
*       3 PREMATURE EOF ON FILE X
*       4 PREMATURE EOF ON FILE X
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM gadd
*    1            (     X,       Y,       Z,       OUTPUT,
*    2            TAPE1=X, TAPE2=Y, TAPE3=Z, TAPE6=OUTPUT)
 
*     $Log: gadd.ptn,v $
*     Revision 4.16  2014/09/25 19:32:34  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG et ajouter les alias ADD2D et MLT2D.
*
*     Revision 4.15  2014/09/02 22:29:53  dugas
*     Ajouter un commentaire dans la doc concernant l'argiment optionel '-na'.
*
*     Revision 4.14  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 4.13  2008/11/24 21:59:30  dugas
*     Faire la meme verification des descripteurs de grilles que dans ADDF.
*
*     Revision 4.12  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.11  2007/12/20 21:17:51  dugas
*     Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.10  2006/07/17 21:33:25  dugas
*     Correction pour GADD suite a l'ajout du mode MVALUE.
*
*     Revision 4.9  2006/07/04 17:53:21  dugas
*     Ajouter le support des donnees manquantes par le biais soit
*      du parametre "-mvalue valeur [epsilon]", soit de la variable
*      d'environnement "MISSING_VALUE=valeur", ou "valeur" est le
*      nombre reel denotant une valeur manquante et "epsilon" est
*      le facteur de precision utilise dans les comparaisons. La
*      valeur par defaut de epsilon est 1%. La seconde methode a
*      preseance sur la premiere.
*
*     Revision 4.8  2005/04/14 18:10:43  dugas
*     - Implementer les calculs en mode 64 bits.
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.7  2003/07/05 14:50:28  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.6  2001/05/14 12:29:58  armnrbd
*     Corriger la documentation automatique.
*     Utiliser NLEVX dans PUTSET2 plutot que NLEV.
*
*     Revision 4.5  2000/07/24 17:52:03  armnrbd
*     GADD, GDIV et GMLT sont consolide dans GADD.
*
*     Revision 4.4  1998/07/03 02:26:24  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1997/09/26  17:38:53  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.2  1996/02/29  20:44:21  armnrbd
*     Imprimer plus d'informations lors du traitement du cas MAXW=0
*     et aussi quand le programme se mets a ignorer les LABLs.
*
*     Revision 4.1  1995/11/16  19:00:42  armnrbd
*     Ajouter un commentaire concernant la relation avec ADD2D.
*
*     Revision 4.0  1995/11/16  18:50:54  armnrbd
*     Version initiale.
*
***    NOV 15/95 - B.DUGAS
 
*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     MAXLEV
      PARAMETER ( MAXLEV = 999 )


      REAL        ZERO
      COMPLEX*16  A,B
      CHARACTER*4 TYPE,PKTYP
      CHARACTER   MESSAG*10,VERBE*8
      REAL*8      X,Y,C,D,TP,EPSIL,FMISS
      LOGICAL     OK,CMPL,MVALUE,ROTAT,YMVALUE
      INTEGER     LEVEL(MAXLEV),HEAD,IBUF,IER,
     +            JPAK,JBUF(taille_entete),KPAK,KBUF(taille_entete),MAXW,
     +            LEN,NR,I,L,ILX,NWDS,NF,NLEV,NLEVX,
     +            NLEVY,MAXW1,MAXW2,LEN1,LEN2,MY

      INTEGER     NI,NJ
      CHARACTER   GRTYP,GRTYP2
      INTEGER     IG1, IG2, IG3, IG4
      REAL        XG1, XG2, XG3, XG4,
     +            XG12,XG22,XG32,XG42

      POINTER   ( IB,IBUF(8) )
      POINTER   ( IX,   X(1) ),( IY,  Y(1) )
      POINTER   ( IX, C(2,1) ),( IY,D(2,1) )
      POINTER   ( PY,  MY(1) )

      LOGICAL              NA
      COMMON     /ZZABORT/ NA

      LOGICAL     SETIO64
      CHARACTER*4 GETHIC,GETYP
      INTEGER     GETSIZ2,GETHIGH
      EXTERNAL    GETSIZ2,CMPLBL,GETSET2,MACSPE,JCLPNT,
     +            XIT,HPALLOC,HPDEAARLLC,PUTSET2,PRECEDE,
     +            GETVERB,SETIO64,MISPAR,GETHIC,GETYP,
     +            GETHIGH,CIGAXG

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        MESSAG / 'AUCUN' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/gadd.ptn,v $'

*-------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 4
      NR = 0

      CALL JCLPNT( NF, 1,2,3, 6 )
 
      ROTAT  =.FALSE.

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

***    WHAT OPERATING MODE: GADD, GMLT OR GDIV ?

      CALL GETVERB( VERBE )
      CALL LOW2UP( VERBE,VERBE )

      IF (VERBE == 'ADD2D') VERBE = 'GADD'
      IF (VERBE == 'MLT2D') VERBE = 'GMLT'

***    READ FIRST SET OF INFO BUFFERS.

      MAXW2 = GETSIZ2( 2, KBUF,LEN2,NWDS,KPAK, LEVEL,NLEVY )
      IF (MAXW2.EQ.0 .OR. NLEVY.GT.MAXLEV) GOTO 902

      CALL PRTLAB( KBUF )

      IF (PKTYP.EQ.'SQ')                                       THEN

          GRTYP2 = GETHIC ('GRTYP',KBUF )
          IG1    = GETHIGH('IG1'  ,KBUF )
          IG2    = GETHIGH('IG2'  ,KBUF )
          IG3    = GETHIGH('IG3'  ,KBUF )
          IG4    = GETHIGH('IG4'  ,KBUF )

***        RETREIVE THE GRID DESCRIPTORS FOR THE SECOND FILE.

          IF (GRTYP2.EQ.'L' .OR.
     +        GRTYP2.EQ.'N' .OR.
     +        GRTYP2.EQ.'S')                                   THEN
              CALL CIGAXG( GRTYP2, XG12,XG22,XG32,XG42,
     +                             IG1, IG2, IG3, IG4 )
          ELSE
              XG12 = IG1
              XG22 = IG2
              XG32 = IG3
              XG42 = IG4
          END IF

      END IF

  050 MAXW1 = GETSIZ2( 1, JBUF,LEN1,NWDS,JPAK, LEVEL,NLEV )
      IF (MAXW1.EQ.0 .OR. NLEV.GT.MAXLEV) GOTO 901

      IF (PKTYP.EQ.'SQ')                                       THEN

          GRTYP = GETHIC ('GRTYP',JBUF )
          IG1   = GETHIGH('IG1'  ,JBUF )
          IG2   = GETHIGH('IG2'  ,JBUF )
          IG3   = GETHIGH('IG3'  ,JBUF )
          IG4   = GETHIGH('IG4'  ,JBUF )

***        RETREIVE THE GRID DESCRIPTORS FOR THE FIRST FILE.

          IF (GRTYP.EQ.'L' .OR.
     +        GRTYP.EQ.'N' .OR.
     +        GRTYP.EQ.'S')                                    THEN
              CALL CIGAXG( GRTYP, XG1,XG2,XG3,XG4,
     +                            IG1,IG2,IG3,IG4 )
          ELSE
              XG1 = IG1
              XG2 = IG2
              XG3 = IG3
              XG4 = IG4
          END IF

***        COMPARE GRID DESCRIPTORS.

          IF (GRTYP.NE.GRTYP2)                                 THEN

              WRITE(6,6101) GRTYP, XG1, XG2, XG3, XG4,
     +                      GRTYP2,XG12,XG22,XG32,XG42
              IF (.NOT.NA)  CALL                   XIT( VERBE ,-2 )

          END IF
          IF      (XG1.NE.XG12   .OR.
     +             XG2.NE.XG22   .OR.
     +             XG3.NE.XG32   .OR.
     +             XG4.NE.XG42)                                THEN

              IF ((GRTYP.EQ.'G'  .OR.
     +             GRTYP.EQ.'B'  .OR.
     +             GRTYP.EQ.'A') .AND.
     +            (XG1  .EQ.XG12 .AND.
     +             XG3  .EQ.XG32 .AND.
     +             XG4  .EQ.XG42).AND.
     +            (XG2  .EQ. 0.  .OR.
     +             XG2  .EQ. 1.  .OR.
     +             XG22 .EQ. 0.  .OR.
     +             XG22 .EQ. 1.))                              THEN

***                XG2 INDICATES A ROTATED GRID.
***                ALL OTHER DESCRIPTORS IDENTICAL.

                  ROTAT = .TRUE.

                  write(6,6666)

              ELSE

                  WRITE(6,6101) GRTYP, XG1, XG2, XG3, XG4,
     +                          GRTYP2,XG12,XG22,XG32,XG42
                  IF (.NOT.NA) CALL                XIT( VERBE ,-2 )

              END IF

          END IF

      END IF

***    CHECK SIZE COMPATIBILITY.

      CALL CMPLBL( 0,JBUF, 0,KBUF, OK )

      IF (.NOT.OK       .OR.
     +   (NLEV.NE.NLEVY .AND. NLEVY.NE.1))                     THEN
          CALL PRTLAB( JBUF )
          WRITE(6,6002)  NLEV,NLEVY
          CALL                                     XIT( VERBE,-2 ) 
      END IF

***    ASK FOR NECESSARY MEMORY.

      MAXW = MAX( MAXW1,MAXW2 )
      LEN  = MAX( LEN1, LEN2  )

      NI   = JBUF(5)
      NJ   = JBUF(6)

      WRITE(TYPE,4) JBUF(1)

      IF (TYPE.EQ.'ZONL')                                      THEN
          NWDS = NI
          NJ   = NI
          NI   = 1
      END IF

      CALL HPALLOC( IB,LEN,                    IER,0 )  ! ALLOUER IBUF
      CALL HPALLOC( IX,MAX( MAXW,NWDS*NLEV )*2,IER,8 )  ! ALLOUER X,Y
      CALL HPALLOC( PY,MAX( MAXW,NWDS*NLEV )  ,IER,0 )  ! ALLOUER MY

      IY = LOC( X(MAX( MAXW,NWDS*NLEV )+1) )

                          CMPL = .FALSE.
      IF (TYPE.EQ.'CMPL') CMPL = .TRUE.

      IF (NR.NE.0) CALL PRTLAB( JBUF )

***    READ THE FIRST SET OF RECORDS OF Y.

      CALL PRECEDE( 2,-1 )

      CALL GETSET2( 2, Y, LEVEL,NLEVY, IBUF,MAXW,OK )

      IF (.NOT.OK) CALL                            XIT( VERBE,-1 ) 

***    CHECK MISSING VALUE PARAMETRES FOR FILE Y.

      CALL MISPAR( MVALUE,FMISS,EPSIL )
      IF (MVALUE) EPSIL = ABS( FMISS )*EPSIL

      YMVALUE = MVALUE

      IF (ROTAT)                                               THEN
          DO  L=1,NLEVY
              CALL ROWORD( Y((L-1)*NWDS+1),TP,NI,NJ )
          END DO
      END IF

      IF (VERBE.EQ.'GDIV')                                     THEN

***        CHECK FOR ZERO VALUES AND INVERT Y ONCE AND FOR ALL.

          IF (CMPL)                                            THEN
              IF (.NOT.MVALUE)                                 THEN
                  DO  I=1,NWDS*NLEVY
                      IF (D(1,I)*D(2,I).NE.0.0)                THEN
                          A = DCMPLX( D(1,I),D(2,I) )
                          A = 1./A
                          D(1,I) = DBLE( A )
                          D(2,I) = DIMAG( A )
                      END IF
                  END DO
              ELSE
                  DO  I=1,NWDS*NLEVY
                      IF (ABS( D(1,I)-FMISS ).GT.EPSIL
     +               .AND.ABS( D(2,I)-FMISS ).GT.EPSIL)        THEN
                          MY(I) = 1.
                          IF (D(1,I)*D(2,I).NE.0.0)            THEN
                              A = DCMPLX( D(1,I),D(2,I) )
                              A = 1./A
                              D(1,I) = DBLE( A )
                              D(2,I) = DIMAG( A )
                          END IF
                      ELSE
                          MY(I) = 0.
                      END IF
                  END DO
              END IF
          ELSE
              IF (.NOT.MVALUE)                                 THEN
                  DO  I=1,NWDS*NLEVY
                      IF (Y(I).NE.0.0) Y(I) = 1./Y(I) 
                  END DO
              ELSE
                  DO  I=1,NWDS*NLEVY
                      IF (ABS( Y(I)-FMISS ).GT.EPSIL)          THEN
                          MY(I) = 1.
                          IF (Y(I).NE.0.0) Y(I) = 1./Y(I) 
                      ELSE
                          MY(I) = 0.
                      END IF
                  END DO
              END IF
          END IF

      END IF

***    READ THE NEXT FIELD FROM X.

  100 CALL GETSET2( 1, X, LEVEL,NLEVX, IBUF,MAXW,OK )
 
          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  CALL                             HPDEALLC( IB,IER,0 )
                  CALL                             HPDEALLC( IX,IER,0 ) 
                  CALL                             HPDEALLC( PY,IER,0 ) 
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6200) NR

              CALL                                 XIT( VERBE, 0 ) 

          END IF

          IF (.not.YMVALUE)                                    THEN

***            CHECK MISSING VALUE PARAMETRES FOR FILE X.

              CALL MISPAR( MVALUE,FMISS,EPSIL )
              IF (MVALUE) EPSIL = ABS( FMISS )*EPSIL

          END IF

***        BY-PASS (I.E. STRIP) LABEL AND CHARACTER RECORDS.

          WRITE(TYPE,4) IBUF(1) 
          IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR')              THEN
              IF (MESSAG.NE.'deja donne')                      THEN
                  WRITE(6,6300) VERBE
                  MESSAG  = 'deja donne'
              END IF
              GOTO 100
          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

***        VERIFY SIZES.

          CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

          IF (.NOT.OK        .OR.
     +        NLEVX.GT.NLEV  .OR.
     +       (NLEVX.NE.NLEVY .AND. NLEVY.NE.1))                THEN
              CALL PRTLAB( IBUF )
              WRITE(6,6002)  NLEVX,NLEVY
              CALL                                 XIT( VERBE,-2 ) 
          END IF

          IF (VERBE.EQ.'GADD')                                 THEN

***            ADD X AND Y.

              IF (NLEVY.EQ.NLEVX)                              THEN
                  IF (.NOT.MVALUE)                             THEN
                      DO  I=1,NWDS*NLEVX
                          X(I) = X(I)+Y(I)
                      END DO
                  ELSE
                      DO  I=1,NWDS*NLEVX
                          IF (MY(I).NE.0 
     +                   .AND.ABS( X(I)-FMISS ).GT.EPSIL)      THEN
                              X(I) = Y(I)+X(I)
                          ELSE IF (MY(I).NE.0)                 THEN
                              X(I) = Y(I)
                          END IF
                      END DO
                  END IF
              ELSE
                  IF (.NOT.MVALUE)                             THEN
                      DO  L=1,NLEVX
                          ILX = (L-1)*NWDS
                          DO  I=1,NWDS
                              X(ILX+I) = X(ILX+I)+Y(I)
                          END DO
                      END DO
                  ELSE
                      DO  L=1,NLEVX
                          ILX = (L-1)*NWDS
                          DO  I=1,NWDS
                              IF (MY(I).NE.0 
     +                       .AND.ABS( X(ILX+I)-FMISS ).GT.EPSIL)
     +                        THEN
                                  X(ILX+I) = Y(I)+X(ILX+I)
                              ELSE IF (MY(I).NE.0)             THEN
                                  X(ILX+I) = Y(I)
                              END IF
                          END DO
                      END DO
                  END IF
              END IF

          ELSE IF (VERBE.EQ.'GDIV' .OR. VERBE.EQ.'GMLT')       THEN

***            MULTIPLY X AND WHATEVER IS IN Y.

              IF (CMPL)                                        THEN
                  IF (NLEVY.EQ.NLEVX)                          THEN
                      IF (.NOT.MVALUE)                         THEN
                          DO  I=1,NWDS*NLEVX
                              A = DCMPLX( D(1,I),D(2,I) )
                              B = DCMPLX( C(1,I),C(2,I) )
                              B = B*A
                              C(1,I) = DBLE( B )
                              C(2,I) = DIMAG( B )
                          END DO
                      ELSE
                          DO  I=1,NWDS*NLEVX
                              IF (MY(I).NE.0 
     +                       .AND.ABS( C(1,I)-FMISS ).GT.EPSIL
     +                       .AND.ABS( C(2,I)-FMISS ).GT.EPSIL)
     +                        THEN
                                  A = DCMPLX( D(1,I),D(2,I) )
                                  B = DCMPLX( C(1,I),C(2,I) )
                                  B = B*A
                                  C(1,I) = DBLE( B )
                                  C(2,I) = DIMAG( B )
                              ELSE IF (MY(I).NE.0)             THEN
                                  C(1,I) = D(1,I)
                                  C(2,I) = D(2,I)
                              END IF
                          END DO
                      END IF
                  ELSE
                      DO  L=1,NLEVX
                          ILX = (L-1)*NWDS
                          IF (.NOT.MVALUE)                     THEN
                              DO  I=1,NWDS
                                  A = DCMPLX( D(1,    I),D(2,    I) )
                                  B = DCMPLX( C(1,ILX+I),C(2,ILX+I) )
                                  B = B*A
                                  C(1,ILX+I) = DBLE( B )
                                  C(2,ILX+I) = DIMAG( B )
                              END DO
                          ELSE
                              DO  I=1,NWDS
                                  IF (MY(I).NE.0 
     +                           .AND.ABS( C(1,I)-FMISS ).GT.EPSIL
     +                           .AND.ABS( C(2,I)-FMISS ).GT.EPSIL)
     +                            THEN
                                      A = DCMPLX(
     +                                    D(1,    I),D(2,    I) )
                                      B = DCMPLX(
     +                                    C(1,ILX+I),C(2,ILX+I) )
                                      B = B*A
                                      C(1,ILX+I) = DBLE( B )
                                      C(2,ILX+I) = DIMAG( B )
                                  ELSE
                                      C(1,ILX+I) = D(1,I)
                                      C(2,ILX+I) = D(2,I)
                                  END IF
                              END DO
                          END IF
                      END DO
                  END IF
              ELSE
                  IF (NLEVY.EQ.NLEVX)                          THEN
                      IF (.NOT.MVALUE)                         THEN
                          DO  I=1,NWDS*NLEVX
                              X(I) = X(I)*Y(I)
                          END DO
                      ELSE
                          DO  I=1,NWDS*NLEVX
                              IF (MY(I).NE.0 
     +                       .AND.ABS( X(I)-FMISS ).GT.EPSIL)  THEN
                                  X(I) = Y(I)*X(I)
                              ELSE IF (MY(I).NE.0)             THEN
                                  X(I) = Y(I)
                              END IF
                          END DO
                      END IF
                  ELSE
                      DO  L=1,NLEVX
                          ILX = (L-1)*NWDS
                          IF (.NOT.MVALUE)                     THEN
                              DO  I=1,NWDS
                                  X(ILX+I) = X(ILX+I)*Y(I)
                              END DO
                          ELSE
                              DO  I=1,NWDS
                                  IF (MY(I).NE.0 
     +                           .AND.ABS( X(ILX+I)-FMISS ).GT.EPSIL)
     +                            THEN
                                      X(ILX+I) = Y(I)*X(ILX+I)
                                  ELSE IF (MY(I).NE.0)         THEN
                                      X(ILX+I) = Y(I)
                                  END IF
                              END DO
                          END IF
                      END DO
                  END IF
              END IF

          END IF

***        SAVE THE RESULT ON FILE Z.
 
          CALL PUTSET2( 3, X, LEVEL,NLEVX, IBUF,MAXW )
          IF (NR.EQ.0) CALL PRTLAB( IBUF )
 
      NR = NR+NLEVX
      GOTO 100
 
***    E.O.F. ON UNIT #1 OR #2

  901 CALL                                        XIT( VERBE,-3 )
  902 CALL                                        XIT( VERBE,-4 )

*---------------------------------------------------------------------
 0004 FORMAT(A4)

 6002 FORMAT(' Nlev(X), nlev(Y) = ',2I6)

 6101 FORMAT(' For first file  GRTYP,XG1,XG2,XG3,XG4= ',A,4F10.3/
     +       ' For second file GRTYP,XG1,XG2,XG3,XG4= ',A,4F10.3)
 6200 FORMAT('0',I6,' records processed.')
 6300 FORMAT(1X,A,' is stripping label/character records...')

 6666 FORMAT(/' Note: Arrays in the second file will be inverted'/
     +       '       in the North-South direction to orient them'/
     +       '       as their counterparts in the first file.'/)

      END
#     endif
