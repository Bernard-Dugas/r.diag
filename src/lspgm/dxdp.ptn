#     if !defined (pression_au_toit)
#         define   pression_au_toit 0.01
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      dxdp  XIN XOUT [LNSP] OUTPUT \ 
*      [-kind VAL0 [VAL1] -l VAL2 [VAL3] -a VAL4 -d VAL5 \ 
*       -i VAL6 [VAL7] -def [AABB][WEIGHT] ]
*
*
*     AUTHORS -  - R.Laprise ET J.D.Henderson, MAY 14 1983.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/dxdp.ptn,v 4.24 2015/03/30 22:22:32 dugas Exp $
*
*
*     PURPOSE - COMPUTES VERTICAL DERIVATIVE FOR ALL SETS IN A FILE
*
*
*     INPUT FILE...
*      XIN  = INPUT FILE OF PRESSURE/ETA/GEMx LEVEL SETS (REAL OR COMPLEX)
*             (MINIMUM NUMBER OF LEVELS IS 3)
*      LNSP = (OPTIONAL) LOG OF SURFACE PRESSURE FIELD USED BY THE TERRAIN
*             FOLLOWING COORDINATES TO DETERMINE THE LOCAL PRESSURE.
*
*     OUTPUT FILE... 
*      XOUT = VERTICAL (PRESSURE OR LOG-PRESSURE) DERIVATIVES
*             AT THE SAME LEVELS AS THE DATA IN FILE XIN
*
*      NOTE THAT THERE SHOULD BE AT LEAST 3 AND AT MOST 999 LEVELS IN XIN
*
*
*     COMMAND-LINE PARAMETERS...
*
*      KIND (1)      = 0, (DEFAULT) USES SIMPLE CENTERED DIFFERENCES.
*                      1, USE A WEIGHTED ALGORITHM, TAKING INTO ACCOUNT
*                         THE POSSIBLY UN-EVEN LEVEL SPACING, SO THAT THE
*                         SCHEME BECOMES SECOND-ORDER ACCURATE. SPECIFYNG
*                      2, ALLOWS TO DO THE DERIVATIVE USING A WEIGHTED
*                         LOG-PRESSURE DISCRETIZATION.
*      KIND   (2)    = INPUT VERTICAL COORDINATE: POSSIBLE OPTIONS ARE
*                     'PRES'/'ETA' FOR PRESSURE/GCM-ETA AND 'GEM'/'GEM2'/
*                     'GEM3'/'GEM4' FOR THE DIFFERENT VERSIONS OF THE GEM
*                      MODEL COORDINATE.
*      LEVTYP (l 1)  ='FULL' FOR 'ETA' MOMENTUM VARIABLE, AND
*                     'HALF' FOR 'ETA' THERMODYNAMIC ONE.
*      LAY    (l 2)  = DEFINES THE POSITION OF LAYER INTERFACES IN RELATION
*                      TO LAYER CENTRES FOR THE 'ETA' COORDINATE (SEE BASCAL).
*      PTOIT (a)     = PRESSURE (PA) AT THE LID OF MODEL. THE DEFAULT VALUE
*                      IS 0.01 OTHERWISE. THIS VALUE IS ONLY REQUIRED WITH
*                      THE CCCma GCM VERTICAL COORDINATES.
*
*      The next parametres are only used when COORD='GEMx', where x=2,3 or 4.
*
*      PREF  (d)     = REF PRESSURE (DEF 80000 PA).
*      R     (i)     = REFERENCE EXPONENT (DEF 1.0)
*
*      R2    (i2)    = EXPONENT USED ONLY WHEN COORD='GEM4' (DEF 1.0)
*
*     Notes: 1) Specifying "-def" command-line parameter by itself (no values)
*               tells the program to use the same weighted finite difference
*               as discussed above for the "-kind" argument, but this last has
*               precedence. However, if a 'AABB' value is set (see note #5
*               for more details), a 'WEIGHT' character sequence must also
*               be added to activate this option, as in "-def AABB/WEIGHT".
*            2) The program requires that data types be either of 'GRID',
*               'SUBA' or 'ZONL' when operating with any of the terrain
*               following vertical coordinates. The other types of data
*               are only supported with pressure vertical coordinates.
*            3) 'GEM' is the original GEM ETA coordinate, while 'GEM2' is
*               the first GEM HYBRID coordinate as implemented by Edouard
*               & Gravel in GEM/DM V2.2.0. 'GEM3' is the normalized version
*               that was implemented in the V2.3.1 GEM/DM. 'GEM4' is the
*               staggered hybrid coordinate version of GEM/DM from v4.0.6.
*            4) The default value of KIND(2) is determined by the file type
*               and the program will also try to determine it by the
*               (internal) coding used for the coordinate itself.
*            5) Specifying "-def AABB" will force the attempt to read
*               a text file called aabb.nml containing a FORTRAN
*               namelist AABB_NML, which in turns will hold two arrays,
*               A and B such that the local pressure at level K, PL(K),
*               can be calculated as "A(K)+B(K)*PS" for most coordinates.
*               For 'GEM4', the corresponding formula to calculate the
*               K-level natural logaritm of the local pressure is rather
*               "A(K)+B(K)*LN(PS/PREF)". The A and B terms should be such
*               as to produce local pressures in Pa units, even though PS
*               is usually read in units of hPa (before being converted
*               to Pa units internally). In all cases, this approach then
*               by-passes the normal COORD-related calculations for PL(K).
*                                     *************
*               Given the above, correctly using the AABB option with a
*               GEM4 file requires specifying the "-kind GEM4" argument.
*                                     *************
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 NOT ENOUGH OR TOO MANY LEVELS IN FIRST SET OF XIN
*       2 MORE THAN ONE SIZE IN FILE XIN
*       3 NOT ENOUGH LEVELS IN LAST SET READ
*       4 LEVELS DO NOT VARY MONOTONICALLY
*       5 ILLEGAL "KIND" VALUE
*       6 LNSP FILE MISSING OR EMPTY
*       7 LNSP AND XIN NOT THE SAME SIZE
*       8 PROBLEM READING PARAMETRES
*       9 UNRECOGNIZED COORDINATE TYPE
*      10 UNABLE TO CONTINUE (SEE NOTE 1)
*      11 UNABLE TO ALLOCATE WORKING MEMORY
*      12 LP DOES NOT CONTAIN LN( SURFACE PRESSURES ) FOR EARTH
*      16 UNSUPPORTED VERTICAL COORDINATE IN XIN
*      17 KIND(2) PARAMETRE AND XIN DATA MISMATCH
*      18 UNABLE TO FIND A GEM4 '!!' RECORD
*      20 UNABLE TO READ AABB NAMELIST
*      21 MORE THAN ONE VERTICAL COORDINATE IN XIN
*      22 WRONG NUMBER OF A,B IN AABB
*      23 UNRECOGNIZED -DEF ARGUMENT VALUE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM dxdp
*    +            ( XIN,        XOUT,       OUTPUT,
*    +       TAPE1= XIN, TAPE2= XOUT, TAPE6=OUTPUT)
 
*     $Log: dxdp.ptn,v $
*     Revision 4.27  2020/02/10 11:11  dugas
*     Declarer les variables R38,R48 utilisees dans toc_gest_1.cdk
*     avec les coordoonnes hauteurs-hybride et sleve-hybride.
*
*     Revision 4.26  2019/01/10 17:17  dugas
*     Faire appel aux nouveaux comdecks *_formats.cdk
*     associes aux autres implementes en fin 2016.
*
*     Revision 4.25  2016/10/28 15:20  dugas
*     - Ameliorer le support des coordonnees verticales de
*       GEM4, et ce aussi pour le mode de traitement AABB.
*     - Ajouter une option "WEIGHT" au parametre "-def".
*     - Modifications syntaxiques de type F77 --> F90.
*     - Calculs et I/O effectues en mode 64 bits (REAL*8).
*     - Usage des nouveaux comdecks toc_gest_1.cdk, toc_gest_2.cdk
*       et set_a_b_from_AABB.cdk.
*
*     Revision 4.24  2015/03/30 22:22:32  dugas
*     Initialiser les pointeurs qui seront passes a VGRIDDESCRIPTORS.
*
*     Revision 4.23  2014/09/25 20:20:47  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.22  2014/09/02 22:29:03  dugas
*     Verifier que le nombre de parametres lus dans aabb.nml est correct.
*
*     Revision 4.21  2013/12/18 21:32:37  bernard
*      - Lecture du fichier namelist aabb.nml. Celui-ci doit contenir le
*        namelist FORTRAN AABB_NML, qui contient a son tour les deux
*        vecteurs verticaux A et B. Ces derniers sont utilises dans
*        dans le calcul de la pression locale (PL=A+B*PS).
*      - Declarations EXTERNAL 'a la' F90.
*
*     Revision 4.20  2013/03/21 21:34:45  bernard
*     Ajouter le support de VKIND=5003.
*
*     Revision 4.19  2012/07/02 21:19:46  dugas
*     Corriger l'appel a GETTOC qui definit PTOIT8.
*
*     Revision 4.18  2011/09/16 17:54:03  dugas
*     Ajouter la coordonnee ET16.
*
*     Revision 4.17  2011/06/15 18:15:34  dugas
*     Simplifier la section de code qui fait un appel a LoPTOC.
*
*     Revision 4.16  2010/04/01 15:54:59  dugas
*     Restaurer le support des donnees en coordonne de pression.
*
*     Revision 4.15  2010/02/15 22:36:39  dugas
*     Support BETA de la coordonnee verticale GEM4.
*
*     Revision 4.14  2009/09/08 20:46:22  dugas
*     Initialiser PR(NLEV)=1.0 si NLEV=1 (pour fichiers SQ).
*
*     Revision 4.13  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.12  2008/04/28 15:41:58  dugas
*     Ne plus tenir compte du cas non-SQ98.
*
*     Revision 4.11  2007/12/20 21:07:19  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Utiliser CONVPR pour decoder les niveaux verticaux.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.10  2005/04/14 18:07:36  dugas
*     - Proteger PTOIT,PREF,R lors de l'appel a LIRPT.
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.9  2003/07/05 14:50:28  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.8  2002/09/17 17:52:25  dugas
*     Modifier/simplifier le traitement des coordonnees verticales hybrides
*      de GEM (v2.2.0 et v2.3.1). Utilisation systematique de GETKIND et
*      definition du type de coordonnee par defaut selon le genre de
*      fichier rencontre (CCC ou RPN).
*
*     Revision 4.7  2002/02/02 00:51:54  dugas
*     Ajouter le support de toutes les coordonnees ETA du GCM
*
*     Revision 4.6  2002/01/14 15:49:45  dugas
*     Les coordonnees verticales de type SIG et ETxx du GCM/CCCma, de meme
*      que la coordonnees GEM3 (v2.3.1) sont maintenant supportees.
*
*     Revision 4.5  1998/07/03 02:26:23  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.4  1997/09/26  17:38:50  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.3  1997/04/01  23:55:33  armnrbd
*     Implanter le mode de calcul en log(p) de G.Brunet.
*
*     Revision 4.2  1996/11/26  20:15:04  armnrbd
*     Tenir compte des niveaux verticaux decroissants.
*
*     Revision 4.1  1996/02/29  20:44:21  armnrbd
*     Imprimer plus d'informations lors du traitement du cas MAXW=0
*     et aussi quand le programme se mets a ignorer les LABLs.
*
*     Revision 4.0  1994/11/17  14:19:53  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:55:53  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.5  92/11/23  13:32:45  armnrbd
*     Deuxieme BugFix ...
*     
*     Revision 1.4  92/11/23  13:27:23  armnrbd
*     BugFix a l'implantation de GETSIZ2.
*     
*     Revision 1.3  92/11/09  22:39:57  armnrbd
*     Implantation de GETSIZ/GETSIZ2.
*     
*     Revision 1.2  92/10/13  15:55:49  armnrbd
*     Definir JBUF(8)=-32, plutot que JBUF(8)=1.
*     
*     Revision 1.1  92/03/23  12:06:07  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:41:40  armnrbd
*     Initial revision
*     
***    MAY 14 1983 - R.LAPRISE **ET** NOV 27 1980 - J.D.HENDERSON 

***    HISTORIQUES DES MODIFICATIONS:

***    17 MAI 1991 - B.Dugas, RPN : VERSION CY920.

*-----------------------------------------------------------------------
      use diag_toc, only: GetTOC, LirTOC, LopTOC

      IMPLICIT    none

      INTEGER,    PARAMETER :: MAXLEV = 999
      REAL,       PARAMETER :: PTMIN = pression_au_toit
      INTEGER,    PARAMETER :: HEAD = taille_entete

      CHARACTER   PKTYP*2,GRTYP,CHECK*2,
     +            LIGNE*20,MESSAG*10,ENCORE*16
      CHARACTER*4 NAME,TYPE,COORD,LEVTYP,VERBEX*8
      LOGICAL     OK,LNSP,WEIGHT,MONOTON,MODETA,
     +            AABB,DEF,LOGP,TOCLU
      INTEGER     KBUF(HEAD),LBUF(HEAD),IN1,L0,L1,L2,
     +            LEV(MAXLEV),NLEV,NLEVG,I,J,L,LL,N,NF,NR,MAXW,
     +            MAX3,LEN,LEN3,NWDS,LAY,IO,KPAK,LPAK,I0,J0,ERR,
     +            IER,BOTM,TOP,BOT,INC,HAUT,BAS,KIND,VKIND,TOC_NK,
     +            TOC_NBR,NST,MEM,NC,IG10,IG20,IG1,IG2,NI,NJ,IUN
      REAL(8)     G(MAXLEV),PR8(MAXLEV),DP(MAXLEV), PTOIT8,PREF8,
     +            R8,R28,R38,R48, CORR1,CORR2,XMEM1,XMEM2
      REAL        AMIN,AMAX,AMEAN,BIGBIN,PR(MAXLEV),PR0(MAXLEV),
     +            PTOIT,PTOIT0,PREF,PREF0,R0,R20,R,R2

      INTEGER,    POINTER, DIMENSION(:) :: LEVT

      REAL        A(MAXLEV+1), B(MAXLEV+1)
      NAMELIST    /AABB_NML/ A,B

      INTEGER,    DIMENSION(:),    ALLOCATABLE :: IBUF
      REAL(8),    DIMENSION(:,:),  ALLOCATABLE :: GG,GGC,LP
      REAL(8),    DIMENSION(:,:,:),ALLOCATABLE :: LPC

      ! nullify local_pressure which is used in LoPTOC and has to be initialized
      real,       dimension(:,:,:), save, pointer  :: local_pressure=>null()
      real,       dimension(:,:),    allocatable   :: ps

      CHARACTER(16),EXTERNAL :: GETKINDC
      CHARACTER(4), EXTERNAL :: GETYP,GETHIC
      LOGICAL,      EXTERNAL :: RPBLOC,SETIO64
      INTEGER,      EXTERNAL :: GETHIGH,FNOM,FCLOS
      INTEGER,      EXTERNAL :: GETSIZ,GETSIZ2,GETKIND
      EXTERNAL    MACSPE,JCLPNT,XIT,GETSET2,CMPLBL,CONVPR,PUTSET2,
     +            BASCAL,MONVERT,WRITLEV,COORDAB, GETPT,LIRPT,
     +            SETPT,GENAB,GETFLD2,SETKINDi

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        CHECK  /  ' '    /,
     +            MESSAG / 'AUCUN' /,
     +            ENCORE / 'PAS ENCORE DONNE' /
      DATA        AABB,MODETA,WEIGHT,TOCLU / 4*.FALSE. /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/dxdp.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 4 ; IN1 = 1
      CALL JCLPNT( NF, IN1,2,3, 6 )

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

      VERBEX ='  Dxdp  '

      PKTYP  = GETYP( IN1 )

      LNSP   = (NF.EQ.3)

      KIND   = -1
      LEVTYP = 'HALF'
      LAY    =   0

      COORD  = 'DEF'
      PTOIT  =  PTMIN
      PREF   = 80000.
      PREF8  =-1.0
      R      = 1.0
      R2     = 1.0
      R0     =-1.0
      R20    =-1.0
      AABB   =.FALSE.

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('KIND',LIGNE)
          IF (OK) READ(LIGNE,0005,END=908,ERR=908,IOSTAT=IO) KIND

          OK = RPBLOC('KIND2',LIGNE)
          IF (OK) COORD = LIGNE

          OK = RPBLOC('L',LIGNE)
          IF (OK) LEVTYP = LIGNE

          OK = RPBLOC('L2',LIGNE)
          IF (OK) READ(LIGNE,0005,END=908,ERR=908,IOSTAT=IO) LAY

          OK = RPBLOC('A',LIGNE)
          IF (OK) READ(LIGNE,0020,END=908,ERR=908,IOSTAT=IO) PTOIT

          OK = RPBLOC('D',LIGNE)
          IF (OK) READ(LIGNE,0020,END=908,ERR=908,IOSTAT=IO) PREF8

          OK = RPBLOC('I',LIGNE)
          IF (OK) READ(LIGNE,0020,END=908,ERR=908,IOSTAT=IO) R

          IF (COORD == 'GEM4')                                 THEN
              OK = RPBLOC('I2',LIGNE)
              IF (OK) READ(LIGNE,0020, END=908,ERR=908,IOSTAT=IO ) R20
          END IF

          OK = RPBLOC('DEFAUT',LIGNE)
          IF (OK)                                              THEN
              IF (LIGNE /= ' ') CALL LEADBLK( LIGNE )
              IF (LIGNE == '-1')                               THEN
                  WEIGHT = OK
              ELSE IF (LIGNE /= ' ')                           THEN
                  CALL low2up( LIGNE,LIGNE )
                  IF (index( LIGNE,'AABB'   ) > 0) AABB   = OK
                  IF (index( LIGNE,'WEIGHT' ) > 0) WEIGHT = OK
                  IF (.NOT.(WEIGHT .OR. AABB))                 THEN
                      WRITE(6,6023) TRIM( LIGNE )
                      CALL                         XIT( Verbex ,-23)
                  END IF
              END IF
          END IF

      END IF

***    ACCOUNT FOR DEFAULT TREATMENT.

      IF (R0  > 0.) R  = R0
      IF (R20 > 0.) R2 = R20

      IF (PREF8 <= 0.0_8)                                       THEN
          ! Reset PREF8 for GEM4. PREF is already set otherwise.
          IF (COORD == 'GEM4') PREF8 = 100000.
      ELSE IF (COORD == 'GEM4')                                THEN
          PREF8 = 100000. ! This is the only allowed value.
      ELSE
          PREF = PREF8
      END IF

      IF (COORD.NE.' ') CALL LEADBLK( COORD )
      IF (COORD.EQ.' ') COORD = 'DEF'

      IF (AABB .AND. COORD == 'DEF')                           THEN
          COORD = 'GEM'
          VKIND = 1 ! i.e. ETA or SIGMA
      END IF

      IF (COORD     .NE.'DEF'  .AND.
     +    COORD     .NE.'SIG ' .AND.
     +    COORD     .NE.'ETA ' .AND.
     +    COORD     .NE.'ET10' .AND.
     +    COORD     .NE.'ET15' .AND.
     +    COORD     .NE.'ET16' .AND.
     +    COORD(1:3).NE.'GEM'  .AND.
     +    COORD     .NE.'PRES' )                               THEN
          CALL                                     XIT( VERBEX ,-9 )
      ELSE
     +IF (PKTYP.EQ.'SQ')                                       THEN

!!!       IF (COORD.EQ.'DEF'  .OR.
          IF (COORD.EQ.'GEM2' .OR.
     +        COORD.EQ.'GEM3' )
     +        CALL SETPT( PTOIT,PREF,R )

          IF (COORD /= 'DEF')                                  THEN
              If (COORD == 'GEM'   .or.
     +            COORD == 'GEM2') VKIND = 1
              If (COORD == 'PRES') VKIND = 2
              If (COORD == 'GEM3'  .or.
     +            COORD == 'GEM4') VKIND = 5
          END IF

      END IF

      IF (KIND.EQ.-1)                                          THEN
                      KIND = 0
          IF (WEIGHT) KIND = 1
      ELSE IF (KIND.GT.2 .OR. KIND.LT.-1)                      THEN
          WRITE(6,6005) KIND
          CALL                                     XIT( VERBEX ,-5 )
      END IF

      IF (KIND.EQ.1)                                           THEN
          LOGP = .false.
          WRITE(6,6000)
      ELSE IF (KIND.EQ.2)                                      THEN
          LOGP = .true.
          WRITE(6,6099)
      END IF

      NR = 0

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFERS.

  050 MAXW = GETSIZ2( IN1, KBUF,LEN,NWDS,KPAK, LEV,NLEV )

      IF (NLEV.EQ.0) WRITE(6,6150)
      IF (MAXW.EQ.0 .OR.
     +    NLEV.LT.3 .OR. NLEV.GT.MAXLEV) CALL      XIT( VERBEX ,-1 )

      IF (PKTYP.EQ.'SQ' .AND. .NOT.(TOCLU .OR. AABB))          THEN

***        ATTEMPT TO DEFINE VERTICAL LEVEL INFO FROM HY OR !! RECORDS.

#         include "toc_gest_1.cdk"

          TOCLU = .TRUE.

      ELSE IF (.NOT.AABB)                                      THEN

          IF (COORD == 'DEF') COORD  = 'PRES'
          VKIND = 2

      END IF

      CORR1 = LOG( 100. )
      IF (COORD == 'GEM4') CORR2 = LOG( PREF8 ) ! Used in AABB-mode

      DO  L=1,NLEV
          CALL CONVPR( LEV(L), PR(L), VKIND, -2 )
          IF (COORD.NE.'PRES' .AND. VKIND.EQ.2) PR(L) = PR(L) * 0.001
      END DO

      IF (PKTYP     /= 'SQ'   .AND.
     +    COORD     /= 'PRES' .AND.
     +    LEV(NLEV) ==   1  ) PR(NLEV) = 1.0

      CALL WRITLEV( PR,NLEV,COORD )

      IF (COORD.EQ.'PRES')                                     THEN
          LNSP = .FALSE.
      ELSE IF (.NOT.LNSP)                                      THEN
          CALL                                     XIT( VERBEX ,-6 )
      END IF

      NI = KBUF(5) ; NJ = KBUF(6)
      
      IF (LNSP)                                                THEN

          MAX3 = GETSIZ ( 3, LBUF,LEN3,NWDS,LPAK )
          IF (MAX3.EQ.0) CALL                      XIT( VERBEX ,-6 )

          MAXW = MAX( MAXW,MAX3 )
          LEN  = MAX( LEN,LEN3 )

          CALL CMPLBL( 0,KBUF, 0,LBUF, OK )
          IF (.NOT.OK ) CALL                       XIT( VERBEX ,-7 )

      END IF

      WRITE(TYPE,0004) KBUF(1)

      IF (LNSP           .AND.
     +   (TYPE.NE.'GRID' .AND.
     +    TYPE.NE.'SUBA' .AND.
     +    TYPE.NE.'ZONL' ))                                    THEN

***        TERRAIN FOLLOWING COORDINATE CAN ONLY BE
***        USED WITH GRID/SUBA/ZONL TYPE OF DATA.

          CALL                                      XIT( VERBEX ,-10)

      END IF

      IF (TYPE.EQ.'ZONL') NWDS = KBUF(5)

      ALLOCATE( GG (NWDS,NLEV),LPC(NLEV,NI,NJ),PS(NI,NJ),
     +          GGC(NLEV,NWDS),LP(NI,NJ),IBUF(LEN), STAT=ERR )

      IF (ERR /= 0) GOTO 911

***     CHECK THAT PR IS MONOTONIC.

      CALL MONVERT( PR,NLEV, TOP,BOT,INC, MONOTON )

      IF (.NOT.MONOTON) CALL                       XIT( VERBEX ,-4 )

!!!   IF (.NOT.AABB .AND. COORD == 'GEM4' .AND. TOP > BOT)     THEN
!!!       WRITE(6,6013) ; CALL                     XIT( VERBEX ,-13)
!!!   END IF

      BOTM = BOT-INC

      IF (COORD.EQ.'PRES')                                     THEN

***       SET PR,PR0 TO THE PRESSURE IN N/M**2.

          PR0(1:NLEV) = PR (1:NLEV)*100.
          PR (1:NLEV) = PR0(1:NLEV)
          PR8(1:NLEV) = PR0(1:NLEV)
          IF (KIND.EQ.2)
     +        PR8(1:NLEV) = LOG( PR8(1:NLEV) )

      ELSE

          PR0(1:NLEV) = PR(1:NLEV)

          IF (COORD.EQ.'SIG') PTOIT = 0.0

          IF (COORD(1:2).EQ.'ET')                              THEN

***            EVALUATE LAYER INTERFACES FROM LEVTYP AND LAY.

              IF (LEVTYP.EQ.'FULL')                            THEN
                  CALL BASCAL( PR, IBUF, PR0,PR0,NLEV,LAY )
              ELSE IF (LEVTYP.EQ.'HALF')                       THEN
                  CALL BASCAL( IBUF, PR, PR0,PR0,NLEV,LAY )
              END IF

***            EVALUATE THE PARAMETERS OF THE
***            ETA VERTICAL DISCRETIZATION.
 
              CALL COORDAB( A,B, NLEV,PR, COORD,PTOIT )


          ELSE IF (AABB)                                       THEN

***            A and B are read from namelist file 'aabb.nml'.

#             define NSL NLEV
#             include "set_a_b_from_AABB.cdk"
#             undef  NSL

          ELSE IF (COORD.EQ.'GEM2' .OR.
     +             COORD.EQ.'GEM3')                            THEN

              IF (.NOT.MODETA .AND. COORD.EQ.'GEM3')           THEN

                  MODETA =.TRUE.

                  DO  L=1,NLEV
                      PR0(L) = PR0(L) + ( 1.0 - PR0(L) ) * PTOIT / PREF
                  END DO

              END IF

              WRITE(6,6400) LEVTYP,LAY,COORD,PTOIT,PREF,R

              CALL GENAB( A,B, PR0, PTOIT,PREF,R, NLEV )

          ELSE IF (COORD.EQ.'GEM')                             THEN

              WRITE(6,6400) LEVTYP,LAY,COORD,PTOIT

          ELSE IF (COORD.EQ.'GEM4')                            THEN

              WRITE(6,6400) LEVTYP,LAY,COORD,PTOIT,PREF,R,R2

          END IF

      END IF

***    READ THE NEXT SET OF GRIDS FROM FILE XIN. 

  100 CALL GETSET2( IN1, GG,LEV,NLEVG, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN
             
              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( GG,LPC,PS,GGC,LP,IBUF )
                  GOTO 050
              END IF

              IF (NR > 0) CALL PRTLAB2('  Output  ',LBUF )

              WRITE(6,6200) NR
              CALL                                 XIT( VERBEX , 0 ) 

          ELSE
              LBUF(1:HEAD) = IBUF(1:HEAD)
          END IF

***        BY-PASS (I.E. STRIP) LABEL RECORDS.

          WRITE(TYPE,0004) IBUF(1) 
          WRITE(NAME,0004) IBUF(3)

          IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR')              THEN
              IF (MESSAG.NE.'deja donne')                      THEN
                  WRITE(6,6300)
                  MESSAG  = 'deja donne'
              END IF
              GOTO 100
          END IF

          IF (NR.EQ.0) CALL PRTLAB2('  DXDP on ',IBUF )

***        VERIFY SIZES.

          CALL CMPLBL( 0,KBUF, 0,IBUF, OK )

          IF (.NOT.OK .OR. NLEV.NE.NLEVG)                      THEN
              CALL PRTLAB2('  Read    ',IBUF )
              CALL                                 XIT( VERBEX ,-2 ) 
          END IF

***        CHECK FOR (VERTICAL) REFERENCE RECORD CHANGES.

#         include "toc_gest_2.cdk"

***        CHECK THAT WE HAVE ENOUGH LEVELS.

          IF (NLEVG.LT.3)                                      THEN
              CALL                                 XIT( VERBEX ,-3 )
          END IF

          IF (LNSP)                                            THEN

              NST = IBUF(2)

***            GET LN(SF PRES) FOR THIS STEP.
 
              CALL GETFLD2( 3, LP, TYPE,NST,' ',-1,IBUF,MAXW,OK )

              IF (.NOT.OK)                                      THEN
                  IF (MAXW == 0)                                THEN
                      DEALLOCATE( GG,LPC,PS,GGC,LP,IBUF )
                      CALL PRECEDE( IN1,NLEV )
                      GOTO 050
                  END IF
                  CALL                             XIT( VERBEX ,-6 )
              END IF

              IF (NR.EQ.0)  CALL PRTLAB2('  Read    ',IBUF )

              CALL CMPLBL( 0,KBUF, 0,IBUF, OK )
              IF (.NOT.OK) CALL                    XIT( VERBEX ,-7 ) 

***            Check that LP really contains values that are
***            representative of earth's LN( surface pressures )
***            in units of hPa. 

              IF (CHECK /= 'OK')                               THEN
                  CALL FMMM2( AMIN,AMAX,AMEAN, LP,NWDS )
                  AMIN = EXP( AMIN+CORR1 ) ! Convert to pressure in Pa
                  AMAX = EXP( AMAX+CORR1 ) 
                  IF (AMIN <  33000. .OR.
     +                AMAX > 121200.) CALL         XIT( VERBEX ,-18)
                      CHECK = 'OK'
              END IF

              IF (COORD /= 'GEM4') LP = EXP( LP )

          END IF

          if (COORD == 'GEM4')                                 THEN

              LP = LP+CORR1 ! PS NOW IN LN(PASCAL).

              IF (AABB)                                        THEN

                  ! Do NOT recalculate local pressure in LoPTOC
                  ! as it is calculated immediately, LP=LN(PASCAL).
                  ! Also account for the case where we need to add
                  ! the surface layer values (i.e. when LL=NLEV-1).

                  L1 = 0    ; IF (LL == NLEV-1 .AND. INC < 0) L1 = 1
                  L2 = NLEV ; IF (LL == NLEV-1 .AND. INC < 0) L2 = 1

                  DO  J=1,NJ
                  DO  I=1,NI
                      IF (LOGP)                            THEN
                          DO  L=1,LL
                              ! Calculate A(L)+B(L)*LN(PS/PREF)
                              LPC(L+L1,I,J) = A(L)+B(L)*(LP(I,J)-CORR2)
                          END DO
                          IF (LL == NLEV-1) LPC(L2,I,J) = LP(I,J)
                      ELSE
                          DO  L=1,LL
                              ! Calculate exp( A(L)+B(L)*LN(PS/PREF) )
                              LPC(L+L1,I,J) = exp( A(L)+B(L)*(LP(I,J)-CORR2) )
                          END DO
                          IF (LL == NLEV-1) LPC(L2,I,J) = exp( LP(I,J) )
                      END IF
                  END DO
                  END DO

              ELSE

                  ! SURFACE PRESSURE IN PASCALS.
                  PS = EXP( LP )

                  ! COMPUTE LOCAL PRESSURE
                  CALL LoPTOC( local_pressure, lev(1:nlev),
     +                         PS, IG1,IG2, IN_LNP=LOGP )


                  ! RE-ORDER local_pressure FOR NEXT OPERATIONS.
                  DO  J=1,NJ
                  DO  I=1,NI
                      LPC(1:nlev,I,J) = local_pressure(I,J,1:nlev)
                  END DO
                  END DO

              END IF

          end if

***        COMPUTE THE DERIVATIVE FROM THE TOP DOWN.
***        ENDS USE ONE-SIDED DIFFERENCE. INTERIOR USES CENTERED DIFF.

          I0 = 0 ; J0 = 1

          ! RE-ORDER GG FOR NEXT SET OF COLUMN-ORIENTED OPERATIONS.
          DO  I=1,NWDS ; GGC(1:NLEV,I) = GG(I,1:NLEV) ; END DO

         DO  200 I=1,NWDS

              I0 = I0+1
              IF (I0 > NI)                                    THEN
                  J0 = J0+1
                  I0 = 1
              END IF

              G(1:NLEV) = GGC(1:NLEV,I) ! G HOLDS A SINGLE COLUMN OF GG.

              IF (COORD == 'GEM4')                             THEN
                  PR8(1:NLEV) = LPC(1:NLEV,I0,J0)
              ELSE IF (COORD.NE.'PRES')                        THEN
                  IF (COORD.EQ.'GEM' .OR.
     +                COORD.EQ.'SIG' )                         THEN
                      PR8(1:NLEV) = PTOIT + PR0(1:NLEV) * ( LP(I0,J0) - PTOIT )
                  ELSE
                      PR8(1:NLEV) = A(1:NLEV) + B(1:NLEV) * LP(I0,J0)
                  END IF
                  IF (LOGP) PR8(1:NLEV) = LOG( PR8(1:NLEV) ) 
              END IF

              DP(TOP) = (  G(TOP+INC)- G(TOP) )
     +                / ( PR8(TOP+INC)-PR8(TOP) )

              IF (KIND.EQ.1 .OR. KIND.EQ.2)                    THEN

                  DO  L=TOP+INC,BOTM,INC
                      HAUT  = L-INC
                      BAS   = L+INC
                      XMEM1 = (PR8(L   )-PR8(HAUT)) / (PR8(BAS )-PR8(L   ))
     +                      /           (PR8(BAS ) -  PR8(HAUT))
                      XMEM2 = (PR8(BAS )-PR8(L   )) / (PR8(L   )-PR8(HAUT))
     +                      /           (PR8(BAS ) -  PR8(HAUT))
                      DP(L) =  XMEM1  *( G(BAS )  -   G(L   ))
     +                      +  XMEM2  *( G(L   )  -   G(HAUT))
                  END DO

              ELSE IF (KIND.EQ.0)                              THEN

***                USE SIMPLE CENTERED DIFFERENCE FOR INTERIOR POINTS.

                  DO  L=TOP+INC,BOTM,INC
                      DP(L) = (  G(L+INC)- G(L-INC) ) 
     +                      / ( PR8(L+INC)-PR8(L-INC) )
                  END DO

              END IF

              DP(BOT) = (  G(BOT)- G(BOTM) ) 
     +                / ( PR8(BOT)-PR8(BOTM) )

              IF (LOGP)                                        THEN
                  ! SINCE d(LN(P)) = dP/P, dX/dP = dX/d(LN(P)) / P
                  DP(1:NLEV) = DP(1:NLEV) / EXP( PR8(1:NLEV) )
              END IF

              GGC(1:NLEV,I) = DP(1:NLEV) ! SAVE RESULTS IN 3D COLUMN MODE.

  200     CONTINUE

          ! RE-ORDERING OF 3D RESULTS FOR OUTPUT.
          DO  I=1,NWDS ; GG(I,1:nlev) = GGC(1:nlev,I) ; END DO

***        SAVE GG ON FILE XOUT.

          READ(NAME,0004) IBUF(3)

          IF (PKTYP == 'SQ') CALL SETKINDi( VKIND )
          CALL PUTSET2( 2, GG, LEV,NLEV, IBUF,MAXW )

      NR = NR+NLEV
      GOTO 100 

***    E.O.F. ON INPUT.

 0908 IF (IO.NE.0) WRITE(6,6008) IO
      CALL                                         XIT( VERBEX ,-8 )
 0911 CALL                                         XIT( VERBEX ,-11)
 0920 IF (IO.NE.0) WRITE(6,6020) IO
      CALL                                         XIT( VERBEX ,-20)
*---------------------------------------------------------------------
 0004 FORMAT(A4)
 0005 FORMAT(BN,I5)
 0020 FORMAT(BN,E20.0)

 6003 FORMAT('0Dxdp on ',A4,2X,A4)
 6004 FORMAT(' Levels should be varying monotonically.')
 6005 FORMAT(' Found illegal KIND value =',I5)
 6008 FORMAT(' Dxdp reports I/O error number ',I5/)
# include "toc_gest_formats.cdk"
 6020 FORMAT(' Unable to read A,B in aabb.nml namelist file,',
     +       ' error no.',I5/)
# include "set_a_b_formats.cdk"
 6023 FORMAT(' Unrecognized -def argument value... ',A/)

 6000 FORMAT(' Dxdp will use weighted differences.')
 6099 FORMAT(' Dxdp will use log-pressure weighted differences.')
 6100 FORMAT('0',I5,' levels = ...'/(15X,16I6))
 6110 FORMAT('  Using A and B from file aabb.nml'/)
 6150 FORMAT('...  Dxdp input file is empty.')
 6200 FORMAT(' Dxdp read',I6,' fields.')
 6300 FORMAT(' Dxdp is stripping label/character records...')
 6400 FORMAT('  Levtyp = ',A4,', lay = ',I5,', coord=',1X,A4,
     +       ', p.lid (pa)=',F10.3/:'  p.ref (pa)=',F10.3,
     +       ', R (exponent)=',F10.3:', R2 (exponent)=',F10.3)

      END 
#     endif
