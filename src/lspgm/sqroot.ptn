#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      sqroot  XIN XOUT OUTPUT [-NA]
*
*
*     AUTHOR  - S.CROZIER, JUL 26/82.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/sqroot.ptn,v 4.18 2014/09/25 20:20:54 dugas Exp $
*
* 
*     PURPOSE - CALCULATE THE SQUARE ROOT OF ANY KIND OF NUMERICAL 
*               INPUT FIELD, COMPLEX OR REAL.
*
*     NOTE    - THE SQUARE ROOT OF ZERO IS LEFT AS ZERO 
* 
*
*     INPUT FILE... 
*      XIN  = FILE OF FIELDS TO BE RAISED TO THE POWER 1/2 
* 
*     OUTPUT FILE... 
*      XOUT = FILE CONTAINING THE SQUARE ROOT OF XIN 
*
*
*     NOTE THAT MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER
*     THE "MISSING_VALUE" ENVIRONMENT VARIABLE OR THE "-mvalue"
*     COMMAND-LINE ARGUMENT. PLEASE SEE THE R.DIAG WEB
*     DOCUMENTAION FOR MORE DETAILS.
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       2 REAL NEGATIVE DATA AND "-NA" NOT SPECIFIED
*       3 UNABLE TO READ FILE XIN
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM sqroot
*    +            ( XIN,        XOUT,      OUTPUT,
*    +       TAPE1= XIN, TAPE2= XOUT,TAPE6=OUTPUT)
 
*     $Log: sqroot.ptn,v $
*     Revision 4.18  2014/09/25 20:20:54  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.17  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 4.16  2011/08/24 22:17:21  dugas
*     Permettre des grilles de tailles differentes.
*
*     Revision 4.15  2008/07/24 19:42:59  dugas
*     Utiliser CALCEPS8 plutot que CALCEPS.
*
*     Revision 4.14  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.13  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.12  2006/07/17 21:48:51  dugas
*     Correction (boguelet) a la modif precedente.
*
*     Revision 4.11  2006/07/17 21:36:14  dugas
*     Tenir compte de MVALUE pour le calcul de EPSI (eg. petite valeur).
*
*     Revision 4.10  2006/07/04 17:53:21  dugas
*     Ajouter le support des donnees manquantes par le biais soit
*      du parametre "-mvalue valeur [epsilon]", soit de la variable
*      d'environnement "MISSING_VALUE=valeur", ou "valeur" est le
*      nombre reel denotant une valeur manquante et "epsilon" est
*      le facteur de precision utilise dans les comparaisons. La
*      valeur par defaut de epsilon est 1%. La seconde methode a
*      preseance sur la premiere.
*
*     Revision 4.9  2005/04/14 18:30:27  dugas
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.8  2003/07/05 14:52:24  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.7  2003/05/23 20:59:06  dugas
*     Allouer un champs de travail supplementaire
*
*     Revision 4.6  2002/09/17 17:58:22  dugas
*     Ajouter le mode "no abort" avec la  cle -na. Dans ce cas,
*      les valeurs negatives vont generer des resultats nuls.
*
*     Revision 4.5  2000/08/29 15:01:59  armnrbd
*     Utiliser CALCEPS pour trouver les valeurs negatives qui
*      peuvent etre negligees suite a des imprecisions dues
*      aux compacteurs et/ou a l'I/O.
*
*     Revision 4.4  1998/07/03 02:26:41  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1997/09/26  17:39:23  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.2  1997/09/23  15:34:03  armnrbd
*     Activer le mode de calcul a 64 bits.
*
*     Revision 4.1  1996/02/29  20:44:21  armnrbd
*     Imprimer plus d'informations lors du traitement du cas MAXW=0
*     et aussi quand le programme se mets a ignorer les LABLs.
*
*     Revision 4.0  1994/11/17  14:22:03  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:08:23  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:11  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.4  93/01/07  15:16:13  armnrbd
*     Corriger la sequence d'appel a ISMIN.
*     
*     Revision 1.3  92/11/23  13:50:51  armnrbd
*     Deuxieme iteration avec GETSIZ/GETSIZ2.
*     
*     Revision 1.2  92/03/17  15:09:44  armnrbd
*     Ajouter "Header" dans documentation.
*     
*     Revision 1.1  92/03/13  09:46:30  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:41:59  armnrbd
*     Initial revision
*     

***    MAY 14 1983 - R.LAPRISE **ET** NOV 27 1980 - J.D.HENDERSON 

***    HISTORIQUES DES MODIFICATIONS:

***    14 NOV 1990 - B.DUGAS, RPN : VERSION CY920.
***    11 DEC 1990 - B.DUGAS, RPN : ALLOCATION DYNAMIQUE DE MEMOIRE.
***    18 JAN 1991 - B.DUGAS, RPN : AJOUTER UN APPEL A GETLIGN.
***    05 MAI 1991 -    "      "  : UTILISER GETSET2 PLUTOT QUE GETFLD2;
***                                 CORRIGER LE TRAITEMENT DES COMPLEXES.
***    12 MAR 1992 - B.DUGAS, RPN : ENLEVER REFERENCE A UNIT5/INPUT.

*---------------------------------------------------------------------
      IMPLICIT     none

      INTEGER      MAXLEV
      PARAMETER  ( MAXLEV = 999 )

      CHARACTER    TYPE*4,MESSAG*10
      LOGICAL      OK,SPEC,ERR,MVALUE
      REAL*8       GREAL,GIMAG,HOLD,EPSILON,MISFLAG,EPSI
      INTEGER      JBUF(taille_entete),LEV(MAXLEV),NF,MAXW,NR,
     +             JPAK,NLEV,NLEVG,I,L,LIG,POS1,POS2, IER,
     +             LEN,NWDS,NWDSG, CMPL

      INTEGER,     DIMENSION(:), ALLOCATABLE         :: IBUF,MG
      REAL*8,      DIMENSION(:), ALLOCATABLE,TARGET  :: G
      REAL*8,      DIMENSION(:),             POINTER :: SQ

      LOGICAL               NOABORT
      COMMON      /ZZABORT/ NOABORT

      REAL*8       CALCEPS8
      INTEGER      GETSIZ2
      LOGICAL      SETIO64
      EXTERNAL     GETSIZ2,JCLPNT,XIT,GETSET2,
     +             PUTSET2,CMPLBL,SETIO64,
     +             CALCEPS8,MISPAR

      CHARACTER    NOMPRG*256
      COMMON      /PROGNAM/ NOMPRG

      DATA         MESSAG / 'AUCUN' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/sqroot.ptn,v $'

*---------------------------------------------------------------------
***    ACCEDER LES FICHIERS D'E/S.

      NR = 0
      NF = 3

      CALL JCLPNT( NF, 1,2, 6 )

      CALL SETRABT( '&NON' )

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.) 

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFERS.

  050 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )
      IF (MAXW.LE.0) GOTO 903

      WRITE(TYPE,4) JBUF(1)
      IF (TYPE.EQ.'ZONL') NWDS = JBUF(5)

      ALLOCATE( IBUF(2*LEN),MG(NWDS*NLEV), STAT=IER )
      ALLOCATE( G(MAX( MAXW,NWDS*NLEV )), STAT=IER )

      SQ => G

      DO  I=1,NWDS*NLEV
          MG(I) = 1
      END DO

      IF (NR.NE.0) CALL PRTLAB( JBUF )

      NWDSG = NWDS

***    READ THE NEXT SET OF GRIDS FROM FILE XIN. 

  100 CALL GETSET2( 1, G,LEV,NLEVG, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( IBUF,G,MG, STAT=IER )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT(' Sqroot ', 0 ) 

          END IF

***        CHECK MISSING VALUE PARAMETRES.

          CALL MISPAR( MVALUE,MISFLAG,EPSILON )
          IF (MVALUE) EPSILON = ABS( MISFLAG )*EPSILON

***        BY-PASS (I.E. STRIP) LABEL/CHARACTER RECORDS.

          WRITE(TYPE,4) IBUF(1) 
          IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR')              THEN
              IF (MESSAG.NE.'deja donne')                      THEN
                  WRITE(6,6035)
                  MESSAG  = 'deja donne'
              END IF
              GOTO 100
          END IF

***        DETERMINE THE TYPE OF THE FIELD (REAL OR COMPLEX DATA).

          SPEC = (TYPE.EQ.'SPEC' .OR.
     +            TYPE.EQ.'FOUR' .OR.
     +            TYPE.EQ.'CMPL')

          CMPL = 1 ; IF (SPEC) CMPL = 2

***        ENSURE THAT NWDSG IS PROPERLY DEFINED.

          NWDSG = CMPL*IBUF(5)*IBUF(6)
          IF (TYPE == 'ZONL') NWDSG = IBUF(5)

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

***        VERIFY SIZES.

          CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

          IF (.NOT.OK .OR. NLEV.LT.NLEVG)                      THEN
              IF (NWDS*NLEV < NWDSG*NLEVG)                     THEN
                  DEALLOCATE( IBUF,G,MG, STAT=IER )
                  CALL PRECEDE( 1,NLEVG )
                  GOTO 050
              END IF
          END IF

          IF (MVALUE)                                          THEN

***            CHECK FOR MISSING VALUES in G. TRACK THEM IN MG.

              DO  I=1,NWDSG*NLEVG
                                                      MG(I) = 1
                  IF (ABS( G(I)-MISFLAG ).LE.EPSILON) MG(I) = 0
              END DO

          END IF

***        SET SQ = SQRT( G ).

          IF (SPEC)                                            THEN

***            COMPLEX DATA.

              DO 200 L=1,NLEVG
                  LIG = (L-1)*NWDSG
                  DO  I=1,NWDSG,2

                      IF (MG(I).EQ.0 .OR. MG(I+1).EQ.0) CYCLE

                      GREAL = G(LIG+I)
                      GIMAG = G(LIG+I+1)

***                    CONSIDER ...

                      IF (GIMAG.NE.0.)                         THEN

                          IF (GREAL.NE.0.)                     THEN

                              HOLD  =   SQRT( 0.5 
     +                              * ( ABS( DCMPLX( GREAL, GIMAG ) )
     +                              -   GREAL ) )

                          ELSE

                              HOLD  =   SQRT( 0.5 * ABS( GIMAG ) )

                          END IF

                          GREAL =   GIMAG / ( 2. * HOLD )
                          GIMAG =   HOLD

                      ELSE IF (GREAL.GE.0.)                    THEN

                          GREAL =   SQRT( GREAL )

                      ELSE 

                          GIMAG =   SQRT( -GREAL )
                          GREAL =   0. 

                      END IF

                      SQ(LIG+I)   =  GREAL
                      SQ(LIG+I+1) =  GIMAG

                  END DO
  200         CONTINUE

          ELSE

***            REAL DATA.

              ERR = .FALSE.

              DO  I=1,NWDSG*NLEVG
                  IF (MG(I).EQ.0) CYCLE
                  IF (G(I).LT.0.)                              THEN
                      ERR = .TRUE.
                      GOTO 300
                  END IF
                  SQ(I) = SQRT( G(I) )
              END DO

  300         IF (ERR)                                         THEN
                  ERR  =.FALSE.
                  POS2 = 0
                  DO  L=1,NLEVG
                      POS1 = POS2
  400                 POS1 = POS1+1
                      IF (MG(POS1).EQ.0
     +               .AND.   POS1 .LE.POS2+NWDSG) GOTO 400
                      POS2 = POS2+NWDSG
                      IF (POS1.LE.POS2)
     +                    EPSI = CALCEPS8( G(POS1),POS2-POS1+1,IBUF(8) )
                      DO  I=POS1,POS2
                          IF (MG(I).EQ.0) CYCLE
                          IF (G(I)  .LT. 0.0)                  THEN
                              IF (NOABORT .OR.
     +                            ABS( G(I) ).LE.EPSI )        THEN
                                  G(I) = 0.0
                              ELSE
                                  CALL             XIT(' Sqroot ',-2 )
                              END IF
                          END IF
                          SQ(I) = SQRT( G(I) )
                      END DO
                  END DO
              END IF
 
          END IF

***        SAVE G ON FILE XOUT.

          CALL PUTSET2( 2, SQ, LEV,NLEVG, IBUF,MAXW )

      NR = NR+NLEVG
      GOTO 100 

***   E.O.F. ON UNIT #1.

  903 CALL                                         XIT(' Sqroot ',-3 )

*---------------------------------------------------------------------
    4 FORMAT(A4)

 5010 FORMAT(10X,E10.0)
 6010 FORMAT('0 Sqroot read',I6,' records.')
 6035 FORMAT(' Sqroot is stripping label/character records...')

      END 
#     endif
