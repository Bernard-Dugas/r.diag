#     if !defined (longitude_maximale)
#         define   longitude_maximale 9999
#     endif
#     if !defined (latitude_maximale)
#         define   latitude_maximale 4999
#     endif
#     include "diagmacros.cdk"
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      zoncov  GGIN1 GGIN2 ZXC OUTPUT [ -def ] [-lat VAL1 -name VAL2]
*      zonvar  GGIN1 ZXV       OUTPUT [ -def ] [-lat VAL1]
*
*
*     DESCRIPTION...
*      zoncov - COMPUTES ZONAL COVARIANCES OF TWO GRID SETS
*      zonvar - COMPUTES ZONAL VARIANCES OF A GRID SET 
* 
*
*     AUTHOR  - J.D.Henderson, NOV 5/80.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/zoncov.ptn,v 4.17 2014/09/25 20:20:56 dugas Exp $
*
* 
*     PURPOSE - COMPUTES A SET OF CROSS-SECTIONS CONTAINING THE ZONAL 
*               VARIANCE/COVARIANCE OF THE ONE OR TWO INPUT MULTI-LEVEL
*               GRID FILES.
*
*     NOTES   - 1) The grid files do not have to be pre-processed by
*                  ZONDEV. ZONCOV/ZONVAR can remove the zonal means
*                  from input files when the "-def" key is specified.
*               2) By default, when GGIN1 and GGIN2 contain different
*                  variables, the output variable name is set to "COV".
*                  this behavior can be overwritten by using the "-name"
*                  command-line parametre to specify an altername name.
*               3) The maximum number of levels is 999.
*               4) For complex fields, the following will be performed:
*               >> ZONAVG( GGIN1 * COMPLEX CONJUGATE( GGIN2 ) ) << or
*               >> ZONAVG( GGIN1 * COMPLEX CONJUGATE( GGIN1 ) ) <<,
*                  depending on which of ZONCOV or ZONVAR was invoked.
* 
*
*     INPUT FILES...  
*      GGIN1  = FIRST SET OF MULTI-LEVEL GRIDS. 
*      GGIN2  = SECOND SET OF MULTI-LEVEL GRIDS. 
* 
*     OUTPUT FILE... 
*      ZXC    = CORRESPONDING SERIES OF ZONAL COVARIANCES.
*      ZXV    = CORRESPONDING SERIES OF ZONAL VARIANCES.
*
*
*     MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER THE "MISSING_VALUE"
*     ENVIRONMENT VARIABLE OR THE "-mvalue" COMMAND-LINE ARGUMENT. PLEASE
*     SEE THE R.DIAG WEB DOCUMENTAION FOR MORE DETAILS.
*
*
*     (OPTIONAL) PARAMETRE (ONLY USED WITH GEM Z-TYPE INPUT GRIDS) ...
*
*      LAT  = NUMBER OF LATITUDES IN THE OUTPUT ZONAL CROSS-SECTIONS.
*             DEFAULTS TO THE MINIMUM OF THE TWO HORIZONTAL DIMENSIONS
*             OF THE INPUT FIELDS.
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 PROBLEM WITH INPUT FILES
*       2 FOUND INPUT TYPE OTHER THAN 'GRID' OR 'CMPL' IN FILE GGIN1
*       3 PREMATURE EOF ON FILE GGIN1
*       4 MORE THAN ONE SIZE IN FILE GGIN1
*       5 MISSING RECORD IN FILE GGIN2
*       6 CORRESPONDING RECORDS NOT THE SAME SIZE
*       7 ERROR READING INPUT PARAMETRE
*       8 OPERATING/INPUT MODE MITMATCH
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM zoncov
*    +       (      GGIN1,       GGIN2,       ZXC,       OUTPUT,
*    +        TAPE1=GGIN1, TAPE2=GGIN2, TAPE3=ZXC, TAPE6=OUTPUT )
 
*     $Log: zoncov.ptn,v $
*     Revision 4.17  2014/09/25 20:20:56  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.16  2014/01/09 19:32:01  dugas
*     Faire un UP2LOW sur le resultat de l'appel a GETVERB.
*
*     Revision 4.15  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 4.14  2013/02/07 21:57:11  bernard
*     Corrections pour GFORTRAN.
*
*     Revision 4.13  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.12  2007/12/20 21:17:51  dugas
*     Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.11  2006/07/04 17:53:21  dugas
*     Ajouter le support des donnees manquantes par le biais soit
*      du parametre "-mvalue valeur [epsilon]", soit de la variable
*      d'environnement "MISSING_VALUE=valeur", ou "valeur" est le
*      nombre reel denotant une valeur manquante et "epsilon" est
*      le facteur de precision utilise dans les comparaisons. La
*      valeur par defaut de epsilon est 1%. La seconde methode a
*      preseance sur la premiere.
*
*     Revision 4.10  2005/07/28 19:41:54  dugas
*     Corriger le traitement du niveau de compaction a la sortie.
*
*     Revision 4.9  2005/04/14 18:33:26  dugas
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.8  2004/11/12 18:14:07  dugas
*     - Augmenter la taille maximale des grilles.
*     - Ajouter le point d'entree ZONVAR.
*     - Ajouter le parametre de ligne de commande '-name' pour ZONCOV.
*     - Ajouter le support des donnees sur grilles de type A,B,L et Z.
*
*     Revision 4.7  2003/09/15 15:49:33  dugas
*     Enlever toutes references a MEMOIR.
*
*     Revision 4.6  2003/07/05 14:53:29  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.5  2000/03/22 19:29:20  armnrbd
*     Ajouter un include pour definir le macro AIMAG (f77 vs f90).
*
*     Revision 4.4  2000/03/20 22:41:31  armnrbd
*     Racourcir la sequence d'appel a JCLPNT.
*
*     Revision 4.3  2000/03/20 21:46:21  armnrbd
*     Remplacer l'intrinseque IMAG par AIMAG.
*
*     Revision 4.2  1998/07/03 02:26:49  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.1  1997/09/26  17:39:34  armnrbd
*     Remplacer buf(16) par buf(28 ).
*
*     Revision 4.0  1994/11/17  14:22:55  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:57:36  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.3  92/11/19  13:47:26  armnrbd
*     Deuxieme iteration avec GETSIZ/GETSIZ2.
*     
*     Revision 1.2  92/10/13  15:00:31  armnrbd
*     Compaction par defaut passe a 32 bits/mots (-32).
*     
*     Revision 1.1  92/04/03  21:58:29  armnrbd
*     Accumulateur a 64 bits.
*     
*     Revision 1.0  92/03/31  16:06:45  armnrbd
*     Initial revision
*     
***    MAR 31/92 - B.DUGAS, RPN. (VERSION CY920/IRIX F77)
***    NOV  5/80 - J.D.HENDERSON 

*-----------------------------------------------------------------------
      IMPLICIT     none

      INTEGER,     PARAMETER :: HEAD = taille_entete
      INTEGER,     PARAMETER :: MAXI = longitude_maximale
      INTEGER,     PARAMETER :: MAXJ = latitude_maximale
      INTEGER,     PARAMETER :: MAXLEV = 999

      COMPLEX*16   A
      CHARACTER    GRTYP,ZTYP,verbe*8
      REAL         ALON(MAXI),ALAT(MAXJ)
      CHARACTER*4  KIND,COV,VALEUR,PKTYP
      LOGICAL      OK,ZEROM,WINDS,ZONV,MVALUE,IN1MISS,IN2MISS
      REAL*8       WEIGHT,THETA,COST,SINT,MWF(MAXI),MWG(MAXI),
     +             ZC,CC,F,G,C,D,OVILG,ZF(MAXI),ZI1,FMISS,
     +             ZG(MAXI),ZCOV,ZMC(2),ZMD(2),ZI2,EPSIL
      INTEGER      LBUF(HEAD),LPAK, KBUF(HEAD),KPAK, 
     +             IBUF,JBUF,NR,NF,MAXW,MAXW1,MAXW2, MS,
     +             LEN,LEN1,LEN2,NWDS,LEV(MAXLEV),NLEV,
     +             NLEV0,NLEV1,ILG,ILG1,ILAT,MEM2,MEM3,
     +             I,J,L,NI,NZC,TIME,NAME,LEVL,IER,CMPL,
     +             NBIN,IO,RANK, IG1,IG2,IG3,IG4,MSF,
     +             ZIG1,ZIG2,ZIG3,ZIG4, ZNI,ZNJ,MSG,
     +             NIN,NLIN,NLOUT,PAK,MSC,MSD

      POINTER    ( IB,  IBUF(8) ),( JB,  JBUF(8) )
      POINTER    ( PF,     F(1) ),( PF,   C(2,1) )
      POINTER    ( PG,     G(1) ),( PG,   D(2,1) )
      POINTER    ( PZ,    ZC(1) ),( PZ,  CC(2,1) )
      POINTER    ( PR,  RANK(1) ),( PCT, COST(1) )
      POINTER    ( PW,WEIGHT(1) ),( PST, SINT(1) )
      POINTER    ( PT, THETA(1) )

      CHARACTER*4  GETYP,GETHIC
      EXTERNAL     GETYP,GETHIC

      INTEGER      GETSIZ2,GETHIGH
      LOGICAL                      RPBLOC,SETIO64
      EXTERNAL     GETSIZ2,GETHIGH,RPBLOC,SETIO64

      EXTERNAL     MACSPE,JCLPNT,GETLIGN,BURNF,XIT,  
     +             GETSET2,PUTSET2,SETLAB,PRECEDE,
     +             PUTHIGH,CMPLBL,GETZREF,GETZDES,
     +             HPALLOC,HPDEALLC,D_ZONGINI,
     +             MISPAR

      CHARACTER    NOMPRG*256
      COMMON      /PROGNAM/ NOMPRG

      DATA         COV / 'COV' /, GRTYP / 'G' /
*====================================================================
      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/zoncov.ptn,v $'
*---------------------------------------------------------------------

      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 4
      CALL JCLPNT( NF, 1,2,3, 6 )

      NR = 0

      ZEROM = .FALSE.
      WINDS = .FALSE.
      NBIN  =  0.

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

***    WHAT OPERATING MODE ?

      CALL GETVERB( verbe ) ; CALL up2low( VERBE,VERBE )

                             ZONV = .FALSE.
      IF (verbe.EQ.'zonvar') ZONV = .TRUE.

      IF ((     ZONV .AND. NF.NE.2) .AND.
     +    (.NOT.ZONV .AND. NF.NE.3)) CALL          XIT( verbe, -8 )

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('LAT',VALEUR)
          IF (OK) READ(VALEUR,'(BN,I5)',ERR=907,IOSTAT=IO) NBIN

          OK = RPBLOC('NAME',VALEUR)
          IF (OK) COV = VALEUR

          OK = RPBLOC('DEFAUT',VALEUR)
          IF (OK) ZEROM = .TRUE.

          IF (ZEROM) WRITE(6,6000) verbe

      END IF

***    DETERMINE THE GRID SIZE.

  050 MAXW1 = GETSIZ2( 1, KBUF,LEN1,NWDS,KPAK, LEV,NLEV )

      IF (.NOT.ZONV)                                           THEN

          MAXW2 = GETSIZ2( 2, LBUF,LEN2,NWDS,LPAK, LEV,NLEV1 )

          IF (MAXW1.LE.  0    .OR.
     +        MAXW2.LE.  0    .OR.
     +        NLEV .NE.NLEV1  .OR.
     +        NLEV .GT.MAXLEV )                                THEN
              WRITE(6,6001) MAXW1,NLEV,MAXW2,NLEV1
              CALL                                 XIT( verbe ,-1 )
          END IF

          LEN  = MAX( LEN1, LEN2  )

          CALL CMPLBL( 0,KBUF, 0,LBUF, OK )

          IF (.NOT.OK)                                         THEN
               CALL PRTLAB( KBUF ) ; CALL PRTLAB( LBUF )
               CALL                                XIT( verbe ,-1 )
          END IF

      ELSE

          IF (MAXW1.LE.  0    .OR.
     +        NLEV .GT.MAXLEV )                                THEN
              WRITE(6,6011) MAXW1,NLEV
              CALL                                 XIT( verbe ,-1 )
          END IF

          LEN  = LEN1

      END IF

      WRITE(KIND,4) KBUF(1)

      IF (KIND.NE.'GRID' .AND.
     +    KIND.NE.'SUBA' .AND.
     +    KIND.NE.'CMPL')                                      THEN
          WRITE(6,6002) KIND
          CALL                                     XIT( verbe ,-2 )
      END IF

                          CMPL = 1
      IF (KIND.EQ.'CMPL') CMPL = 2

      IF (PKTYP.EQ.'SQ') GRTYP = GETHIC( 'GRTYP',KBUF )

      ILG1 = KBUF(5) 
      ILAT = KBUF(6)

      LEN  = MAX( LEN, CMPL*(ILAT+1)*NLEV+HEAD+2 )
      MAXW = LEN-HEAD

***    ASK FOR WORKING MEMORY.

      NWDS =      NWDS     /CMPL
      MEM2 = MAX( NWDS*NLEV*CMPL, MAXW )
      MEM3 =      ILAT*NLEV*CMPL

      CALL HPALLOC( PF, 2*(LEN+MEM2)+MEM3+3*NWDS,IER,8 ) 

      PG = LOC(      F(MEM2+1) ) 
      PZ = LOC(      G(MEM2+1) ) 
      PT = LOC(     ZC(MEM3+1) ) 
      PW = LOC(  THETA(NWDS+1) ) 
      PR = LOC( WEIGHT(NWDS+1) ) 
      IB = LOC(   RANK(NWDS+1) ) 
      JB = LOC(   IBUF(LEN +1) ) 

***    POSSIBLY ACCOUNT FOR THE DIFFERENT GRID TYPES.

      IF (GRTYP.EQ.'Z')                                        THEN

          IG1 = GETHIGH( 'IG1',KBUF )
          IG2 = GETHIGH( 'IG2',KBUF )
          IG3 = GETHIGH( 'IG3',KBUF )
          IG4 = GETHIGH( 'IG4',KBUF )

***        RETRIEVE THE X- AND Y-DIRECTIONAL GEM GRID INFO.

          CALL GETZREF( 1, '>>',ALON )
          CALL GETZREF( 1, '^^',ALAT )

***        RETRIEVE ASSOCIATED ROTATION AND POLE INFO.

          CALL GETZDES( ZTYP, ZIG1,ZIG2,ZIG3,ZIG4, ZNI,ZNJ )

***        DEFINE RANK,WEIGHT AND THETA.

          IF (NBIN.EQ.0) NBIN = MIN( ILAT,ILG1 )
                         NBIN = MIN( NBIN,MAXI )

          CALL D_ZONGINI( RANK,WEIGHT,THETA,
     +                    NBIN,ILG1,ILAT,ALON,ALAT,
     +                    ZTYP,ZIG1,ZIG2,ZIG3,ZIG4 )

***        PRE-CALCULATE SIN AND COS THETA.

          IF (WINDS)                                           THEN
               DO  L=1,NWDS
                   COST(L) = COS( THETA(L) )
                   SINT(L) = SIN( THETA(L) )
              END DO
          END IF

      ELSE IF (GRTYP.EQ.'N' .OR. GRTYP.EQ.'S')                 THEN

***        POLAR-STEREOGRAPHIC ARRAYS ARE NOT SUPPORTED.

          WRITE(6,6002) GRTYP
          CALL                                     XIT( verbe ,-2 )

      ELSE

***        LATITUDE-LONGITUDE ARRAYS (TYPE A,B,G OR L).

          NBIN = ILAT

          IF (GRTYP.EQ.'A' .OR. GRTYP.EQ.'G')                  THEN

              ILG  = ILG1 - MOD( ILG1,2 )

          ELSE IF (GRTYP.EQ.'B')                               THEN

              ILG = ILG1-1

          ELSE IF (GRTYP.EQ.'L')                               THEN

              ILG = ILG1

          ELSE

              WRITE(6,6002) GRTYP
              CALL                                 XIT( verbe ,-2 )

          END IF

          OVILG = 1.0/DBLE( ILG )

      END IF

***    READ THE NEXT GRID AND ZONAL MEAN.

  100 CALL GETSET2( 1, F, LEV,NLEV0, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  CALL                             HPDEALLC(PF,IER,0 )
                  GOTO 050
              END IF

              WRITE(6,6150) verbe,NR

              IF (NR.EQ.0)                                     THEN
                  CALL                             XIT( verbe ,-3 ) 
              ELSE IF (NR.GT.1)                                THEN
                  CALL PRTLAB( IBUF )
              END IF

              CALL                                 XIT( verbe , 0 )

          END IF

***        CHECK MISSING VALUE PARAMETRES FOR FILE GGIN1.

          CALL MISPAR( IN1MISS,FMISS,EPSIL )
          IF (IN1MISS) EPSIL = ABS( FMISS )*EPSIL

***        IGNORE LABEL OR CHARACTER RECORDS.

          WRITE(KIND,4) IBUF(1)
          IF (KIND.EQ.'LABL' .OR. KIND.EQ.'CHAR') GOTO 100

***        VERIFY DIMENSIONS AND TYPE.

          CALL CMPLBL( 0,IBUF, 0,KBUF, OK )

          IF (.NOT.OK .OR.
     +        NLEV0   .GT. NLEV)                               THEN
              WRITE(6,6004) NR,NLEV0 ; CALL PRTLAB( IBUF )
          END IF

                          TIME = IBUF(2)
                          NAME = IBUF(3)
                          LEVL = 1
          IF (NLEV0.EQ.1) LEVL = IBUF(4)

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          IF (.NOT.ZONV)                                       THEN

***            READ THE OTHER CORRESPONDING GRID FIELD.
***            DO SOME CHECKING FOR CONSISTENCY.

  200        CALL GETSET2( 2, G, LEV,NLEV1, JBUF,MAXW,OK )

              IF (.NOT.OK)                                     THEN
                  IF (MAXW.EQ.0)                               THEN
                      CALL                         HPDEALLC(PF,IER,0 )
                      CALL PRECEDE( 1,NLEV0 )
                      GOTO 050
                  END IF
                  CALL                             XIT( verbe ,-5 )
              END IF

***            CHECK MISSING VALUE PARAMETRES FOR FILE GGIN2.

              CALL MISPAR( IN2MISS,FMISS,EPSIL )
              IF (IN2MISS) EPSIL = ABS( FMISS )*EPSIL

              MVALUE = (IN1MISS .OR. IN2MISS)

***            AGAIN, IGNORE LABEL OR CHARACTER RECORDS.

              WRITE(KIND,4) JBUF(1)
              IF (KIND.EQ.'LABL' .OR. KIND.EQ.'CHAR') GOTO 200

***            MAKE SURE THAT THE GRID FIELDS ARE THE SAME SIZE. 

              CALL CMPLBL( 0,IBUF, 0,JBUF, OK ) 

              IF (.NOT.OK .OR. NLEV0.NE.NLEV1)                 THEN
                  CALL PRTLAB( IBUF ) ; CALL PRTLAB( JBUF )
                  CALL                             XIT( verbe ,-6 ) 
              END IF

              IF (NR.EQ.0) CALL PRTLAB( JBUF )

          ELSE

              MVALUE = IN1MISS

***            COPY F INTO G AND PROCEED AS IF ZONV WAS FALSE.

              DO  NIN=1,ILG1*ILAT*NLEV0*CMPL
                  G(NIN) = F(NIN)
              END DO

          END IF

***        COMPUTE THE ZONAL COVARIANCE FOR THESE TWO GRIDS. 

          IF (GRTYP.EQ.'A' .OR.
     +        GRTYP.EQ.'B' .OR.
     +        GRTYP.EQ.'G' .OR.
     +        GRTYP.EQ.'L' )                                   THEN

***            NON-ROTATED LAT-LON GRIDS.

              DO  L=0,NLEV0-1

                  DO  J=0,ILAT-1

                      NI   = L * NWDS + J * ILG1 
                      NZC  = L * ILAT + J + 1

                      IF (CMPL.EQ.1)                           THEN

***                        F AND G ARE REAL GRIDS.

                          ZI1  = 0.0
                          ZI2  = 0.0

                          IF (ZEROM)                           THEN

***                            CALCULATE F AND G ZONAL MEANS.
***                            SAVE THEM IN ZI1 AND ZI2.

                              IF (MVALUE)                      THEN

***                                ACCOUNT FOR MISSING VALUES IN F AND G.

                                  MSF = 0
                                  MSG = 0

                                  DO  I=NI+1,NI+ILG

                                      IF (ABS( F(I)-FMISS ).GT.EPSIL)
     +                                THEN
                                          ZI1 = ZI1+F(I)
                                          MSF = MSF+1
                                      END IF

                                      IF (ABS( G(I)-FMISS ).GT.EPSIL)
     +                                THEN
                                          ZI2 = ZI2+G(I)
                                          MSG = MSG+1
                                      END IF

                                  END DO

                                  IF (MSF.NE.0)                THEN
                                      ZI1 = ZI1/MSF
                                  ELSE
                                      ZI1 = FMISS
                                  END IF

                                  IF (MSG.NE.0)                THEN
                                      ZI2 = ZI2/MSG
                                  ELSE
                                      ZI2 = FMISS
                                  END IF

                              ELSE

***                                STANDARD CASE (NO MISSING VALUES).

                                  DO  I=NI+1,NI+ILG
                                      ZI1 = ZI1+F(I)
                                      ZI2 = ZI2+G(I)
                                  END DO

                                  ZI1  = ZI1*OVILG
                                  ZI2  = ZI2*OVILG

                              END IF

                          END IF

                          ZCOV = 0.0

                          IF (MVALUE)                          THEN

***                            AGAIN, ACCOUNT FOR MISSING VALUES IN F AND G.

                              MS= 0

                              IF (ABS( ZI1-FMISS ).GT.EPSIL
     +                       .AND.ABS( ZI2-FMISS ).GT.EPSIL)   THEN

                                  DO  I=NI+1,NI+ILG

                                      IF (ABS( F(I)-FMISS ).GT.EPSIL
     +                               .AND.ABS( G(I)-FMISS ).GT.EPSIL)
     +                                THEN
                                          ZCOV = ZCOV +
     +                                  ( F(I)-ZI1 )*( G(I)-ZI2 )
                                          MS   = MS+1
                                      END IF

                                  END DO

                              END IF

                              IF (MS.NE.0)                     THEN
                                  ZC(NZC) = ZCOV/MS
                              ELSE
                                  ZC(NZC) = FMISS
                              END IF

                          ELSE

***                            AGAIN, STANDARD CASE (NO MISSING VALUES).

                              DO  I=NI+1,NI+ILG
                                  ZCOV = ZCOV +( F(I)-ZI1 )*( G(I)-ZI2 )
                              END DO

                              ZC(NZC) = ZCOV*OVILG

                          END IF

                      ELSE

***                        C AND D ARE COMPLEX GRIDS.

                          ZMC(1) = 0.0
                          ZMC(2) = 0.0
                          ZMD(1) = 0.0
                          ZMD(2) = 0.0

                          IF (ZEROM)                           THEN

***                            CALCULATE C AND D ZONAL MEANS.
***                            SAVE THEM IN ZMC AND ZMD.

                              IF (MVALUE)                      THEN

***                                ACCOUNT FOR MISSING VALUES IN C AND D.

                                  MSC = 0
                                  MSD = 0

                                  DO  I=NI+1,NI+ILG

                                      IF (ABS( C(1,I)-FMISS ).GT.EPSIL
     +                               .AND.ABS( C(2,I)-FMISS ).GT.EPSIL)
     +                                THEN
                                          ZMC(1) = ZMC(1)+C(1,I)
                                          ZMC(2) = ZMC(2)+C(2,I)
                                          MSC    = MSC+1
                                      END IF

                                      IF (ABS( D(1,I)-FMISS ).GT.EPSIL
     +                               .AND.ABS( D(2,I)-FMISS ).GT.EPSIL)
     +                                THEN
                                          ZMD(1) = ZMD(1)+D(1,I)
                                          ZMD(2) = ZMD(2)+D(2,I)
                                          MSD    = MSD+1
                                      END IF

                                  END DO

                                  IF (MSC.NE.0)                THEN
                                      ZMC(1) = ZMC(1)/MSC
                                      ZMC(2) = ZMC(2)/MSC
                                  ELSE
                                      ZMC(1) = FMISS
                                      ZMC(2) = FMISS
                                  END IF

                                  IF (MSD.NE.0)                THEN
                                      ZMD(1) = ZMD(1)/MSD
                                      ZMD(2) = ZMD(2)/MSD
                                  ELSE
                                      ZMD(1) = FMISS
                                      ZMD(2) = FMISS
                                  END IF

                              ELSE

***                                STANDARD CASE (NO MISSING VALUES).

                                  DO  I=NI+1,NI+ILG
                                      ZMC(1) = ZMC(1)+C(1,I)
                                      ZMC(2) = ZMC(2)+C(2,I)
                                      ZMD(1) = ZMD(1)+D(1,I)
                                      ZMD(2) = ZMD(2)+D(2,I)
                                  END DO

                                  ZMC(1) = ZMC(1)*OVILG
                                  ZMC(2) = ZMC(2)*OVILG
                                  ZMD(1) = ZMD(1)*OVILG
                                  ZMD(2) = ZMD(2)*OVILG

                              END IF

                          END IF

                          CC(1,NZC) = 0.0
                          CC(2,NZC) = 0.0

                          IF (MVALUE)                          THEN

***                            AGAIN, ACCOUNT FOR MISSING VALUES IN C AND D.

                              MS = 0

                              IF (ABS( ZMC(1)-FMISS ).GT.EPSIL
     +                       .AND.ABS( ZMC(2)-FMISS ).GT.EPSIL
     +                       .AND.ABS( ZMD(1)-FMISS ).GT.EPSIL
     +                       .AND.ABS( ZMD(2)-FMISS ).GT.EPSIL)THEN

                                  DO  I=NI+1,NI+ILG

                                      IF (ABS( C(1,I)-FMISS ).GT.EPSIL
     +                               .AND.ABS( C(2,I)-FMISS ).GT.EPSIL
     +                               .AND.ABS( D(1,I)-FMISS ).GT.EPSIL
     +                               .AND.ABS( D(2,I)-FMISS ).GT.EPSIL)
     +                                THEN
                                          A         = CMPLX(
     +                                    C(1,I)-ZMC(1), C(2,I)-ZMC(2) )
     +                                              * CMPLX(
     +                                    D(1,I)-ZMD(1),-D(2,I)+ZMD(2) )
                                          CC(1,NZC) = CC(1,NZC)
     +                                              + DBLE( A )
                                          CC(2,NZC) = CC(2,NZC)
     +                                              + DIMAG( A )
                                          MS        = MS+1
                                      END IF

                                  END DO

                              END IF

                              IF (MS.NE.0)                     THEN
                                  CC(1,NZC) = CC(1,NZC)/MS
                                  CC(2,NZC) = CC(2,NZC)/MS
                              ELSE
                                  CC(1,NZC) = FMISS
                                  CC(2,NZC) = FMISS
                              END IF

                          ELSE

***                            AGAIN, STANDARD CASE (NO MISSING VALUES).

                              DO  I=NI+1,NI+ILG

                                  A = CMPLX(
     +                                C(1,I)-ZMC(1), C(2,I)-ZMC(2) )
     +                              * CMPLX(
     +                                D(1,I)-ZMD(1),-D(2,I)+ZMD(2) )
                                  CC(1,NZC) = CC(1,NZC) + DBLE( A )
                                  CC(2,NZC) = CC(2,NZC) + DIMAG( A )

                              END DO

                              CC(1,NZC) = CC(1,NZC)*OVILG
                              CC(2,NZC) = CC(2,NZC)*OVILG

                          END IF

                      END IF

                  END DO

              END DO

          ELSE IF (GRTYP.EQ.'Z')                               THEN

***            Z-GRID CASE. POSSIBLY ROTATED,
***            POSSIBLY VARIABLE RESOLUTION.

              DO  L=1,NLEV0*NBIN
                  ZC(L) = 0.
              END DO

              DO  L=0,NLEV0-1

                  NLOUT = L*NBIN
                  NLIN  = L*NWDS

                  IF (ZEROM)                                   THEN

                      ZF = 0.
                      ZG = 0.

                      IF (MVALUE)                              THEN

***                        ACCOUNT FOR MISSING VALUES IN F AND G.

                          MWF = 0.
                          MWG = 0.

                          DO  NIN=1,ILG1*ILAT
                              IF (ABS( F(NIN+NLIN)-FMISS ).GT.EPSIL)
     +                        THEN
                                  ZF (RANK(NIN) )  = ZF(RANK(NIN)) 
     +                               + F(NIN+NLIN) * WEIGHT(NIN)
                                  MWF(RANK(NIN))   = MWF(RANK(NIN))
     +                                             + WEIGHT(NIN)
                              END IF
                              IF (ABS( G(NIN+NLIN)-FMISS ).GT.EPSIL)
     +                        THEN
                                  ZG (RANK(NIN))   = ZG(RANK(NIN))
     +                               + G(NIN+NLIN) * WEIGHT(NIN)
                                  MWG(RANK(NIN))   = MWG(RANK(NIN))
     +                                             + WEIGHT(NIN)
                              END IF
                          END DO
                          DO  NIN=1,NBIN
                              IF (MWF(NIN).NE.0.)              THEN
                                  ZF(NIN) = ZF(NIN)/MWF(NIN)
                              ELSE
                                  ZF(NIN) = FMISS
                              END IF
                              IF (MWG(NIN).NE.0.)              THEN
                                  ZG(NIN) = ZG(NIN)/MWG(NIN)
                              ELSE
                                  ZG(NIN) = FMISS
                              END IF
                          END DO

                          MWF = 0.

                          DO  NIN=1,ILG1*ILAT
                              IF (ABS(  F(NIN+NLIN) -FMISS ).GT.EPSIL
     +                       .AND.ABS(  G(NIN+NLIN) -FMISS ).GT.EPSIL
     +                       .AND.ABS( ZF(RANK(NIN))-FMISS ).GT.EPSIL
     +                       .AND.ABS( ZG(RANK(NIN))-FMISS ).GT.EPSIL)
     +                        THEN
                                  ZC(RANK(NIN)+NLOUT) =
     +                            ZC(RANK(NIN)+NLOUT) +
     +                            ( F(NIN +NLIN) - ZF(RANK(NIN)) ) *
     +                            ( G(NIN +NLIN) - ZG(RANK(NIN)) ) *
     +                                      WEIGHT(NIN)
                                  MWF(RANK(NIN))   = MWF(RANK(NIN))
     +                                             + WEIGHT(NIN)
                              END IF
                          END DO

                          DO  NIN=1,NBIN
                              IF (MWF(NIN).NE.0.)              THEN
                                  ZC(NIN+NLOUT) = ZC(NIN+NLOUT)/MWF(NIN)
                              ELSE
                                  ZC(NIN+NLOUT) = FMISS
                              END IF
                          END DO

                      ELSE

***                        STANDARD CASE (NO MISSING VALUES).

                          DO  NIN=1,ILG1*ILAT
                              ZF(RANK(NIN)) = 
     +                        ZF(RANK(NIN)) + F(NIN+NLIN)*WEIGHT(NIN)
                              ZG(RANK(NIN)) = 
     +                        ZG(RANK(NIN)) + G(NIN+NLIN)*WEIGHT(NIN)
                          END DO

                          DO  NIN=1,ILG1*ILAT
                              ZC(RANK(NIN)+NLOUT) =
     +                        ZC(RANK(NIN)+NLOUT) +
     +                            ( F(NIN +NLIN) - ZF(RANK(NIN)) ) *
     +                            ( G(NIN +NLIN) - ZG(RANK(NIN)) ) *
     +                                      WEIGHT(NIN)
                          END DO

                      END IF

                  ELSE

***                    DO NOT REMOVE ZONAL MEANS.

                      IF (MVALUE)                              THEN
                          DO  NIN=1,ILG1*ILAT
                              IF (ABS( F(NIN+NLIN)-FMISS ).GT.EPSIL
     +                       .AND.ABS( G(NIN+NLIN)-FMISS ).GT.EPSIL)
     +                        THEN
                                  ZC(RANK(NIN)+NLOUT) =
     +                            ZC(RANK(NIN)+NLOUT) +
     +                            F(NIN+NLIN)*G(NIN+NLIN) * WEIGHT(NIN)
                                  MWF(RANK(NIN))      =   MWF(RANK(NIN))
     +                                                +     WEIGHT(NIN)
                              END IF
                          END DO
                          DO  NIN=1,NBIN
                              IF (MWF(NIN).NE.0.)              THEN
                                  ZC(NIN+NLOUT) = ZC(NIN+NLOUT)/MWF(NIN)
                              ELSE
                                  ZC(NIN+NLOUT) = FMISS
                              END IF
                          END DO
                      ELSE
                          DO  NIN=1,ILG1*ILAT
                              ZC(RANK(NIN)+NLOUT) =
     +                        ZC(RANK(NIN)+NLOUT) +
     +                        F(NIN+NLIN) * G(NIN+NLIN) * WEIGHT(NIN)
                          END DO
                      END IF

                  END IF

              END DO

              CALL PUTHIC ('A','GRTYP',IBUF )
              CALL PUTHIGH( 0 ,'IG1'  ,IBUF )
              CALL PUTHIGH( 0 ,'IG2'  ,IBUF )
              CALL PUTHIGH( 0 ,'IG3'  ,IBUF )
              CALL PUTHIGH( 0 ,'IG4'  ,IBUF )

          END IF

***        WRITE THE GRID OF ZONAL COVARIANCES ONTO FILE 3. 

          IF (.NOT.ZONV .AND. IBUF(3).NE.JBUF(3)) READ(COV,4) IBUF(3)

                         PAK = MIN( -32,IBUF(8) )
          IF (.NOT.ZONV) PAK = MIN( PAK,JBUF(8) )

          IF (CMPL.EQ.1)                                       THEN
              CALL SETLAB( IBUF, 'ZONL',-1,' ',-1,NBIN,NLEV0,-1,PAK )
              IF (NLEV0.GT.1) IBUF(4) = 1
          ELSE
              CALL SETLAB( IBUF, ' ',-1,' ',-1,NBIN,1,-1,PAK )
          END IF

          CALL PUTSET2( NF, ZC,LEV,NLEV0, IBUF,MAXW )

      NR = NR+NLEV0

      GOTO 100 

***    ERROR READING INPUT PARAMETRE.

  907 IF (IO.NE.0) WRITE(6,6007) verbe,IO
      CALL                                         XIT( verbe ,-7 )

*-------------------------------------------------------------------- 
    4 FORMAT(A4)

 6000 format(1X,A,' will remove zonal means.')
 6001 FORMAT('0..Problems with input files...'/
     +       '   Maxw,nlev(GGIN1),maxw,nlev(GGIN2) =',4I8)
 6011 FORMAT('0..Problems with input files...'/
     +       '   Maxw,nlev(GGIN) =',2I8)
 6002 FORMAT(' First file should be typed GRID,SUBA or CMPL, found ',A)
 6004 FORMAT(' At set number ',I5,', found ',I3,' level(s) of...')
 6007 FORMAT(1X,A,' reports I/O error number ',I3,
     +       ' reading the number of output latitudes.')

 6150 FORMAT(1X,A,' read ',I5,' record(s).')

      END 
#     endif
