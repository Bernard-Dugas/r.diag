#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      xlin  XIN XOUT INPUT OUTPUT [ -a  VAL1 -b    VAL2 \ 
*                        -name VAL3 -npg VAL4 -def [VAL5] ]
*
*
*     AUTHORS - R.Laprise ET J.D.Henderson, MAY 14 1983.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/xlin.ptn,v 4.17 2014/09/25 20:20:56 dugas Exp $
*
*
*     DESCRIPTION...
*      A CCC FILE ARITHMETIC PROGRAM WHICH...
*
*      ... PRODUCES FILE XOUT = A*XIN + B
*          (WHERE BOTH XIN AND XOUT MAY CONTAIN REAL OR COMPLEX
*           DATA TYPES, BUT B MUST BE 0.0 FOR COMPLEX FILES.
*           Please see Note 2) below for mode details)
*
*
*     PARAMETERS...
*
*      A    = REAL MULTIPLICATIVE CONSTANT. 
*      B    = REAL ADDITIVE CONSTANT. 
*      NAME = NEW NAME TO BE GIVEN TO THE OUTPUT RECORDS.
*             DEFAULTS TO THE ORIGINAL NAME
*      NPG  = (OPTIONAL) OUTPUT PACKING DENSITY
*
*
*      READ( 5,5010 ) A,B,NAME,NPG
*5010  FORMAT(10X,2E10.0,1X,A4,I5)
*
*
*     NOTES: 1) MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER THE
*               "MISSING_VALUE" ENVIRONMENT VARIABLE OR THE "-mvalue"
*               COMMAND-LINE ARGUMENT. PLEASE SEE THE R.DIAG WEB
*               DOCUMENTAION FOR MORE DETAILS.
*            2) IF "-def SPECTRALB" IS SPECIFIED ON THE COMMAND-LINE,
*               A NON-ZERO VALUED B CONSTANT IS ALSO APPLIED TO SPECTRAL
*               FIELDS VIA A MODIFICATION TO THE REAL PART OF THEIR (0,0)
*               COEFFICIENT SCALED BY SQRT(2.), THE LEGENDRE NORMALISATION
*               FACTOR USED IN THE CURRENT SPECTRAL TRANSFORMS.
*            3) IF *BOTH* A AND B ARE LEFT UNSPECIFIED (AND NOT 0), *AND*
*               IF THE PROGRAM IS INVOKED IN COMMAND-LINE PARAMETER MODE,
*               THEN A AND B ARE SET TO +1.0 AND 0.0, RESPECTIVELY.
*
*
*     EXAMPLE OF INPUT CARD...
*
* XLIN          -1.0     1000. NAME
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       2 DATA TYPE IS COMPLEX AND B CONSTANT IS NOT ZERO
*       3 ERROR READING INPUT PARAMETERS
*       4 PREMATURE EOF ON XIN
*       5 UNRECOGNIZED -def ARGUMENT VALUE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM xlin
*    +            ( XIN,        XOUT,       INPUT,      OUTPUT,
*    +       TAPE1= XIN, TAPE2= XOUT, TAPE5=INPUT,TAPE6=OUTPUT)
 
*     $Log: xlin.ptn,v $
*     Revision 4.18  2016/10/28 17:15  dugas
*     - Modifications syntaxiques de type F77 --> F90.
*     - Ajouter le mode SPECTRALB pour lequel les champs spectraux
*       peuvent etre modifies par une constante B non-nulle. Dans ce
*       cas, la partie reelle du coefficient (0,0) est modifiee de
*       facon appropriee.
*
*     Revision 4.17  2014/09/25 20:20:56  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.16  2014/01/17 17:37:57  dugas
*     Modifier les declarations des fonctions externes.
*
*     Revision 4.15  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 4.14  2011/02/10 16:55:49  dugas
*     Corriger l'appel a PRECEDE.
*
*     Revision 4.13  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.12  2008/04/25 21:38:39  dugas
*     Permettre 20 caracteres pour les parametres reels sur la ligne de commande.
*
*     Revision 4.11  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.10  2006/07/04 17:53:21  dugas
*     Ajouter le support des donnees manquantes par le biais soit
*      du parametre "-mvalue valeur [epsilon]", soit de la variable
*      d'environnement "MISSING_VALUE=valeur", ou "valeur" est le
*      nombre reel denotant une valeur manquante et "epsilon" est
*      le facteur de precision utilise dans les comparaisons. La
*      valeur par defaut de epsilon est 1%. La seconde methode a
*      preseance sur la premiere.
*
*     Revision 4.9  2005/04/14 18:15:49  dugas
*     Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.8  2004/11/12 16:29:12  dugas
*     Ajouter support des donnees de type CHAR/datyp=3
*
*     Revision 4.7  2003/07/05 14:52:24  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.6  1998/07/03 02:26:47  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.5  1997/10/10  19:51:41  armnrbd
*     Enlever le message d'erreur -1.
*     Activer le mode I/O a 64 bits.
*
*     Revision 4.4  1997/09/26  17:39:31  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.3  1997/04/16  14:42:44  armnrbd
*     Ajouter le parametre d'entree NPG.
*     Conserver les enregistrements de type LABL.
*
*     Revision 4.2  1996/02/29  20:44:21  armnrbd
*     Imprimer plus d'informations lors du traitement du cas MAXW=0
*     et aussi quand le programme se mets a ignorer les LABLs.
*
*     Revision 4.1  1995/08/29  02:46:04  armnrbd
*     Restreindre l'usage du mode de fonctionnement par defaut.
*
*     Revision 4.0  1994/11/17  14:22:43  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:08:39  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:28  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.9  92/12/04  22:26:06  armnrbd
*     Modifier legerement les options de defauts.
*     
*     Revision 1.8  92/11/25  22:01:19  armnrbd
*     BugFix au traitement de NEWNAM par RPBLOC.
*     
*     Revision 1.7  92/11/25  21:03:57  armnrbd
*     Ajouter le traitement par RPBLOC des parametres.
*     
*     Revision 1.6  92/11/12  14:48:37  armnrbd
*     Implantation de GETSIZ/GETSIZ2.
*     
*     Revision 1.5  92/10/13  15:57:31  armnrbd
*     Definir JBUF(8)=-32, plutot que JBUF(8)=1.
*     
*     Revision 1.4  92/05/01  15:53:29  armnrbd
*     Corriger la documentation.
*     
*     Revision 1.3  92/04/09  12:02:35  armnrbd
*     Ajouter valeurs de defauts 1.0 et 0.0 pour A et B.
*     
*     Revision 1.2  92/03/17  15:33:09  armnrbd
*     Ajouter "Header" dans documentation.
*     
*     Revision 1.1  92/03/16  11:02:35  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:42:03  armnrbd
*     Initial revision
*     
***    MAY 14 1983 - R.LAPRISE **ET** NOV 27 1980 - J.D.HENDERSON 

***    HISTORIQUES DES MODIFICATIONS:

***    14 NOV 1990 - B.DUGAS, RPN : VERSION CY920.
***    11 DEC 1990 - B.DUGAS, RPN : ALLOCATION DYNAMIQUE DE MEMOIRE.
***    18 JAN 1991 - B.DUGAS, RPN : AJOUTER UN APPEL A GETLIGN.
***    05 MAI 1991 -    "      "  : UTILISER GETSET2 PLUTOT QUE GETFLD2.

*---------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     MAXLEV
      PARAMETER ( MAXLEV = 999 )

      REAL        ZERO
      LOGICAL ::  DEF=.FALSE.,SPECTRALB=.FALSE.
      LOGICAL     OK,COMPLX,MVALUE,SPECTRAL
      CHARACTER   CA*20,CB*20,VALEUR*20,NOM*4
      REAL*8      A,B,B2,EPSILON,MISFLAG,SQRT2
      CHARACTER   NEWNAM*4,TYPE*4,LIGNE*256,CNPG*5
      INTEGER     HEAD,JBUF(taille_entete),NLEV,NLEVG,
     +            LEV(MAXLEV),NF,IO,LEN,NWDS,JPAK,MAXW,NR,
     +            I,J,LENLAB,NPACK,NWDS2,IER

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL*8,     DIMENSION(:), ALLOCATABLE :: G

      INTEGER,    EXTERNAL :: GETSIZ2
      LOGICAL,    EXTERNAL :: RPBLOC,SETIO64
      EXTERNAL    MACSPE,JCLPNT,GETLIGN,BURNF,FILEV,
     +            GETSET2,XIT,PUTSET2,MISPAR,GETLAB,PUTLAB

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/xlin.ptn,v $'

*---------------------------------------------------------------------
      SQRT2 = SQRT( 2.0_8 )

***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 4
      CALL JCLPNT( NF, 1,2, 5,6 )

      NR = 0

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          CA     = ' '
          CB     = ' '
          NEWNAM = ' '
          CNPG   = ' '

          OK = RPBLOC('A',VALEUR)
          IF (OK) CA = VALEUR

          OK = RPBLOC('B',VALEUR)
          IF (OK) CB = VALEUR

          OK = RPBLOC('NAME', VALEUR)
          IF (OK) NEWNAM = VALEUR(1:4)

          OK = RPBLOC('NPG',VALEUR)
          IF (OK) CNPG = VALEUR

          OK = RPBLOC('DEFAUT',VALEUR)
          IF (OK)                                              THEN
              IF (VALEUR /= ' ') CALL LEADBLK( VALEUR )
              IF (VALEUR == '-1')                               THEN
                  DEF = OK
              ELSE IF (VALEUR /= ' ')                           THEN
                  CALL low2up( VALEUR,VALEUR )
                  IF (index( VALEUR,'SPECTRALB') > 0) SPECTRALB = OK
                  IF (.NOT.SPECTRALB)                          THEN
                      WRITE(6,6005) TRIM( VALEUR )
                      CALL                         XIT('   Xlin  ',-5)
                  END IF
              END IF
          END IF
          
***        CHECK FOR DEFAULT VALUES.

          IF (CA.EQ.' ' .AND.
     +        CB.EQ.' '   )                                    THEN
              A = +1.0
              B =  0.0
          ELSE IF (DEF)                                        THEN
              A = +1.0 ; B =  0.0
              IF (CA /= ' ') READ( CA, 20,ERR=900,IOSTAT=IO ) A
              IF (CB /= ' ') READ( CB, 20,ERR=900,IOSTAT=IO ) B
          ELSE
              READ( CA, 20,ERR=900,IOSTAT=IO ) A
              READ( CB, 20,ERR=900,IOSTAT=IO ) B
          END IF

      ELSE

***        READ A,B AND NEWNAM FROM UNIT 5 (STDIN).
 
          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 903
          ELSE
              READ( LIGNE, 5010,ERR=900,END=903,IOSTAT=IO )
     +                     A,B, NEWNAM, CNPG
              CALL BURNF
          END IF

      END IF

      WRITE(6,6007) A,B 

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFERS.

  050 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )
      IF (MAXW.LE.0) GOTO 904

      WRITE(TYPE,4) JBUF(1)
      IF (TYPE.EQ.'ZONL') NWDS = JBUF(5)

      ALLOCATE( IBUF(2*LEN),G(MAX( MAXW,NWDS*NLEV )) )

      IF (NR.NE.0) CALL PRTLAB( JBUF )

***    TAKE CARE OF OUTPUT PACKING DENSITY.

      IF (CNPG.NE.' ') READ(CNPG,0005) NPACK

***    READ THE NEXT SET OF GRIDS FROM FILE XIN. 

  100 CALL GETSET2( 1, G,LEV,NLEVG, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( IBUF,G )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT('  Xlin  ', 0 ) 

          END IF

***        CHECK MISSING VALUE PARAMETRES.

          CALL MISPAR( MVALUE,MISFLAG,EPSILON )
          IF (MVALUE) EPSILON = ABS( MISFLAG )*EPSILON

***        BY-PASS LABEL RECORDS.

          WRITE(TYPE,4) IBUF(1) 

          IF (TYPE.NE.'LABL')                                  THEN

              IF (SPECTRALB)                                   THEN
                  SPECTRAL = (TYPE == 'SPEC')
                  COMPLX   = (TYPE == 'FOUR' .OR. TYPE == 'CMPL')
              ELSE
                  SPECTRAL = .False. 
                  COMPLX   = (TYPE == 'FOUR' .OR.
     +                        TYPE == 'FOUR' .OR. TYPE == 'CMPL')
              END IF

              B2 = B*SQRT2

***            VERIFY SIZES.

                                  NWDS2 = IBUF(5)
              IF (TYPE.NE.'ZONL') NWDS2 = IBUF(5)*IBUF(6)
              IF (SPECTRAL .OR.
     +            COMPLX        ) NWDS2 = NWDS2*2

              IF (NWDS*NLEV .LT. NWDS2*NLEVG)                  THEN
                  CALL                             PRECEDE( 1,NLEVG )
                  DEALLOCATE( IBUF,G )
                  GOTO 050
              END IF

***            STOP IF FIELD IS COMPLEX AND B IS NOT 0.

              IF (COMPLX .AND. B /= 0.)
     +            CALL                             XIT('  Xlin  ',-2 ) 

              IF (TYPE.NE.'CHAR')                              THEN

                  IF (NR.EQ.0) CALL PRTLAB( IBUF )

***                SET G = A*G + B.

                  IF (MVALUE)                                  THEN
                      DO  I=1,NLEVG*NWDS2
                          IF (ABS( G(I)-MISFLAG ).LE.EPSILON) CYCLE
                          G(I) = A*G(I)+B 
                      END DO
                  ELSE IF (.NOT.SPECTRAL)                      THEN
                      DO  I=1,NLEVG*NWDS2
                          G(I) = A*G(I)+B 
                      END DO
                  ELSE IF (A /= 1._8)                          THEN
                      DO  I=1,NLEVG*NWDS2
                          G(I) = A*G(I)
                          IF (MOD( I,NWDS2 ) == 1) G(I) = G(I)+B2 ! Add B*SQRT(2.) to global mean
                      END DO
                  ELSE
                      DO  I=1,NLEVG*NWDS2,NWDS2
                          G(I) = G(I)+B2 ! Add B*SQRT(2.) to global mean
                      END DO
                  END IF
 
***                SAVE G ON FILE XOUT AND CHANGE THE IBUF NAME
***                IF NEWNAM IS NON-BLANK. 

                  IF (NEWNAM.NE.' ') READ(NEWNAM,4) IBUF(3)

                  IF (CNPG.EQ.' ') 
     +            NPACK   = IBUF(8)
                  IBUF(8) = NPACK

              END IF

              CALL PUTSET2( 2, G, LEV,NLEVG, IBUF,MAXW )

          ELSE

***            SAVE THE LAST LABEL READ.

              LENLAB = IBUF(5)

              CALL GETLAB( 0, LIGNE, IBUF,LENLAB, OK )
              WRITE(NOM,4) IBUF(3)
              NLEVG = 1

              IF (NOM.EQ.'LABL')                               THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB,
     +                                   .FALSE. , .FALSE. )
              ELSE IF (NOM.EQ.'FILE')                          THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, 
     +                                   .TRUE.  , .FALSE. )
              ELSE IF (NOM.EQ.'INFO')                          THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, 
     +                                   .FALSE. , .TRUE.  )
              END IF

          END IF

      NR = NR+NLEVG
      GOTO 100 

***    E.O.F. ON UNIT #5.
 
  900 IF (IO.NE.0) WRITE(6,6100) IO
  903 CALL                                         XIT('  Xlin  ',-3 )

***   E.O.F. ON UNIT #1.

  904 CALL                                         XIT('  Xlin  ',-4 )
*---------------------------------------------------------------------

    4 FORMAT(A4)
    5 FORMAT(BN,I5)
   20 FORMAT(BN,E20.0)

 5010 FORMAT(10X,2E10.0,1X,A4,A5)

 6005 FORMAT(' Unrecognized -def argument value... ',A/)
 6007 FORMAT('0 Xlin A,B =',1P2E20.12)
 6010 FORMAT('0 Xlin read',I6,' records.')
 6100 FORMAT(' Xlin reports I/O error number ',I3,' on unit 5.')
 6110 FORMAT(' Xlin is stripping label records...')

      END 
#     endif








