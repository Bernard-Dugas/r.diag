#     if !defined (latitude_maximale)
#         define   latitude_maximale 4999
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      zxgam  ZXIN ZXOUT OUTPUT [-def]
*
*
*     DESCRIPTION...
*      zxgam  - CROSS-SECTION GAMMA CALCULATION  GAM=K/(-P*DT/DP+KT) 
*
*
*     AUTHOR  - J.D.Henderson, NOV 1980.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/zxgam.ptn,v 4.9 2014/09/25 20:20:57 dugas Exp $
*
*
*     PURPOSE - READS TEMPERATURE CROSS-SECTIONS FROM FILE ZXIN, 
*               CALCULATES GAMMA FOR EACH LEVEL USING: 
*                     GAMMA = K/(-P*DT/DP + K*T) 
*               WHERE, 
*                     K=RGAS/CP,  T=MERIDIONAL MEAN TEMPERATURE 
*               AND PUTS THE RESULT ON FILE ZXOUT. 
*
*
*     INPUT FILE... 
*      ZXIN  = TEMPERATURE CROSS-SECTIONS ON PRESSURE LEVELS
*
*     OUTPUT FILE... 
*      ZXOUT = GAMMA CROSS-SECTION 
*
*
*     NOTE THAT WHEN THE "-def" COMMAND-LINE PARAMETRE IS SPECIFIED,
*     THE PROGRAMS USES A WEIGHTED ALGORITHM WHILE CALCULATING ITS
*     VERTICAL DERIVATIVE, TAKING INTO ACCOUNT THE POSSIBLY UN-EVEN
*     LEVEL SPACING, SO THAT THE SCHEME BECOMES SECOND-ORDER ACCURATE.
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 TOO MANY OR NOT ENOUGH LEVELS IN ZXIN
*       2 FOUND DATA TYPE NOT ZONAL
*       3 ABORT ERROR READING ZXIN
*       4 LEVELS DO NOT VARY MONOTONICALLY
*       5 ZXIN NOT ON PRESSURE LEVELS
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM zxgam
*    +              (ZXIN,       ZXOUT,       OUTPUT, 
*    +         TAPE1=ZXIN, TAPE2=ZXOUT, TAPE6=OUTPUT) 
*     ------------------------------------------------------------ 

*     $Log: zxgam.ptn,v $
*     Revision 4.9  2014/09/25 20:20:57  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.8  2013/10/17 11:28:50  bernard
*     Utiliser le macro latitude_maximale pour definir le parametre MAXJ.
*
*     Revision 4.7  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.6  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.5  2003/09/15 15:56:38  dugas
*     Ajouter le calcul des differences finies ponderees en option
*
*     Revision 4.4  2003/07/05 14:53:29  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.3  1998/07/03 02:26:50  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.2  1998/06/08  02:19:15  armnrbd
*     Utiliser HPALLOC pour allouer la memoire dynamique.
*
*     Revision 4.1  1997/09/26  17:39:36  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.0  1994/11/17  14:23:04  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:09:54  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:41  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.2  92/11/20  16:31:59  armnrbd
*     Deuxieme iteration avec GETSIZ/GETSIZ2.
*     
*     Revision 1.1  92/05/01  13:16:34  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:42:06  armnrbd
*     Initial revision
*     
*     FEV 07/91 - B.DUGAS, rpn. (PORT TO CY920/IRIX F77)
*     MAY 14/83 - R.LAPRISE. 

*----------------------------------------------------------------------- 
      IMPLICIT    none

      INTEGER, PARAMETER :: MAXJ = latitude_maximale , MAXLEV = 999

      LOGICAL     OK,MONOTON,WEIGHT
      CHARACTER   GAMA*4,LIGNE*80,GRTYP
      REAL*8      SL(MAXJ),CL(MAXJ),WL(MAXJ),WOSL(MAXJ),RAD(MAXJ)
      REAL        PR(MAXLEV),TML(MAXLEV),DTDP(MAXLEV),GAM(MAXLEV),
     +            F(MAXJ),ZERO,ROCP,PIH,VAL,DRAD,RADI,RADF,
     +            XMEM1,XMEM2
      INTEGER     J,JL,L,NS,NFF,NLAT,NLATH,NLEV,NLEV0,NWDS,NHEM,
     +            NLAT0,NLATM,NLEVM,MAXW,LEN,HEAD,LEV(MAXLEV),IER,
     +            JBUF(taille_entete),JPAK, TOP,BOT,INC,
     +            BOTM, HAUT,BAS,VKIND

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL,       DIMENSION(:), ALLOCATABLE :: T,GM

      LOGICAL     RPBLOC
      INTEGER     GETSIZ2
      CHARACTER*4 GETYP,GETHIC,PKTYP*2
      EXTERNAL    MACSPE,JCLPNT,XIT,GETSIZ2,GETZX2,
     +            GAUSSG,TRIGL2,PUTZX2,CONVPR,
     +            MONVERT,RPBLOC,GETYP,GETHIC

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/zxgam.ptn,v $'

*--------------------------------------------------------------------- 
***    ACCESS MACHINE DEPENDANT CONSTANTS.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )
      GAMA   = 'GAMA'

***    ACCESS I/O UNIT NAME AND ASSIGN THEM.

      NFF    = 3
      CALL JCLPNT( NFF, 1,2, 6 )

***    GET PACKING TYPE.

      PKTYP = GETYP( 1 )

      ROCP   = 2./7. 
      PIH    = 2.0*ATAN(1.0)

      NS     = 0
      WEIGHT = .FALSE.

      IF (RPBLOC( ' ',LIGNE ))                                 THEN
          WEIGHT = RPBLOC('DEFAUT',LIGNE)
      END IF

      IF (WEIGHT) WRITE(6,6100)

***    DETERMINE NECESSARY MEMORY. READ FIRST INFO BUFFER.

  050 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )

      IF (MAXW.EQ.0 .OR. NLEV.GT.MAXLEV
     +              .OR. NLEV.LE.0    ) GOTO 999

      NLAT = JBUF(5)
      NHEM = JBUF(7)

      ALLOCATE( IBUF(LEN),T(NLAT*NLEV),GM(NLAT*NLEV) )

***    GAUSSG COMPUTES THE VALUE OF  THE GAUSSIAN LATITUDES AND 
***    THEIR SINES AND COSINES FOR THE NH (N TO S). TRIGL2 MAKES
***    THEM GLOBAL OR HEMISPHERIC ACCORDING TO NHEM (S TO N).

      NLATH = NLAT/2 
      IF (NHEM.NE.0) NLATH = NLAT

      IF (PKTYP.EQ.'SQ')                                       THEN
          GRTYP = GETHIC( 'GRTYP',JBUF )
          IF (GRTYP.NE.'G') WRITE(6,6110) GRTYP
      END IF

      CALL GAUSSG( NLATH, SL,WL,CL,RAD,WOSL ) 
      CALL TRIGL2( NLATH, SL,WL,CL,RAD,WOSL,NHEM ) 

      IF (NHEM.EQ.0)                                           THEN
          RADI = -PIH
          RADF =  PIH
      ELSE IF (NHEM.EQ.1)                                      THEN
          RADI =  0
          RADF =  PIH
      ELSE IF (NHEM.EQ.2)                                      THEN
          RADI = -PIH
          RADF =  0
      END IF

***    READ THE CROSS-SECTION. STOP IF THE FILE IS EMPTY. 
***    LEV WILL CONTAIN THE PRESSURE LEVEL VALUES IN MILLIBARS. 

  100 CALL GETZX2( 1, T, NLAT,LEV,NLEV0, IBUF,MAXW,OK )
     
      IF (.NOT.OK)                                             THEN
          DEALLOCATE( IBUF,T,GM )
          IF (MAXW.EQ.0)                           GOTO 050
          IF (NS.EQ.0)                                         THEN
              CALL                                 XIT('  Zxgam ',-2 ) 
          ELSE
              WRITE(6,6050) NS
              CALL                                 XIT('  Zxgam ', 0 )
          END IF
      END IF

      IF (NS.EQ.0)                                             THEN
          CALL WRITLEV( LEV,NLEV0,'PRES' )
          CALL PRTLAB( IBUF )
      END IF

      NLAT0  = IBUF(5) 
      NLATM  = NLAT0-1
      NLEVM  = NLEV0-1

      IF (NLAT0.NE.NLAT .OR. NLEV0.GT.NLEV)
     +    CALL                                     XIT('  Zxgam ',-3 ) 

***    SET PR TO THE PRESSURE IN N/M**2. 

      DO  L=1,NLEV0
          CALL CONVPR( LEV(L), PR(L), VKIND, -2 )
          IF (PKTYP.EQ.'SQ' .AND. VKIND.NE.2)
     +        CALL                                 XIT('  Zxgam ',-5 ) 
      END DO

      DO  L=1,NLEV0
          PR(L)   = 100.*PR(L)
      END DO
 
***     CHECK THAT PR IS MONOTONIC.

      CALL MONVERT( PR,NLEV0, TOP,BOT,INC, MONOTON )

      IF (.NOT.MONOTON) CALL                       XIT('  Zxgam ',-4 )

      BOTM = BOT-INC

***    INTEGRATE IN LATITUDE TO COMPUTE THE MEAN AT EACH LEVEL. 

      DO 150 L=1,NLEV0
          JL = (L-1)*NLAT

          DO  J=1,NLAT
              F(J) = T(JL+J)* CL(J) 
          END DO

          VAL         = F(1)*(RAD(1)-RADI) 

          DO  J=2,NLATM
              DRAD    = RAD(J) - RAD(J-1)
              VAL     = VAL+.5*(F(J)+F(J-1))*DRAD
          END DO

          VAL         = VAL+F(NLAT)*(RADF-RAD(NLAT))
          TML(L)      = VAL*.5 

  150 CONTINUE 

***    COMPUTE DT/DP AND THEN GAMMA FOR EACH LEVEL. 

      DTDP(TOP)    = (TML(TOP+INC)   -TML(TOP))
     +             / ( PR(TOP+INC)   - PR(TOP)) 

      IF (.NOT.WEIGHT)                                         THEN

          DO  L=TOP+INC,BOTM,INC
              DTDP(L)  = (TML(L+INC) -TML(L-INC))
     +                 / ( PR(L+INC) - PR(L-INC))
          END DO

      ELSE

         DO  L=TOP+INC,BOTM,INC
             HAUT    = L-INC
             BAS     = L+INC
             XMEM1   = (PR(L   )-PR(HAUT)) / (PR (BAS )-PR(L   ))
     +               /          (PR(BAS )  -  PR (HAUT))
             XMEM2   = (PR(BAS )-PR(L   )) / (PR (L   )-PR(HAUT))
     +               /          (PR(BAS )  -  PR (HAUT))
             DTDP(L) =  XMEM1  *(TML(BAS) -  TML(L   ))
     +               +  XMEM2  *(TML(L  ) -  TML(HAUT))
         END DO

      END IF

      DTDP(BOT)  = (TML(BOT)-TML(BOTM))
     +           / ( PR(BOT)- PR(BOTM)) 

***    COMPUTE GAMMA . 

      DO  L=1,NLEV0
          GAM(L) = ROCP / ( -PR(L)*DTDP(L) + ROCP*TML(L) )
      END DO

***    PUT GAMMA INTO ALL POINTS OF THE CROSS-SECTION. 

      DO  L=1,NLEV0
          JL = (L-1)*NLAT
          DO  J=1,NLAT
              GM(JL+J) = GAM(L) 
          END DO
      END DO

***    PUT THE RESULT ON FILE ZXOUT. 

      READ(GAMA,4) IBUF(3)
      CALL PUTZX2( 2, GM,LEV, IBUF,MAXW )
      IF (NS.EQ.0) CALL PRTLAB( IBUF )

      NS = NS+1
      GOTO 100

***    PREMATURE EOF ON UNIT 1.

  999 CALL                                         XIT('  Zxgam ',-4 )

*--------------------------------------------------------------------- 
    4 FORMAT(A4)

 6000 FORMAT(' Zxgam on ',I5,' levels...'/(20I6))
 6050 FORMAT(' End after ',I3,' cross-sections.')
 6100 FORMAT(' Zxgam will use weighted differences.')
 6110 FORMAT(' Expecting gaussian array, found type ',A)

      END 
#     endif
