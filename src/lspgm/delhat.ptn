#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      delhat  PSFIL DHFIL INPUT OUTPUT [ -plv VAL1 -def [DEFLEVS][FREEFMT] ]
*
*
*     DESCRIPTION...
*      delhat - COMPUTES THE FUNCION DELTA-HAT FOR ALL PRESSURE LEVELS
*
*
*     AUTHOR  - J.D.Henderson, JUL 08/80.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/delhat.ptn,v 4.9 2014/09/25 20:20:46 dugas Exp $
*
*
*     PURPOSE - COMPUTES THE FUNCTION DELTA-HAT FOR A FILE OF SURFACE 
*               PRESSURE GRIDS (ONE SET FOR EACH PRESSURE GRID)
*
*     NOTES   - 1) PRESSURE VALUES ARE READ FROM STDIN
*               2) DELTA-HAT IS 1.0 ABOVE THE SURFACE AND 0.0 BELOW IT
*               3) THE MAXIMUM NUMBER OF LEVELS IS SET TO 999
*
*
*     INPUT FILE...
*      PSFIL = INPUT SERIES OF SURFACE PRESSURE GRIDS (MB).
*
*     OUTPUT FILE...
*      DHFIL = DELTA-HAT AT REQUESTED PRESSURE LEVELS FOR EACH
*              PRESSURE GRID IN PSFIL.
*
*
*     INPUT PARAMETERS...
*
*      NLEV (plv) = NUMBER OF REQUESTED PRESSURE LEVELS (DEF 16, MAX 999).
*                   IF NLEV IS NEGATIVE, EACH -NLEV LEV VALUES ARE READ WITH
*                   EITHER A I10 FORMAT OR AN E10.0 DEPENDING ON WETHER ANY
*                   OF THESE VALUES CONTAINS A DECIMAL POINT. INTEGER VALUES
*                   ARE THEN ASSUMED TO BE ENCODED (via LVCODE or CONVIP)
*
*      LEV        = VALUES OF THE PRESSURE IN MILLIBARS AS CODED 
*                   BY ROUTINE LVCODE. THE DEFAULTS ARE SPECIFIED
*                   IN THE EXAMPLE BELOW.
*
*      Notes: 1) The first input line is NOT read if any command-line
*                parameters are passed.
*             2) Furthermore, the second line will not be read when
*                the "-def" (or "-def DEFLEVS") defaults processing
*                mode is requested. Any "-plv" value is also ignored.
*             3) Specifying "-def FREEFMT" indicates that the output pressure
*                levels should read with a list-directed free format. This
*                is obviously not the default behaviour. Pressure values
*                should then only be separated by spaces or comas, and
*                spread over one or more lines. These numbers are then
*                always assumed to be the actual real pressure values,
*                and not their possibly encoded integer values. Turning
*                on the "FREE_FORMAT_LEVEL_IO" environment variable will
*                also activate this behaviour.
*
*      READ( 5,5010 )  NLEV
*      IF (FREEFMT)      READ( 5,* )    ( PR(I),I=1,ABS(NPL))
*      ELSEIF (NLEV > 0) READ( 5,5020 ) (LEV(I),I=1,    NPL)
*      ELSEIF (NLEV < 0) READ( 5,5030 ) (LEV(I),I=1,   -NPL)
*5010  FORMAT(10X,I5)
*5020  FORMAT(16I5)
*5030  FORMAT(8E10.0)
*
*
*     EXAMPLE OF INPUT CARDS (with format 5010 & 5020)...
*
*   DELHAT   16
*  10   20   30   50   70  100  150  200  250  300  400  500  700  850  925 1000
*
*        01234567890123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 TOO MANY OR NOT ENOUGH REQUIRED LEVELS
*       2 PRESSURE LEVELS DO NOT VARY MONOTONICALLY
*       3 PREMATURE EOF ON FILE PSFC
*       4 ERROR READING FIRST LINE INPUT PARAMETERS
*       5 ERROR READING SECOND LINE INPUT PARAMETERS
*       6 LEV DOES NOT CONTAIN PRESSURE DATA
*       7 UNRECOGNIZED -DEF ARGUMENT VALUE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM delhat
*     PROGRAM DELHAT (PSFIL,       DHFIL,       INPUT,       OUTPUT,
*    1          TAPE1=PSFIL, TAPE2=DHFIL, TAPE5=INPUT, TAPE6=OUTPUT)
*     --------------------------------------------------------------

*     $Log: beta.ptn,v $
*     Revision 4.10  2019/04/15 08:49  dugas
*     Modifier l'initialisation de CLEVP.
*
*     Revision 4.9  2018/11/17 22:22  dugas
*     Tenir compte de la variable d'environnement FREE_FORMAT_LEVEL_IO.
*
*     Revision 4.8  2018/11/16 16:16  dugas
*     Ajouter l'option 'FREEFMT' de lecture des niveaux de pression.
*
*     Revision 4.7  2014/09/25 20:20:45  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.6  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.5  2007/12/20 21:11:29  dugas
*     - Support du format E10.0 pour les niveaux verticaux en arguments.
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.4  1998/10/20 17:29:31  armnrbd
*     Implanter le support de RPBLOC.
*
*     Revision 4.3  1998/07/03  02:26:20  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.2  1996/11/12  19:41:23  armnrbd
*     Ajouter le support de grilles de type SUBA.
*
*     Revision 4.1  1995/08/30  15:22:17  armnrbd
*     Ne plus forcer la compaction a 32 bits.
*
*     Revision 4.0  1994/11/17  14:19:17  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.2  94/01/13  21:40:49  armnrbd
*     Ajouter du code de verification de monotonicite des niveaux.
*     
*     Revision 3.1  94/01/12  21:32:02  armnrbd
*     Modifier l'appel a GETLIGN qui s'occupe des niveaux verticaux.
*     
*     Revision 3.0  93/10/13  13:55:32  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.0  92/04/02  14:58:19  armnrbd
*     Initial revision
*     
*     MAY 06/83 - R.LAPRISE.
*     JUL 08/80 - J.D.HENDERSON.

*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER,    PARAMETER :: MAXLEV = 999, HEAD = taille_entete

      REAL        PR(MAXLEV)
      CHARACTER*10 CLEVP(MAXLEV)
      CHARACTER   LIGNE*80,CDELH*4,PKTYP*2
      LOGICAL     OK,DEF,MONOTON,BIGF,FFMT,RLV
      INTEGER     I,K,L,IO,LEV(MAXLEV),IER,
     +            NFF,NR, NLAT,NLEV,NLG,NWDS,LIM1,LIM2,
     +            TOP,BOT,INC, MAXW,JBUF(HEAD),
     +            LEN,JPAK,VKIND

      INTEGER,    DIMENSION(:),ALLOCATABLE :: IBUF
      REAL,       DIMENSION(:),ALLOCATABLE :: PSBAR,DELTA

      DATA        DEF / .FALSE. /

      LOGICAL,    EXTERNAL :: RPBLOC,GetFreeFormatLevelIO
      INTEGER,    EXTERNAL :: GETSIZ
      CHARACTER*4,EXTERNAL :: GETYP
      EXTERNAL    JCLPNT,CONVPR,GETFLD2,PUTFLD2,
     +            WRITLEV,GETLIGN,BURNF,MONVERT

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        CDELH / 'DELH' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/delhat.ptn,v $'

*--------------------------------------------------------------------
***   INITIALISER LES VARIABLES LIEES AU MODE DEFLEVS.

      CLEVP(1) = '   10' ; CLEVP(7)  = '  150' ; CLEVP(13) = '  700'
      CLEVP(2) = '   20' ; CLEVP(8)  = '  200' ; CLEVP(14) = '  850' 
      CLEVP(3) = '   30' ; CLEVP(9)  = '  250' ; CLEVP(15) = '  925'
      CLEVP(4) = '   50' ; CLEVP(10) = '  300' ; CLEVP(16) = ' 1000'
      CLEVP(5) = '   70' ; CLEVP(11) = '  400' ; NLEV      =     16
      CLEVP(6) = '  100' ; CLEVP(12) = '  500'

***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NFF = 4
      CALL JCLPNT( NFF, 1,2, 5,6 )

      PKTYP = GETYP( 1 )
      BIGF  =.FALSE.
      FFMT  =.FALSE.
      RLV   =.FALSE.

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('PLV',LIGNE)
          IF (OK) READ(LIGNE,0005,END=904,ERR=904,IOSTAT=IO) NLEV

          OK = RPBLOC('DEFAUT',LIGNE)
          IF (OK)                                              THEN
              IF (LIGNE /= ' ') CALL LEADBLK( LIGNE )
              IF (LIGNE == '-1')                               THEN
                  DEF = OK
              ELSE IF (LIGNE /= ' ')                           THEN
                  CALL low2up( LIGNE,LIGNE )
                  IF (index( LIGNE,'DEFLEVS' ) > 0) DEF    = OK
                  IF (index( LIGNE,'FREEFMT' ) > 0) FFMT   = OK
                  IF (.NOT.(DEF .OR. FFMT))          THEN
                      WRITE(6,6007) TRIM( LIGNE )
                      CALL                         XIT(' Delhat ',-7 )
                  END IF
              END IF
          END IF

          IF (DEF)  NLEV = 16

       ELSE

***        READ THE PRESSURE LEVELS FROM CARDS.
 
          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 904
          ELSE
              READ( LIGNE, 5010,ERR=904,END=904,IOSTAT=IO) NLEV
          END IF

      END IF

      FFMT = ( FFMT .OR. GetFreeFormatLevelIO() )
      IF (FFMT) RLV  =.TRUE.
      
      IF (NLEV.LT.0)                                           THEN
          NLEV =-NLEV
          BIGF =.TRUE.
      END IF

      IF (NLEV.LT.2 .OR. NLEV.GT.MAXLEV) CALL      XIT(' Delhat ',-1 )

      IF (.NOT.(DEF .AND. (NLEV.EQ.16)))                       THEN

***        READ THE REQUESTED PRESSURE LEVELS.

          IF (FFMT)                                            THEN
              ! Use a list-directed input command.
              READ( 5, *, END=905,ERR=905,IOSTAT=IO) (PR(K),K=1,NLEV)
              CLEVP(:)(1:NLEV) = ' '

          ELSE IF(BIGF)                                        THEN
              DO  K=1,(NLEV-1)/8+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 905
                  ELSE
                      LIM1 = 8*(K-1)+1
                      LIM2 = MIN( NLEV, 8*K )
                      READ( LIGNE, 5030,END=905,ERR=905,IOSTAT=IO) 
     +                                  (CLEVP(I),I=LIM1,LIM2)
                      DO  I=LIM1,LIM2
                          IF (INDEX( CLEVP(I),'.') /= 0) RLV = .TRUE.
                      END DO
                  END IF  
              END DO
          ELSE
              DO  K=1,(NLEV-1)/16+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 905
                  ELSE
                      LIM1 = 16*(K-1)+1
                      LIM2 = MIN( NLEV, 16*K )
                      READ( LIGNE, 5020,END=905,ERR=905,IOSTAT=IO) 
     +                                  (CLEVP(I),I=LIM1,LIM2)
                      DO  I=LIM1,LIM2
                          IF (INDEX( CLEVP(I),'.') /= 0) RLV = .TRUE.
                      END DO
                  END IF  
              END DO
          END IF

          CALL BURNF

      END IF

***    CHECK LEV ENCODING(+2)/DECODING(-2).

      DO  K=1,NLEV
          IF (FFMT .OR. RLV)                                   THEN
              IF (.NOT.FFMT)
     +            READ( CLEVP(K),11, ERR=905,END=905,IOSTAT=IO ) PR(K)
              IF (PKTYP == 'SQ')                               THEN
                  VKIND = 2
                  CALL CONVPR( LEV(K), PR(K), VKIND, +2 )
              ELSE IF (PR(K) >= 0.)                            THEN
                  CALL LVCODE( LEV(K), PR(K)/1000.,1 )
              END IF

              IF (-10000. < PR(K) .AND. PR(K) < -99.)          THEN
                 ! Attemp to account for old-style CCCma
                 ! coding of pressures < 10hPa and > 10**-7.
                  LEV(K) = NINT( PR(K) )
                  CALL CONVPR( LEV(K), PR(K), VKIND, -2 )
              ELSE IF (PR(K) <= -10000.)                       THEN
                  LEV(K) = -999999 ! Signals an error
              END IF

          ELSE
              READ( CLEVP(K),10, ERR=905,END=905,IOSTAT=IO ) LEV(K)
              CALL CONVPR( LEV(K), PR(K), VKIND, -2 )
              IF (PKTYP.EQ.'SQ')                               THEN
                  IF (VKIND /= 2) CALL             XIT(' Delhat ',-6 )
                  CALL CONVPR( LEV(K),PR(K),VKIND, +2 )
              END IF

          END IF

          IF (LEV(K) == -999999)                               THEN
              ! Check for CONVPR error condition.
              WRITE(6,6005) K,PR(K)
              GOTO 905
          END IF

      END DO

      CALL WRITLEV( PR,NLEV,'PRES' )

***     CHECK THAT PR IS MONOTONIC.

      CALL MONVERT( PR,NLEV, TOP,BOT,INC, MONOTON )

      IF (.NOT.MONOTON) CALL                       XIT(' Delhat ',-2 )

***    ASK FOR NECESSARY MEMORY. READ FIRST DATA INFO BUFFER.

      NR = 0

  100 MAXW = GETSIZ( 1, JBUF,LEN,NWDS,JPAK )
      IF (MAXW.LE.0) GOTO 903

      ALLOCATE( IBUF(LEN), PSBAR(MAX( MAXW,NWDS )),
     +                     DELTA(MAX( MAXW,NWDS )), STAT=IER )

***    GET THE NEXT SURFACE PRESSURE FIELD INTO PSBAR.

  200 CALL GETFLD2( 1, PSBAR, 'GRID'//'SUBA',-1,' ',-1, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN
              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( PSBAR,DELTA,IBUF )
                  GOTO 100
              END IF
              WRITE(6,6010) NR
              IF (NR.EQ.0) CALL                    XIT(' Delhat ',-3 )
              CALL                                 XIT(' Delhat ', 0 )
          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          NLG  = IBUF(5)
          NLAT = IBUF(6)
          NWDS = NLG*NLAT

***        COMPUTE DELTA-HAT FOR EACH PRESSURE LEVEL AND SAVE ON FILE 2.

          DO  300 L=1,NLEV

              DO  I=1,NWDS
                                         DELTA(I)=1.
                  IF (PSBAR(I).LT.PR(L)) DELTA(I)=0.
              END DO

              READ(CDELH,4) IBUF(3)
                            IBUF(4) = LEV(L)
CCC                         IBUF(8) = -32

              CALL PUTFLD2( 2, DELTA,IBUF,MAXW )

              IF (NR.EQ.0) CALL PRTLAB( IBUF )

  300     CONTINUE

      NR = NR+1
      GOTO 200

***    PREMATURE E.O.F. ON UNIT #1.

  903 CALL                                         XIT(' Repack ',-3 )

***    E.O.F. ON INPUT.

  904 CALL                                         XIT(' Delhat ',-4 )
  905 CALL                                         XIT(' Delhat ',-5 )
*---------------------------------------------------------------------

 0004 FORMAT(A4)
 0005 FORMAT(BN,I5)
 0010 FORMAT(BN,I10)
 0011 FORMAT(BN,E10.0)

 5010 FORMAT(10X,I5)
 5020 FORMAT(16A5)
 5030 FORMAT(8A10)

 6005 FORMAT(' Found illegal pressure value for level # ',I3,
     +       ' PR=',E20.10/)
 6007 FORMAT(' Unrecognized -def argument value... ',A/)

 6010 FORMAT('0',I6,'  records read.')

      END
#     endif
