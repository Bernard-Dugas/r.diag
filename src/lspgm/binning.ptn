#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      binning  TSIN MEANTS COLAPSE INPUT OUTPUT [-a VAL1 -b VAL2]
*
*
*     AUTHOR   - B.Dugas, OCTOBRE 22/85.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/binning.ptn,v 4.8 2014/09/25 20:20:45 dugas Exp $
*
*
*     DESCRIPTION...
*      binning - IDENTIFIES MEAN PROPRETIES BY THE BIN METHOD.
*
*
*     PURPOSE  - DETERMINE UNE MOYENNE A LONG TERME EN UTILISANT LA METHODE 
*                DES BOITES. LE PROGRAMME LIT  SUR INPUT LE NOMBRE DE CYCLES
*                CY ET NOMBRE DESIRE DE BOITES DISTINCTES BC PAR CYCLES. 
*                UNE BOITE DISTINCTE PEUT ETRE UNE JOURNEE OU CINQ JOURNEES 
*                OU ...; CES BOITES DOIVENT TOUTES CORRESPONDRE A PLUS D'UN 
*                POINT DE TSIN.
*
*
*     INPUT FILE...
*      TSIN   = EST N'IMPORTE QUEL FICHIER DE SERIES TEMPORELLES. CES SERIES
*               NE DOIVENT PAS NECESSAIREMENT ETRE TOUTES DE MEME SORTE, NOM
*               ET NIVEAU. ELLES DOIVENT TOUTES ETRE DE MEME LONGUEUR.
*
*     OUTPUT FILES...
*      MEANTS = CONTIENT DES SERIES TEMPORELLES SE COMPOSANT TOUTES DE CY
*               CYCLES IDENTIQUES. CES SERIES SONT DE LONGUEUR CY*BC. CES
*               CYCLES SONT LA MOYENNE DES CY CYCLES DE TSIN.
*      COLAPSE= EST UN FICHIER DE SERIES TEMPORELLES DE MEME LONGUEUR QUE
*               MEANTS. CHAQUE POINT DE CHAQUE CYCLE EST LA MOYENNE D'UN
*               BOITE DANS LE CYCLE CORRESPONDANT DE TSIN.
*
*
*     INPUT PARAMETERS...
*      CY (a) = NOMBRE DE CYCLES COMPLET DANS LES SERIES D'ENTREES.
*      BC (b) = NOMBRE DE BOITES DISTINCTES DANS CHAQUE CYCLE.
*
*      READ(5,5000) CY,BC
*5000  FORMAT(10X,2I5)
*
*
*     EXAMPLE OF INPUT CARD...
*
* BINNING    20  365
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*      0 NO PROBLEMS
*      1 TSIN NOT IN TIME SERIES FORMAT
*      2 TIME SERIES TOO LARGE
*      3 CY*BC LONGER THAN INPUT TIMME SERIES
*      4 UNABLE TO READ TSIN
*      5 DATA MORE THAN ONE SIZE OR NOT IN TIME SERIES FORMAT
*      6 PREMATURE END OF FILE ON TSIN
*      7 PREMATURE END OF FILE ON INPUT
*      8 MEMORY ALLOCATION PROBLEM 
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM BINNING
*     PROGRAM BINNING (TSIN,      MEANTS,      COLAPSE,      INPUT,
*    1                                                       OUTPUT,
*    2           TAPE1=TSIN,TAPE2=MEANTS,TAPE3=COLAPSE,TAPE5=INPUT,
*    3                                                 TAPE6=OUTPUT)
*     --------------------------------------------------------------
*
*     $Log: binning.ptn,v $
*     Revision 4.8  2014/09/25 20:20:45  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.7  2012/08/29 15:51:34  dugas
*      - Declarations de variables 'a la' F90.
*      - Allocations dynamiques via ALLOCATE plutot que HPALLOC.
*      - Mise-a-jour du traitement des series temporelles pour les grilles GEM.
*
*     Revision 4.6  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.5  2007/12/20 21:17:51  dugas
*     Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.4  2004/11/12 16:42:56  dugas
*     Verification explicite des types supportes de donnees.
*
*     Revision 4.3  2000/03/17 21:36:54  armnrbd
*     Corriger l'enonce du format 6020.
*
*     Revision 4.2  1998/05/21 20:20:45  armnrbd
*     Modifier la valeur par defaut de taille_entete
*
*     Revision 4.1  1995/11/20  14:42:37  armnrbd
*     Implanter le support de RPBLOC.
*     Generaliser le fonctionnement du programme.
*     Corriger un bogue dans la lecture des series temporelles.
*
*     Revision 4.0  1994/11/17  14:19:21  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:55:34  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.0  93/02/04  09:13:50  armnrbd
*     Initial revision
*     
*     OCT 22/85 - B.DUGAS.
*
*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER,    PARAMETER :: HEAD = taille_entete

      LOGICAL     OK
      REAL        OCY,PO,OP,VA
      CHARACTER*4 LIGNE*80,KIND
      REAL,       SAVE :: ZERO=0.0
      INTEGER     CY,BC,NF,N,IO,MAXW,
     +            NB,PB,IER,LONG,I,J,IJ,L,NSERIE,
     +            JBUF(HEAD),JPAK,LEN,NWDS
 
      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF,OU
      REAL,       DIMENSION(:), ALLOCATABLE :: MEANTS,COLAPSE,TSIN

      LOGICAL,    EXTERNAL :: RPBLOC
      INTEGER,    EXTERNAL :: GETSIZ
      EXTERNAL    JCLPNT,GETLIGN,BURNF,XIT,GETFLD2,PUTFLD2

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*=======================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/binning.ptn,v $'

*-----------------------------------------------------------------------
***    ACCEDER LES FICHIERS D'E/S.

      NF = 5
      CALL JCLPNT( NF, 1,2,3, 5,6 )
 
***    LIRE LE PREMIER TAMPON INFORMATIF.

      MAXW = GETSIZ( 1, JBUF,LEN,NWDS,JPAK )
      IF (MAXW.LE.0) GOTO 901
      IF (JBUF(6) /= 1) CALL                       XIT(' Binning',-1 )

      ALLOCATE( IBUF(HEAD+MAXW), MEANTS (MAX( MAXW,NWDS )),
     +                           COLAPSE(MAX( MAXW,NWDS )),
     +                           OU     (MAX( MAXW,NWDS )),
     +                           TSIN   (MAX( MAXW,NWDS )), STAT=IER )

      IF (IER /= 0) CALL                           XIT(' Binning',-8 )

***    SAUVER CERTAINES VALEURS A DES FINS DE COMPARAISONS.
 
      LONG    = JBUF(5)
 
      IF (LONG.GT.MAXW) CALL                       XIT(' Binning',-2 )

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

***        CHECK PARAMETRE BLOCK.

          CY = 0
          BC = 0

          OK = RPBLOC('A',LIGNE)
          IF (OK) READ( LIGNE, 5, END=902,ERR=902,IOSTAT=IO ) CY

          OK = RPBLOC('B',LIGNE)
          IF (OK) READ( LIGNE, 5, END=902,ERR=902,IOSTAT=IO ) BC

      ELSE
 
***        LIRE LA CARTE DE CONTROLE.
 
          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 902
          ELSE
              READ( LIGNE, 5000,ERR=902,END=902,IOSTAT=IO) CY,BC
              CALL BURNF
          END IF

      END IF

      IF (CY   .LE. 0    .OR.
     +   (CY*BC.GT.LONG .AND. BC.NE.0))
     +    CALL                                     XIT(' Binning',-3 )
      IF (BC.EQ.0) BC = LONG/CY

      WRITE(6,6000) CY,BC
      CALL PRTLAB2(' Binning on : ',IBUF )
 
***    NB EST LE NOMBRE DE BOITES.
***    PB EST LE NOMBRE DE POINTS DE TSIN PAR BOITE.
 
      NB  = CY*BC
      PB  = FLOAT(LONG)/FLOAT(NB)
      OCY = 1.0/FLOAT(CY)
 
***    DETERMINER QUELS POINTS VONT DANS QUELLE BOITE.
 
      PO    = ZERO
      OU(1) = 0
      DO  N=2,NB
          PO    = PO + PB
          OU(N) = INT(PO)
      END DO
      OU(NB+1) = LONG
*---------------------------------------------------------------------

***    ALLER CHERCHER LA PROCHAINE SERIE.
 
      NSERIE = 0
  100 CALL GETFLD2( 1, TSIN, ' ',-1,' ',-1, IBUF,MAXW,OK )
 
          IF (.NOT.OK)                                         THEN
              WRITE(6,6010) NSERIE
              IF (NSERIE.EQ.0) CALL                XIT(' Binning',-4 )
              CALL                                 XIT(' Binning', 0 )
          END IF
 
          IF (IBUF(5).NE.LONG .OR. IBUF(6).NE.1)               THEN
              WRITE(6,6020) NSERIE+1 ; CALL PRTLAB( IBUF )
              CALL                                 XIT(' Binning',-5 )
          END IF

          WRITE(KIND,'(A4)') IBUF(1)

          IF (KIND.NE.'CMPL' .AND.
     +        KIND.NE.'COEF' .AND.
     +        KIND.NE.'GRID' .AND.
     +        KIND.NE.'SUBA' .AND.
     +        KIND.NE.'ZONL' ) CALL                XIT(' Binning',-1 )

***        INITIALISER COLAPSE A ZERO.
 
          COLAPSE(1:NB) = ZERO
 
***        TROUVER LA VALEUR MOYENNE DE CHAQUE BOITE.
***        LA METTRE DANS LE CHAMPS COLAPSE.
 
          DO  I=1,NB
              VA = 0.0
              OP = 1.0/FLOAT( OU(I+1)-OU(I) )
              DO  J=OU(I)+1,OU(I+1)
                  VA = VA + TSIN(J)
              END DO
              COLAPSE(I) = VA*OP
          END DO
 
***        CALCULER LA VALEUR MOYENNE DES BOITES CORRESPONDANTES DE
***        CHAQUE CYCLE (MOYENNE DE CY BOITES...) ET LA METTRE DANS
***        LE CHAMPS MEANTS.
 
          DO  I=1,BC
              MEANTS(I) = ZERO
          END DO
 
          DO  J=1,CY
              IJ = (J-1)*BC
              DO  I=1,BC
                  MEANTS(I) = MEANTS(I) + COLAPSE(I+IJ)*OCY
              END DO
          END DO
 
***        REPETER CE PREMIER CYCLE CY FOIS.
 
          DO  J=2,CY
              IJ = (J-1)*BC
*DIR$ IVDEP
              DO  I=1,BC
                  MEANTS(I+IJ) = MEANTS(I)
              END DO
          END DO
 
***        SAUVER MEANTS ET COLAPSE.
 
          IBUF(5) = NB
 
          CALL PUTFLD2( 2, MEANTS,  IBUF,MAXW )
          CALL PUTFLD2( 3, COLAPSE, IBUF,MAXW )
 
          NSERIE = NSERIE+1
 
      GOTO 100
 
***    FIN PREMATUREE DU FICHIER TSIN.
 
  901 CALL                                         XIT(' Binning',-6 )
 
***    E.O.F. SUR INPUT ($IN).
 
  902 IF (IO /= 0) WRITE(6,6007) IO
      CALL                                         XIT(' Binning',-7 )

*---------------------------------------------------------------------
 0005 FORMAT(BN,I5)

 5000 FORMAT(10X,2I5)

 6007 FORMAT(' Binning reports I/O error number ',I3,' on unit 5.')

 6000 FORMAT(' Input time series consist of ',I5,
     +       ' cycles, each made of ',I4,' boxes. ')
 6010 FORMAT(' Binning read ',I6,' series.')
 6020 FORMAT(' Record no,=',I6,', label = ')
 
      END
#     endif
