#     if !defined (latitude_maximale)
#         define   latitude_maximale 4999
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      zxdev  ZXIN ZXOUT OUTPUT
*      ggdev  GGIN GGOUT OUTPUT
*
*
*     DESCRIPTION...
*      zxdev  - CROSS-SECTION DEVIATION FROM MERIDIONAL MEAN
*      ggdev  - GRID SET DEVIATION FROM GLOBAL MEAN
*
*
*     AUTHOR  - J.D.Henderson, NOV 05/80.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/zxdev.ptn,v 4.10 2014/09/25 20:20:57 dugas Exp $
*
*
*     PURPOSE - COMPUTES DEVIATIONS AT EACH LEVEL FROM THE
*               MERIDIONAL OR GLOBAL MEANS AND SAVES THE RESULT
*
*     NOTE    - MAX LATITUDES IS 1999, MAX LEVELS IS 999.
*
*
*     INPUT FILES...
*      ZXIN  = GLOBAL OR HEMISPHERIC CROSS-SECTIONS
*      GGIN  = GLOBAL OR HEMISPHERIC GAUSSIAN GRIDS
*
*     OUTPUT FILES...
*      ZXOUT = DEVIATION CROSS-SECTIONS
*      GGOUT = DEVIATIONS FROM THE GLOBAL MEANS
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 PROBLEMS READING INPUT FILE
*       2 ZXDEV FOUND DATA TYPE OTHER THAN ZONAL OR
*         GGDEV FOUND DATA TYPE OTHER THAN GRID 
*       3 ABORT ERROR READING INPUT FILE
*       4 TOO MANY LATITUDES
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM zxdev
*     PROGRAM ZXDEV (ZXIN,       ZXOUT,       OUTPUT,
*    1         TAPE1=ZXIN, TAPE2=ZXOUT, TAPE6=OUTPUT)
*     -----------------------------------------------

*     $Log: zxdev.ptn,v $
*     Revision 4.10  2014/09/25 20:20:57  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.9  2013/10/17 11:20:34  bernard
*     Declarations 'a la' F90 des elements PARAMETER MAXJ et MAXLEV.
*
*     Revision 4.8  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.7  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.6  2005/04/14 18:33:26  dugas
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.5  2004/11/12 16:55:48  dugas
*     - Augmenter la taille maximale des grilles.
*     - Ajouter le support des grilles de type A et B,
*       en plus de celui des grilles de type G.
*
*     Revision 4.4  2003/07/05 14:53:29  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.3  1999/08/25 16:55:24  armnrbd
*     Utiliser HPALLOC pour l'allocation dynamique de memoire.
*     Ajouter le code correspondant au module GGDEV.
*     Enlever l'obligation de traiter des donnees globales.
*
*     Revision 4.2  1998/07/03 02:26:50  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.1  1997/09/26  17:39:35  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.0  1994/11/17  14:22:59  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:09:44  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:38  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.2  92/11/20  16:57:48  armnrbd
*     Deuxieme iteration avec GETSIZ/GETSIZ2.
*     
*     Revision 1.1  92/05/01  13:16:16  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/03/04  21:05:40  armnrbd
*     Initial revision
*     
*     MAY 14/83 - R.LAPRISE.
*     NOV 05/80 - J.D.HENDERSON

*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER, PARAMETER :: MAXLEV = 999, MAXJ = latitude_maximale

      LOGICAL     OK
      REAL        ZERO
      CHARACTER*4 KIND,PKTYP,VERBE*8,GRTYP*1
      REAL*8      F(MAXJ),VAL,VAL2,PIH,RADI,RADF,FMEAN
      REAL*8      SL(MAXJ),CL(MAXJ),WL(MAXJ),WOSSL(MAXJ)
      REAL*8      LAT1,OFFSET,DELTA,RAD(MAXJ),LATSPAN
      INTEGER     LEV(MAXLEV),NFF, MAXW,NWDS,LEN,HEAD,JBUF(taille_entete),JPAK,
     +            I,J,L, NR,NLEV,NLAT,NHEM,ILATH,
     +            BASE,IER,NLON,NLONM,NLEVA,JR,IG2

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL,       DIMENSION(:), ALLOCATABLE :: X

      CHARACTER*4 GETYP,GETHIC
      INTEGER     GETSIZ2,GETHIGH
      EXTERNAL    GETSIZ2,MACSPE,JCLPNT,XIT,
     +            GETSET2,GAUSSG,TRIGL2,GETHIGH,
     +            PUTSET2,GETVERB,LOW2UP,CMPLBL,
     +            GETYP,GETHIC

      CHARACTER            NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/zxdev.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NFF = 3
      CALL JCLPNT( NFF, 1,2, 6 )

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

      PIH = 2.0*ATAN(1.0D0)
      NR  = 0

      CALL GETVERB( VERBE )
      CALL LOW2UP( VERBE,VERBE )

***    DETERMINE THE GRID SIZE.

  100 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )

      IF (MAXW.EQ.0 .OR. NLEV.LE.0
     +              .OR. NLEV.GT.MAXLEV)                      THEN
          WRITE(6,6001)  MAXW,NLEV,MAXLEV
          CALL                                     XIT( VERBE,-1 )
      END IF

      WRITE(KIND,4) JBUF(1)

      IF (VERBE.EQ.'ZXDEV')                                    THEN

          IF (KIND.NE.'ZONL')                                  THEN
              WRITE(6,6002) 'ZONL',KIND
              CALL                                 XIT( VERBE,-2 )
          END IF

          NLAT = JBUF(5)
          NWDS = NLAT

      ELSE IF (VERBE.EQ.'GGDEV')                               THEN

          IF (KIND.NE.'GRID')                                  THEN
              WRITE(6,6002) 'GRID',KIND
              CALL                                 XIT( VERBE,-2 )
          END IF

          NLON = JBUF(5)
          NLAT = JBUF(6)

          NLONM = NLON-MOD(NLON,2)

      END IF

      IF (NLAT.GT.MAXJ) CALL                       XIT( VERBE,-4 )

      NHEM = JBUF(7)

***    ASK FOR WORKING MEMORY.

      ALLOCATE( IBUF(LEN),X(MAX( MAXW,NWDS*NLEV )) )

      GRTYP = 'G'
      IF (PKTYP.EQ.'SQ') GRTYP = GETHIC('GRTYP',JBUF )

      IF (GRTYP.EQ.'G')                                        THEN

***        GAUSSG COMPUTES THE VALUE OF THE GAUSSIAN LATITUDES AND 
***        THEIR SINES AND COSINES FOR THE NH (N TO S). TRIGL2 MAKES
***        THEM GLOBAL OR HEMISPHERIC ACCORDING TO NHEM (S TO N).

                         ILATH = NLAT/2
          IF (NHEM.NE.0) ILATH = NLAT

          CALL GAUSSG( ILATH,SL,WL,CL,RAD,WOSSL )
          CALL TRIGL2( ILATH,SL,WL,CL,RAD,WOSSL,NHEM )

      ELSE IF (GRTYP.EQ.'A' .OR. GRTYP.EQ.'B')                 THEN

          IG2    = GETHIGH('IG2',IBUF )

***        DEFINE THE STARTING LATITUDE.

          IF (IG2.EQ.0)                                        THEN
              IF (NHEM.EQ.0 .OR. NHEM.EQ.2)                    THEN
                  LAT1 = -PIH
              ELSE IF (NHEM.EQ.1)                              THEN
                  LAT1 =  0.0
              END IF
          ELSE IF (IG2.EQ.1)                                   THEN
              IF (NHEM.EQ.0 .OR. NHEM.EQ.1)                    THEN
                  LAT1 = +PIH
              ELSE IF (NHEM.EQ.2)                              THEN
                  LAT1 =  0.0
              END IF
          END IF

          IF (IG2.EQ.1) IG2 = -1
          IF (IG2.EQ.0) IG2 = +1

***        ACCOUNT FOR THE DIFFERENT 'A' AND 'B' GRID
***        OFFSETS AND DEFINE THE LATITUDE DELTA.                      

                         LATSPAN = 2.*PIH
          IF (NHEM.NE.0) LATSPAN =    PIH

          IF (GRTYP.EQ.'A')                                    THEN
              OFFSET = 0.5
              DELTA  = LATSPAN/NLAT
          ELSE IF (GRTYP.EQ.'B')                               THEN
              OFFSET = 0.0
              DELTA  = LATSPAN/(NLAT-1)
          END IF

***        DEFINE THE LATITUDES IN RADIANS AND COS( LAT ).

          RAD(1)     = LAT1 + OFFSET*IG2*DELTA
          CL(1)      = COS( RAD(1) )

          DO  J=2,NLAT
              RAD(J) = RAD(J-1) + IG2*DELTA
              CL(J)  = COS( RAD(J) )
          END DO
                      
      ELSE

***        UNSUPPORTED GRID TYPE.

          CALL                                     XIT( VERBE,-2 )

      END IF

      IF (NHEM.EQ.0)                                           THEN
          RADI = -PIH
          RADF =  PIH
      ELSE IF (NHEM.EQ.1)                                      THEN
          RADI =  0
          RADF =  PIH
      ELSE IF (NHEM.EQ.2)                                      THEN
          RADI = -PIH
          RADF =  0
      END IF

***    READ THE NEXT ARRAY STOP AT EOF. LEV WILL
***    CONTAIN THE PRESSURE LEVEL VALUES IN MILLIBARS.

  200 CALL GETSET2( 1, X,LEV,NLEVA, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              DEALLOCATE( IBUF,X )
              IF (MAXW.EQ.0) GOTO 100

              WRITE(6,6110) NR
              IF (NR.EQ.0) CALL                    XIT( VERBE,-3 )
              CALL                                 XIT( VERBE, 0 )

          END IF

***        IGNORE LABEL OR CHARACTER RECORDS.

          WRITE(KIND,4) IBUF(1)
          IF (KIND.EQ.'LABL' .OR. KIND.EQ.'CHAR') GOTO 200

***        CHECK THAT WE STILL HAVE THE SAME ARRAY SIZES.

          CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

          IF (.NOT.OK .OR.
     +        NLEV.NE.NLEVA)                                   THEN

              DEALLOCATE( IBUF,X )
              CALL PRECEDE( 1,NLEVA )
              GOTO 100

          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          IF ((NLEV.LT.  1 )  .OR.
     +        (NLEV.GT.MAXLEV))                                THEN
              CALL                                 XIT( VERBE,-1 )
          END IF

***        INTEGRATE IN LATITUDE TO COMPUTE THE MEAN.
***        SUBTRACT THE MEAN TO GET THE DEVIATIONS.

          DO  300 L=1,NLEV

              BASE   = (L-1)*NWDS

***            TRANSFER THE ZONAL MEAN TIMES COS(LAT) TO F.

              IF (VERBE.EQ.'ZXDEV')                            THEN
                  DO  J=1,NLAT
                      F(J)=X(BASE+J)* CL(J)
                  END DO
              ELSE IF (VERBE.EQ.'GGDEV')                       THEN
                  DO  J=1,NLAT
                      JR  = BASE+(J-1)*NLON
                      VAL = 0.
                      DO  I=1,NLONM
                          VAL = VAL+X(I+JR)
                      END DO
                      F(J) = VAL*CL(J)/NLONM
                  END DO
              END IF

***             INTEGRATE IN LATITUDE TO GET GLOBAL MEAN.

              IF (GRTYP.EQ.'A' .OR. GRTYP.EQ.'G')              THEN
                  VAL  =  F(1)*(RAD(1)-RADI)
                  VAL2 = CL(1)*(RAD(1)-RADI)
              ELSE
                  VAL  = 0.0
                  VAL2 = 0.0
              END IF

              DO  J=2,NLAT
                  VAL  = VAL  +.5*(  F(J) +  F(J-1))*(RAD(J)-RAD(J-1))
                  VAL2 = VAL2 +.5*( CL(J) + CL(J-1))*(RAD(J)-RAD(J-1))
              END DO

              IF (GRTYP.EQ.'A' .OR. GRTYP.EQ.'G')              THEN
                  VAL  = VAL  +  F(NLAT)*(RADF-RAD(NLAT))
                  VAL2 = VAL2 + CL(NLAT)*(RADF-RAD(NLAT))
              END IF

              FMEAN   = VAL / VAL2

              DO  J=1,NWDS
                  X(BASE+J) = X(BASE+J)-FMEAN
              END DO

              IF (VERBE.EQ.'GGDEV') WRITE(6,6130) FMEAN

  300     CONTINUE

***        PUT THE RESULT ON FILE ZXOUT.

          CALL PUTSET2( 2, X,LEV,NLEV, IBUF,MAXW )
          IF (NR.EQ.0) CALL PRTLAB( IBUF )

      NR = NR+NLEV
      GOTO 200

*---------------------------------------------------------------------
    4 FORMAT(A4)

 6001 FORMAT(' Problems reading ZXIN, NLEV/MAXLEV',3I6)
 6002 FORMAT(' First file should be typed ',A,', found ',A)

 6110 FORMAT(1X,I6,' records processed.')
 6130 FORMAT('+',60X,' Ggdev global mean = ',1PE15.7)

      END
#     endif
