#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      square  XIN XOUT OUTPUT [ -npg VAL1 ]
*
*
*     AUTHORS - R.Laprise ET J.D.Henderson, MAY 14 1983.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/square.ptn,v 4.15 2014/09/25 20:20:54 dugas Exp $
*
* 
*     PURPOSE - CALCULATE THE SQUARE OF ANY NUMERICAL INPUT FIELD.
* 
*
*     INPUT FILE... 
*      XIN  = FILE OF FIELDS TO BE RAISED TO THE POWER 2 
* 
*     OUTPUT FILE... 
*      XOUT = FILE CONTAINING THE SQUARE OF XIN 
*
*
*     (OPTIONAL) COMMAND LINE PARAMETER...
*      NPG  = OUTPUT PACKING DENSITY
*
*
*     NOTE THAT MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER
*     THE "MISSING_VALUE" ENVIRONMENT VARIABLE OR THE "-mvalue"
*     COMMAND-LINE ARGUMENT. PLEASE SEE THE R.DIAG WEB
*     DOCUMENTAION FOR MORE DETAILS.
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       2 UNABLE TO READ FILE XIN
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM square
*    +            ( XIN,        XOUT,      OUTPUT,
*    +       TAPE1= XIN, TAPE2= XOUT,TAPE6=OUTPUT)
 
*     $Log: square.ptn,v $
*     Revision 4.15  2014/09/25 20:20:54  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.14  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 4.13  2011/08/24 22:15:56  dugas
*     Toujours recalculer NWDSG.
*
*     Revision 4.12  2011/08/04 19:20:19  dugas
*     Permettre des grilles de tailles differentes.
*
*     Revision 4.11  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.10  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.9  2006/07/17 21:37:15  dugas
*     Correction suite a l'ajout du mode MVALUE.
*
*     Revision 4.8  2006/07/04 17:53:21  dugas
*     Ajouter le support des donnees manquantes par le biais soit
*      du parametre "-mvalue valeur [epsilon]", soit de la variable
*      d'environnement "MISSING_VALUE=valeur", ou "valeur" est le
*      nombre reel denotant une valeur manquante et "epsilon" est
*      le facteur de precision utilise dans les comparaisons. La
*      valeur par defaut de epsilon est 1%. La seconde methode a
*      preseance sur la premiere.
*
*     Revision 4.7  2006/03/13 22:40:56  dugas
*     Ajouter le parametre de ligne commande -npg.
*
*     Revision 4.6  2005/04/14 18:30:27  dugas
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.5  2003/07/05 14:52:24  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.4  1998/07/03 02:26:41  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1997/09/26  17:39:23  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.2  1997/09/23  15:31:53  armnrbd
*     Activer le mode de calcul a 64 bits.
*
*     Revision 4.1  1996/02/29  20:44:21  armnrbd
*     Imprimer plus d'informations lors du traitement du cas MAXW=0
*     et aussi quand le programme se mets a ignorer les LABLs.
*
*     Revision 4.0  1994/11/17  14:22:04  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:08:28  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:12  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.4  92/11/23  13:50:52  armnrbd
*     Deuxieme iteration avec GETSIZ/GETSIZ2.
*     
*     Revision 1.3  92/10/13  15:57:21  armnrbd
*     Definir JBUF(8)=-32, plutot que JBUF(8)=1.
*     
*     Revision 1.2  92/03/17  15:09:46  armnrbd
*     Ajouter "Header" dans documentation.
*     
*     Revision 1.1  92/03/13  13:26:34  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:42:00  armnrbd
*     Initial revision
*     

***    MAY 14 1983 - R.LAPRISE **ET** NOV 27 1980 - J.D.HENDERSON 

***    HISTORIQUES DES MODIFICATIONS:

***    14 NOV 1990 - B.DUGAS, RPN : VERSION CY920.
***    11 DEC 1990 - B.DUGAS, RPN : ALLOCATION DYNAMIQUE DE MEMOIRE.
***    18 JAN 1991 - B.DUGAS, RPN : AJOUTER UN APPEL A GETLIGN.
***    05 MAI 1991 -    "      "  : UTILISER GETSET2 PLUTOT QUE GETFLD2.
***    12 MAR 1992 - B.DUGAS, RPN : ENLEVER REFERENCE A UNIT5/INPUT.

*---------------------------------------------------------------------
      IMPLICIT     none

      INTEGER      MAXLEV
      PARAMETER  ( MAXLEV = 999 )

      LOGICAL      OK,SPEC,RPBLOC,MVALUE 
      REAL*8       GREAL,GIMAG,EPSILON,MISFLAG
      CHARACTER    TYPE*4,MESSAG*10,VALEUR*5,CNPG*5
      INTEGER      JBUF(taille_entete),LEV(MAXLEV),NF,MAXW,
     +             NLEV,NLEVG,IER,I,L,LIG,NR,JPAK,NPACK,
     +             LEN,NWDS,NWDSG, CMPL

      INTEGER,     DIMENSION(:), ALLOCATABLE :: IBUF
      REAL*8,      DIMENSION(:), ALLOCATABLE :: G

      LOGICAL      SETIO64
      INTEGER      GETSIZ2
      EXTERNAL     GETSIZ2,JCLPNT,SETIO64,MISPAR,
     +             GETSET2,PUTSET2,CMPLBL,XIT,RPBLOC

      CHARACTER    NOMPRG*256
      COMMON      /PROGNAM/ NOMPRG

      DATA         MESSAG / 'AUCUN' /,
     +             CNPG   / ' ' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/square.ptn,v $'

*---------------------------------------------------------------------
***    ACCEDER LES FICHIERS D'E/S.

      NR = 0
      NF = 3

      CALL JCLPNT( NF, 1,2, 6 )

      CALL SETRABT( '&NON' )

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.) 

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('NPG',VALEUR)
          IF (OK) CNPG = VALEUR

      END IF

      IF (CNPG.NE.' ') READ(CNPG,0005) NPACK

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFERS.

  050 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )
      IF (MAXW.LE.0) GOTO 903

      WRITE(TYPE,4) JBUF(1)
      IF (TYPE.EQ.'ZONL') NWDS = JBUF(5)

      ALLOCATE( IBUF(2*LEN),G(MAX( MAXW,NWDS*NLEV )), STAT=IER )

      IF (NR.NE.0) CALL PRTLAB( JBUF )

      NWDSG = NWDS

***    READ THE NEXT SET OF GRIDS FROM FILE XIN. 

  100 CALL GETSET2( 1, G,LEV,NLEVG, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( IBUF,G, STAT=IER )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT(' Square ', 0 ) 

          END IF

***        CHECK MISSING VALUE PARAMETRES.

          CALL MISPAR( MVALUE,MISFLAG,EPSILON )
          IF (MVALUE) EPSILON = ABS( MISFLAG )*EPSILON

***        BY-PASS (I.E. STRIP) LABEL/CHARACTER RECORDS.

          WRITE(TYPE,4) IBUF(1) 
          IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR')              THEN
              IF (MESSAG.NE.'deja donne')                      THEN
                  WRITE(6,6035)
                  MESSAG  = 'deja donne'
              END IF
              GOTO 100
          END IF

***        DETERMINE THE TYPE OF THE FIELD (REAL OR COMPLEX DATA).

          SPEC = (TYPE.EQ.'SPEC' .OR.
     +            TYPE.EQ.'FOUR' .OR.
     +            TYPE.EQ.'CMPL')

          CMPL = 1 ; IF (SPEC) CMPL = 2

***        ENSURE THAT NWDSG IS PROPERLY DEFINED.

          NWDSG = CMPL*IBUF(5)*IBUF(6)
          IF (TYPE == 'ZONL') NWDSG = IBUF(5)

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

***        VERIFY SIZES.

          CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

          IF (.NOT.OK .OR. NLEV.LT.NLEVG)                      THEN
              IF (NWDS*NLEV < NWDSG*NLEVG)                     THEN
                  DEALLOCATE( IBUF,G, STAT=IER )
                  CALL PRECEDE( 1,NLEVG )
                  GOTO 050
              END IF
          END IF

***        SET G = G**2.

          IF (SPEC)                                            THEN

              DO  150 L=1,NLEVG
                  LIG  = (L-1)*NWDSG
                  IF (MVALUE)                                  THEN
                      DO  I=1,NWDSG,2

                          IF (ABS( G(LIG+I)  -MISFLAG ).LE.EPSILON
     +                   .OR. ABS( G(LIG+I+1)-MISFLAG ).LE.EPSILON)
     +                    CYCLE

                          GREAL      = G(LIG+I)
                          GIMAG      = G(LIG+I+1)
                          G(LIG+I)   = GREAL*GREAL-GIMAG*GIMAG
                          G(LIG+I+1) = 2.*GREAL*GIMAG

                      END DO
                  ELSE
                      DO  I=1,NWDSG,2

                          GREAL      = G(LIG+I)
                          GIMAG      = G(LIG+I+1)
                          G(LIG+I)   = GREAL*GREAL-GIMAG*GIMAG
                          G(LIG+I+1) = 2.*GREAL*GIMAG

                      END DO
                  END IF
  150         CONTINUE

          ELSE
 
              DO  200 L=1,NLEVG
                  LIG  = (L-1)*NWDSG
                  IF (MVALUE)                                  THEN
                      DO  I=1,NWDSG
                  
                          IF (ABS( G(LIG+I)-MISFLAG ).LE.EPSILON) CYCLE
                          G(LIG+I) = G(LIG+I)*G(LIG+I)

                      END DO
                  ELSE
                      DO  I=1,NWDSG
                          G(LIG+I) = G(LIG+I)*G(LIG+I)
                      END DO
                  END IF
  200         CONTINUE

          END IF
 
***        SAVE G ON FILE XOUT.

          IF (CNPG.EQ.' ') 
     +        NPACK   = IBUF(8)
              IBUF(8) = NPACK

          CALL PUTSET2( 2, G, LEV,NLEVG, IBUF,MAXW )

      NR = NR+NLEVG
      GOTO 100 

***   E.O.F. ON UNIT #1.

  903 CALL                                         XIT(' Square ',-2 )

*---------------------------------------------------------------------
    4 FORMAT(A4)
    5 FORMAT(BN,I5)

 5010 FORMAT(10X,E10.0)
 6010 FORMAT('0 Square read',I6,' records.')
 6035 FORMAT(' Square is stripping label/character records...')

      END 
#     endif
