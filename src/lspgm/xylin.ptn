#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      xylin  X Y Z INPUT OUTPUT [ -a VAL1 -b VAL2 -c VAL3
*                                  -name VAL4 -npg VAL5 ]
*
*
*     AUTHORS - R.Laprise ET J.D.Henderson, MAY 14 1983.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/xylin.ptn,v 4.17 2014/09/25 20:20:56 dugas Exp $
*
*
*     DESCRIPTION...
*      A CCC FILE ARITHMETIC PROGRAM WHICH...
*
*      ... PRODUCES FILE Z = A*X + B*Y + C
*          (WHERE BOTH X AND Y MAY CONTAIN REAL OR COMPLEX DATA
*           TYPES, BUT THEN C MUST BE 0.0).
*
*
*     PARAMETERS...
*
*      A    = REAL MULTIPLICATIVE CONSTANT FOR FILE X.
*      B    = REAL MULTIPLICATIVE CONSTANT FOR FILE Y.
*      C    = REAL ADDITIVE CONSTANT.
*      NAME = NEW NAME TO BE GIVEN TO THE OUTPUT RECORDS.
*      NPG  = (OPTIONAL) OUTPUT PACKING DENSITY
*
*      NOTE: IF  A, B AND C ARE LEFT BLANK (AND NOT 0), THEY
*            ARE THEN SET TO +1.0,+1.0 AND 0.0, RESPECTIVELY.
*
*      READ( 5,5010 ) A,B,C,NAME,NPG
*5010  FORMAT(10X,3E10.0.1X.A4,I5)
*
*
*     NOTE THAT MISSING VALUE TREATMENT IS SUPPORTED VIA EITHER
*     THE "MISSING_VALUE" ENVIRONMENT VARIABLE OR THE "-mvalue"
*     COMMAND-LINE ARGUMENT. PLEASE SEE THE R.DIAG WEB
*     DOCUMENTAION FOR MORE DETAILS.
*
*
*     EXAMPLE OF INPUT CARD...
*
* XLIN          +1.0      -1.0     1000. NAME
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 NOT AS MANY ARRAYS IN FILE Y AS IN FILE X
*       2 MORE THAN ONE SIZE FOR ARRAYS IN X AND/OR Y
*       3 DATA TYPE IS COMPLEX AND C CONSTANT IS NOT ZERO
*       4 ERROR READING INPUT PARAMETERS
*       5 UNABLE TO READ FILE X
*       6 UNABLE TO READ FILE Y
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM xylin
*    +       (     X,       Y,       Z,       INPUT,      OUTPUT,
*    +       TAPE1=X, TAPE2=Y, TAPE3=Z, TAPE5=INPUT,TAPE6=OUTPUT)
 
*     $Log: xylin.ptn,v $
*     Revision 4.18  2014/09/25 20:20:56  dugas
*     Modifier l'initialisation des variables CCA, CCB et CCC de telle
*      sorte que leurs valeurs par defaut sont maintenant independantes.      
*
*     Revision 4.17  2014/09/25 20:20:56  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.16  2013/11/28 22:24:33  dugas
*     Faire des appels a MISPAR apres chaque lecture.
*
*     Revision 4.15  2011/02/10 16:58:21  dugas
*     Permettre des enregistrement de tailles differentes dans un meme fichier.
*
*     Revision 4.14  2010/02/26 22:37:36  dugas
*      Ajouter le support des donnees manquantes par le biais soit
*       du parametre "-mvalue valeur [epsilon]", soit de la variable
*       d'environnement "MISSING_VALUE=valeur", ou "valeur" est le
*       nombre reel denotant une valeur manquante et "epsilon" est
*       le facteur de precision utilise dans les comparaisons. La
*       valeur par defaut de epsilon est 1%. La seconde methode a
*       preseance sur la premiere.
*
*     Revision 4.13  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.12  2008/04/25 21:38:39  dugas
*     Permettre 20 caracteres pour les parametres reels sur la ligne de commande.
*
*     Revision 4.11  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.10  2005/04/14 18:15:49  dugas
*     Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.9  2004/11/12 16:29:12  dugas
*     Ajouter support des donnees de type CHAR/datyp=3
*
*     Revision 4.8  2003/07/05 14:53:29  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.7  2001/03/16 22:04:56  armnrbd
*     Utiliser les routines PUTHIGH/GETHIGH associees aux IBUFs.
*
*     Revision 4.6  1998/09/18 01:20:54  armnrbd
*     Comparer les XGi plutot que les IGi.
*
*     Revision 4.5  1998/07/23  03:24:16  armnrbd
*     Renverser l'ordre des latitudes pour une grille Lat-Long
*      si IG2 n'est pas le meme pour les deux fichiers standards.
*
*     Revision 4.4  1998/07/03  02:26:48  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1997/09/26  17:39:32  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.2  1997/04/16  14:42:44  armnrbd
*     Ajouter le parametre d'entree NPG.
*     Modifier le message pour l'erreur no. 2.
*
*     Revision 4.1  1996/02/27  20:45:34  armnrbd
*     Modifier le traitement des enregistrements de type LABL.
*
*     Revision 4.0  1994/11/17  14:22:49  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:08:43  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:33  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.4  92/12/04  22:25:55  armnrbd
*     Ajouter les traitement des entrees par RPBLOC.
*     Implanter des valeurs de defaut de type ADDF.
*     
*     Revision 1.3  92/11/12  15:27:35  armnrbd
*     Implantation de GETSIZ/GETSIZ2.
*     
*     Revision 1.2  92/03/17  15:33:12  armnrbd
*     Ajouter "Header" dans documentation.
*     
*     Revision 1.1  92/03/16  12:12:07  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:42:04  armnrbd
*     Initial revision
*     

***    MAY 14 1983 - R.LAPRISE **ET** NOV 27 1980 - J.D.HENDERSON 

***    HISTORIQUES DES MODIFICATIONS:

***    14 NOV 1990 - B.DUGAS, RPN : VERSION CY920.
***    11 DEC 1990 - B.DUGAS, RPN : ALLOCATION DYNAMIQUE DE MEMOIRE.
***    18 JAN 1991 - B.DUGAS, RPN : AJOUTER UN APPEL A GETLIGN.
***    05 MAI 1991 -    "      "  : UTILISER GETSET2 PLUTOT QUE GETFLD2.

*---------------------------------------------------------------------
      IMPLICIT     none

      INTEGER,     PARAMETER :: MAXLEV = 999
      INTEGER,     PARAMETER :: HEAD = taille_entete

      REAL*8       A,B,C, EPSILON,MISFLAG
      LOGICAL      OK,SPEC,RPBLOC, ROTAT,
     +             MVALUE,XMISS,YMISS
      CHARACTER*4  NEWNAM,PKTYP, TYPE,NOM, CHAINE(64)
      CHARACTER*20 LIGNE*256,VALEUR,CCA,CCB,CCC,
     +             CA*10,CB*10,CC*10,CNPG*5
      INTEGER      MAXW,NWDS,NWDSA,LEN,NPACK,NF,
     +             NR,KBUF(HEAD),KPAK,LBUF(HEAD),LPAK, LEV(MAXLEV),
     +             NLEV,NLEVA,NLEVB,MAXW1,MAXW2,LEN1,LEN2,
     +             LIG,LIH,I,K,L,IO,LENLAB, IER, MEM

      INTEGER      NI,NJ
      CHARACTER    GRTYP,GRTYP2
      INTEGER      IG1, IG2, IG3, IG4
      REAL         XG1, XG2, XG3, XG4,
     +             XG12,XG22,XG32,XG42

      INTEGER,     DIMENSION(:), ALLOCATABLE :: IBUF,JBUF
      REAL*8,      DIMENSION(:), ALLOCATABLE :: G,H,TP

      LOGICAL,     EXTERNAL :: SETIO64
      INTEGER,     EXTERNAL :: GETHIGH,GETSIZ2
      CHARACTER*4, EXTERNAL :: GETHIC,GETYP
      EXTERNAL     JCLPNT,GETLIGN,BURNF,XIT,ROWORD,CIGAXG,
     +             GETSET2,PRECEDE,CMPLBL,PUTSET2,GETLAB,PUTLAB

      CHARACTER    NOMPRG*256
      COMMON      /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/xylin.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL SETRABT( '&NON' )
      ROTAT  = .FALSE.

***    ACCEDER LES FICHIERS D'E/S.

      NR = 0
      NF = 5

      CALL JCLPNT( NF, 1,2,3, 5,6 )

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

      CCA     = ' '
      CCB     = ' '
      CCC     = ' '

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          CNPG   = ' '
          NEWNAM = ' '

          OK = RPBLOC('A',VALEUR)
          IF (OK) CCA = VALEUR

          OK = RPBLOC('B',VALEUR)
          IF (OK) CCB = VALEUR

          OK = RPBLOC('C',VALEUR)
          IF (OK) CCC = VALEUR

          OK = RPBLOC('NAME', VALEUR)
          IF (OK) NEWNAM = VALEUR(1:4)

          OK = RPBLOC('NPG',VALEUR)
          IF (OK) CNPG = VALEUR

      ELSE

***        READ A,B,C,NEWNAM AND NPG FROM UNIT 5 (STDIN).
 
          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 903
          ELSE
              READ( LIGNE, 5010,ERR=900,END=903,IOSTAT=IO)
     +                      CA,CB,CC, NEWNAM, CNPG
              CALL BURNF
          END IF

          CCA = CA
          CCB = CB
          CCC = CC

      END IF
 
***    CHECK FOR DEFAULT VALUES.

      IF (CCA.EQ.' ')                                         THEN
          A = +1.0
      ELSE
          READ( CCA, 20,ERR=900,IOSTAT=IO) A
      END IF

      IF (CCB.EQ.' ')                                         THEN
          B = +1.0
      ELSE
          READ( CCB, 20,ERR=900,IOSTAT=IO) B
      END IF

      IF (CCC.EQ.' ')                                         THEN
          C =  0.0
      ELSE
          READ( CCC, 20,ERR=900,IOSTAT=IO) C
      END IF

      WRITE(6,6007) A,B,C

***    ASK FOR NECESSARY MEMORY. READ FIRST SET OF INFO BUFFER.

  050 MAXW2 = GETSIZ2( 2, LBUF,LEN2,NWDS,LPAK, LEV,NLEVB )
      IF (MAXW2.EQ.0) GOTO 906

      IF (PKTYP.EQ.'SQ')                                       THEN

          GRTYP2 = GETHIC ('GRTYP',LBUF )
          IG1    = GETHIGH('IG1'  ,LBUF )
          IG2    = GETHIGH('IG2'  ,LBUF )
          IG3    = GETHIGH('IG3'  ,LBUF )
          IG4    = GETHIGH('IG4'  ,LBUF )

***        RETREIVE THE GRID DESCRIPTORS FOR THE SECOND FILE.

          IF (GRTYP2.EQ.'L' .OR.
     +        GRTYP2.EQ.'N' .OR.
     +        GRTYP2.EQ.'S')                                   THEN
              CALL CIGAXG( GRTYP2, XG12,XG22,XG32,XG42,
     +                             IG1, IG2, IG3, IG4 )
          ELSE
              XG12 = IG1
              XG22 = IG2
              XG32 = IG3
              XG42 = IG4
          END IF

      END IF

      MAXW1 = GETSIZ2( 1, KBUF,LEN1,NWDS,KPAK, LEV,NLEV )
      IF (MAXW1.EQ.0) GOTO 905

      IF (PKTYP.EQ.'SQ')                                       THEN

          GRTYP = GETHIC ('GRTYP',KBUF )
          IG1   = GETHIGH('IG1'  ,KBUF )
          IG2   = GETHIGH('IG2'  ,KBUF )
          IG3   = GETHIGH('IG3'  ,KBUF )
          IG4   = GETHIGH('IG4'  ,KBUF )

***        RETREIVE THE GRID DESCRIPTORS FOR THE FIRST FILE.

          IF (GRTYP.EQ.'L' .OR.
     +        GRTYP.EQ.'N' .OR.
     +        GRTYP.EQ.'S')                                    THEN
              CALL CIGAXG( GRTYP, XG1,XG2,XG3,XG4,
     +                            IG1,IG2,IG3,IG4 )
          ELSE
              XG1 = IG1
              XG2 = IG2
              XG3 = IG3
              XG4 = IG4
          END IF

***        COMPARE GRID DESCRIPTORS.

          IF (GRTYP.NE.GRTYP2)                                 THEN

              WRITE(6,6101) GRTYP, XG1, XG2, XG3, XG4,
     +                      GRTYP2,XG12,XG22,XG32,XG42
              CALL                                 XIT('  Xylin ',-2 )

          ELSE IF (XG1.NE.XG12   .OR.
     +             XG2.NE.XG22   .OR.
     +             XG3.NE.XG32   .OR.
     +             XG4.NE.XG42)                                THEN

              IF ((GRTYP.EQ.'G'  .OR.
     +             GRTYP.EQ.'B'  .OR.
     +             GRTYP.EQ.'A') .AND.
     +            (XG1  .EQ.XG12 .AND.
     +             XG3  .EQ.XG32 .AND.
     +             XG4  .EQ.XG42).AND.
     +            (XG2  .EQ. 0.  .OR.
     +             XG2  .EQ. 1.  .OR.
     +             XG22 .EQ. 0.  .OR.
     +             XG22 .EQ. 1.))                              THEN

***                XG2 INDICATES A ROTATED GRID.
***                ALL OTHER DESCRIPTORS IDENTICAL.

                  ROTAT = .TRUE.

                  WRITE(6,6666)

              ELSE

                  WRITE(6,6101) GRTYP, XG1, XG2, XG3, XG4,
     +                          GRTYP2,XG12,XG22,XG32,XG42
                  CALL                             XIT('  Xylin ',-2 )

              END IF

          END IF

      END IF

      CALL CMPLBL( 0,LBUF, 0,KBUF, OK ) 

      IF (.NOT.OK .OR. NLEV.NE.NLEVB)                          THEN
          WRITE(6,6100) NLEVB ; CALL PRTLAB( LBUF )
          WRITE(6,6100) NLEV  ; CALL PRTLAB( KBUF )
          CALL                                     XIT('  Xylin ',-2 ) 
      END IF

      LEN  = MAX( LEN1, LEN2  )
      MAXW = MAX( MAXW1,MAXW2 )

      WRITE(TYPE,4) KBUF(1)
      IF (TYPE.EQ.'ZONL') NWDS = KBUF(5)

      MEM = MAX( MAXW,NWDS*NLEV )

      ALLOCATE( IBUF(2*LEN),JBUF(2*LEN),
     +          G(MEM),H(MEM),TP(NWDS) )

***    TAKE CARE OF OUTPUT PACKING DENSITY.

      IF (CNPG.NE.' ') READ(CNPG,0005) NPACK

***    READ THE NEXT PAIR OF FIELDS. 

  100 CALL GETSET2( 1, G,LEV,NLEVA, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( IBUF,JBUF, G,H,TP )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT('  Xylin ', 0 ) 

          END IF

***        CHECK MISSING VALUE PARAMETRES FOR FILE X.

          CALL MISPAR( XMISS,MISFLAG,EPSILON )
          IF (XMISS) EPSILON = ABS( MISFLAG )*EPSILON

          NI   = IBUF(5)
          NJ   = IBUF(6)

          WRITE(TYPE,4) IBUF(1)
          IF (TYPE.EQ.'ZONL')                                  THEN
              NWDSA = NI
              NJ    = NI
              NI    = 1
          ELSE
     +    IF (TYPE.EQ.'SPEC' .OR.
     +        TYPE.EQ.'FOUR' .OR.
     +        TYPE.EQ.'CMPL')                                  THEN
              NWDSA = NI * NJ * 2
          ELSE
              NWDSA = NI * NJ
          END IF

      
          IF (NLEV*NWDS < NLEVA*NWDSA)                         THEN
              CALL                                 PRECEDE( 1,NLEVA )
              DEALLOCATE( IBUF,JBUF, G,H,TP )
              GOTO 050
          END IF

          WRITE(TYPE,4) IBUF(1) 

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

***        READ SECOND FIELD.

          CALL GETSET2( 2, H,LEV,NLEVB, JBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN
              DEALLOCATE( IBUF,JBUF, G,H,TP )
              IF (MAXW.EQ.0)                                   THEN
                  CALL PRECEDE( 1,NLEVA )
                  GOTO 050
              END IF
              CALL                                 XIT('  Xylin ',-1 )
          END IF

***        CHECK MISSING VALUE PARAMETRES FOR FILE Y.

          CALL MISPAR( YMISS,MISFLAG,EPSILON )
          IF (YMISS) EPSILON = ABS( MISFLAG )*EPSILON

          MVALUE = (XMISS .OR. YMISS)

          IF (NR.EQ.0) CALL PRTLAB( JBUF )

***        MAKE SURE THAT THE FIELDS ARE STILL THE SAME KIND AND SIZE.

          IF ((TYPE   .NE.'CHAR' .AND.
     +         TYPE   .NE.'LABL') .OR.
     +         IBUF(1).NE.JBUF(1) )                            THEN

              CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

              IF (.NOT.OK .OR. NLEVA.NE.NLEVB )                THEN
                  WRITE(6,6100) NLEVA ; CALL PRTLAB( IBUF )
                  WRITE(6,6100) NLEVB ; CALL PRTLAB( JBUF )
                  CALL                             XIT('  Xylin ',-2 ) 
              END IF

          END IF

***        DETERMINE THE SIZE OF THE FIELD.
***        AS WELL, STOP IF FIELD IS COMPLEX AND B IS NOT 0.

          SPEC = (TYPE.EQ.'SPEC' .OR.
     +            TYPE.EQ.'FOUR' .OR.
     +            TYPE.EQ.'CMPL')

          IF (SPEC .AND. C.NE.0.)                              THEN
              CALL                                 XIT('  Xylin ',-3 ) 
          END IF

          IF (TYPE.NE.'LABL')                                  THEN

              IF (ROTAT)                                       THEN
                  XG2  = GETHIGH('IG2'  ,JBUF )
                  XG22 = GETHIGH('IG2'  ,IBUF )
                  IF (XG2 /= XG22)                             THEN
                      DO  L=1,NLEVA
                          CALL ROWORD( H((L-1)*NWDSA+1),TP,NI,NJ )
                      END DO
                  END IF
              END IF

              IF (TYPE.NE.'CHAR')                              THEN

***                SET G = A*G + B*H + C.

                  DO L=1,NLEVA
                     LIG = (L-1)*NWDSA
                     LIH = (L-1)*NWDSA
                     IF (MVALUE)                               THEN
                        DO I=1,NWDSA
                           IF (ABS(G(LIG+I)-MISFLAG)<=EPSILON) THEN
                              CYCLE
                           ELSE
     +                     IF (ABS(H(LIH+I)-MISFLAG)<=EPSILON) THEN
                              G(LIG+I) = MISFLAG
                           ELSE
                              G(LIG+I) = A*G(LIG+I)+B*H(LIH+I)+C 
                           END IF
                        END DO
                     ELSE
                        DO I=1,NWDSA
                           G(LIG+I) = A*G(LIG+I)+B*H(LIH+I)+C 
                        END DO
                     END IF
                  END DO
 
***                SAVE G ON FILE XOUT AND CHANGE THE IBUF NAME
***                IF NEWNAM IS NON-BLANK. 

                  IF (NEWNAM.NE.' ') READ(NEWNAM,4) IBUF(3)
                  IF (CNPG  .EQ.' ') NPACK       =  IBUF(8)
                  IBUF(8) = NPACK

              END IF

              CALL PUTSET2( 3, G, LEV,NLEVA, IBUF,MAXW )

          ELSE

***            SAVE THE LAST LABEL READ FROM FILE X.

              LENLAB = IBUF(5)

              CALL GETLAB( 0, CHAINE, IBUF,LENLAB, OK )
              WRITE(NOM,4) IBUF(3)
              NLEVA = 1

              IF (NOM.EQ.'LABL')                               THEN
                  CALL PUTLAB( 3, CHAINE, IBUF,LENLAB,
     +                                   .FALSE. , .FALSE. )
              ELSE IF (NOM.EQ.'FILE')                          THEN
                  CALL PUTLAB( 3, CHAINE, IBUF,LENLAB, 
     +                                   .TRUE.  , .FALSE. )
              ELSE IF (NOM.EQ.'INFO')                          THEN
                  CALL PUTLAB( 3, CHAINE, IBUF,LENLAB, 
     +                                   .FALSE. , .TRUE.  )
              END IF

          END IF

      NR = NR+NLEVA
      GOTO 100 

***    E.O.F. ON UNIT #5.
 
  900 IF (IO.NE.0) WRITE(6,6200) IO
  903 CALL                                         XIT('  Xylin ',-4 )

***   E.O.F. ON UNIT #1,#2.

  905 CALL                                         XIT('  Xylin ',-5 )
  906 CALL                                         XIT('  Xylin ',-6 )

*---------------------------------------------------------------------
    4 FORMAT(A4)
    5 FORMAT(BN,I5)  
   20 FORMAT(BN,E20.0)

 5010 FORMAT(10X,3A10,1X,A4,A5)

 6007 FORMAT('0 Xylin A,B,C =',1P3E20.12)
 6010 FORMAT('0 Xylin read ',I6,' pairs.')
 6011 FORMAT('0 Xylin ABORTING after ',I6,' pairs.')
 6100 FORMAT(' nlev=',I5)
 6101 FORMAT(' For first file  GRTYP,XG1,XG2,XG3,XG4= ',A,4F10.3/
     +       ' For second file GRTYP,XG1,XG2,XG3,XG4= ',A,4F10.3)
 6200 FORMAT(' Xylin reports I/O error number ',I3,' on unit 5.')
 6666 FORMAT(/' Note: Arrays in the second file will be inverted'/
     +       '       in the North-South direction to orient them'/
     +       '       as their counterparts in the first file.'/)

      END 
#     endif
