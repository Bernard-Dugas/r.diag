#     if !defined (grille_maximale)
#         define   grille_maximale 200000
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      smooth  GIN GOUT OUTPUT [ -def [GEOM] ]
*
*
*     AUTHOR  - B.Dugas, Jan 13/87.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/smooth.ptn,v 4.8 2014/09/25 20:20:52 dugas Exp $
*
*
*     DESCRIPTION...
*      THIS PROGRAM WILL  CALCULATE A CERTAIN  KIND OF AREA AVERAGE OF 
*      GIN SO THAT GOUT(I,J) CONTAINS THE SUM OF IT'S ADJACENT POINTS. 
*      MORE PRECISELY THE OUTPUT IS : 
*
*                      ( GIN(I-1,J-1)              + GIN(I-1,J+1) ) * GEOM
                                      + GIN(I-1,J)
*        GOUT(I,J) = +   GIN(I  ,J-1) + GIN(I  ,J) + GIN(I  ,J+1) 
*                                     + GIN(I+1,J)
*                    + ( GIN(I+1,J-1)              + GIN(I+1,J+1) ) * GEOM
*
*     NOTES: 1) GIN HAS TO BE A 'GRID' OR 'SUBA' FILE.
*            2) CYCLICAL SYMMETRY IS ASSUMED ONLY IN THE X DIRECTION
*               AND ONLY FOR 'GRID' FILES.
*            3) WHEN THE "-def" COMMAND-LINE PARAMETER IS SPECIFIED,
*               GOUT WILL CONTAIN THE AVERAGE RATHER THAN THE SUM OF
*               THE ADJACENT POINTS.
*            4) BY DEFAULT, THE GEOM PARAMETRE IS EQUAL TO ZERO. A VALUE
*               OF -1 WILL ALSO RESULT IN ZERO. SPECIFYING ANYTHING ELSE
*               WILL SET ITS VALUE TO ONE.
*
*
*     EXIT CONDITIONS...
*      0 NO PROBLEMS
*      1 FOUND OTHER THAN GRID TYPE DATA
*      2 PROBLEMS READING GIN
*      3 PREMATURE EOF ON GIN
*      4 PROBLEM READING GEOM
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM SMOOTH 
*    1              (GIN,         GOUT,       OUTPUT, 
*    2               TAPE5=GIN,   TAPE2=GOUT, TAPE6=OUTPUT) 
 
*     $Log: smooth.ptn,v $
*     Revision 4.8  2014/09/25 20:20:52  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.7  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.6  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.5  1999/06/21 18:40:53  armnrbd
*     Ajouter l'option '-def GEOM'.
*
*     Revision 4.4  1998/07/03 02:26:36  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1998/05/21  20:20:53  armnrbd
*     Modifier la valeur par defaut de taille_entete
*
*     Revision 4.2  1996/11/12  19:41:23  armnrbd
*     Ajouter le support de grilles de type SUBA.
*
*     Revision 4.1  1996/04/30  18:03:08  armnrbd
*     Tenir compte du cas ou ILG1 est un nombre pair.
*
*     Revision 4.0  1994/11/17  14:21:36  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:56:54  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.0  93/02/04  09:14:13  armnrbd
*     Initial revision
*     
***    JAN 13/87 - B.DUGAS. 
 
*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     HEAD
      PARAMETER ( HEAD = taille_entete )
      INTEGER     MAXW
      PARAMETER ( MAXW = grille_maximale ) 

      LOGICAL     OK,DEF,SUBA
      CHARACTER   KIND*4,VALEUR*10
      REAL        OVMEAN,GEOM
      INTEGER     NFIL,NR,I,J,IO,PREV,
     +            ILG,ILG1,ILAT,LAST,NWDS,
     +            IP,IC,IN

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL,       DIMENSION(:), ALLOCATABLE :: GIN,GOUT

      LOGICAL     RPBLOC
      EXTERNAL    JCLPNT,RPBLOC,GETBUF2,XIT,GETFLD2,PUTFLD2

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        DEF / .FALSE. /, GEOM / 0. /
*=======================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/smooth.ptn,v $'

*-----------------------------------------------------------------------
      ALLOCATE( IBUF(HEAD+MAXW),GIN(MAXW),GOUT(MAXW) )

***    ACCEDER LES FICHIERS D'E/S.

      NFIL = 3 
      CALL JCLPNT( NFIL, 1,2, 6 )
 
      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          DEF = RPBLOC('DEFAUT',VALEUR)

          IF (DEF)                                             THEN
              READ( VALEUR, 10, END=904,ERR=904,IOSTAT=IO ) GEOM
              IF (GEOM.NE.-1.) WRITE(6,6000) GEOM
          END IF

      END IF

      IF (GEOM.EQ.-1.) GEOM = 0.
      IF (GEOM.NE. 0.) GEOM = 1.

***    READ IN FIRST INFORMATION BUFFER. 
 
      CALL GETBUF2( -1, IBUF,HEAD,OK )
      IF (.NOT.OK) GOTO 901
 
***    GRIDDED INPUT ? 
 
      WRITE(KIND,'(A4)') IBUF(1) 
      IF (KIND.NE.'GRID' .AND.
     +    KIND.NE.'SUBA') CALL                     XIT(' Smooth ',-1 ) 
 
***    READ-IN GRIDS. 
 
      NR=0 
  100 CALL GETFLD2( 1, GIN, 'GRID'//'SUBA',-1,' ',-1, IBUF,MAXW,OK ) 
 
          IF (NR.EQ.0) CALL PRTLAB2(' IBUF  IN =', IBUF )
 
          IF (.NOT.OK)                                         THEN 
              WRITE(6,6002) NR 
              IF (NR.NE.0)                                     THEN 
                  CALL                             XIT(' Smooth ', 0 ) 
              ELSE 
                  CALL                             XIT(' Smooth ',-2 ) 
              END IF 
          END IF 

          WRITE(KIND,'(A4)') IBUF(1) 
          SUBA = (KIND.EQ.'SUBA')

                                  ILG1 = IBUF(5) 
                                  ILAT = IBUF(6) 

                                  ILG  = ILG1-1
          IF (SUBA         .OR.
     +        MOD( ILG1,2 ).EQ.0) ILG  = ILG1

                                  PREV = ILG1*(ILAT-2)
                                  LAST = PREV+ILG1
                                  NWDS = LAST+ILG1 
 
***        DO IT.
***        START WITH THE FOUR CORNER POINTS OF THE ARRAY, ... 
 
                                   OVMEAN = 1.0
          IF (DEF .AND.     SUBA)  OVMEAN = 1./(2.+2*GEOM)
          IF (DEF .AND..NOT.SUBA)  OVMEAN = 1./(4.+2*GEOM)

          IF (SUBA)                                            THEN

              GOUT(     1) =                 GIN(     1)+GIN(     2)
     +              + GEOM *               ( GIN(ILG1+1)+GIN(ILG1+2) )

              GOUT(LAST+1) =
     *                GEOM *               ( GIN(PREV+1)+GIN(PREV+2) )
     +                     +                 GIN(LAST+1)+GIN(LAST+2)               

          ELSE

              GOUT(     1) =   GIN(     ILG)+GIN(     1)+GIN(     2)
     +                     +                 GIN(ILG1+1)
     +              + GEOM * ( GIN(ILG1+ILG)            +GIN(ILG1+2) )

              GOUT(LAST+1) =   
     +                GEOM * ( GIN(PREV+ILG)            +GIN(PREV+2) )
     +                     +                 GIN(PREV+1)
     +                     +   GIN(LAST+ILG)+GIN(LAST+1)+GIN(LAST+2)

          END IF

          IF (ILG.NE.ILG1)                                     THEN

              GOUT(ILG1)   = GOUT(1) 
              GOUT(NWDS)   = GOUT(LAST+1)

          ELSE IF (SUBA)                                       THEN

              GOUT(ILG1)   =   GIN(     ILG-1)+GIN(     ILG) 
     +              + GEOM * ( GIN(ILG1+ILG-1)+GIN(ILG1+ILG) )

              GOUT(NWDS)   =
     +                GEOM * ( GIN(PREV+ILG-1)+GIN(PREV+ILG) )
     +                     +   GIN(LAST+ILG-1)+GIN(LAST+ILG) 

          ELSE

              GOUT(ILG1) =   GIN(     ILG-1)+GIN(     ILG)+GIN(     1)
     +                   +                   GIN(ILG1+ILG)
     +            + GEOM * ( GIN(ILG1+ILG-1)              +GIN(ILG1+1) )


              GOUT(NWDS) =
     +              GEOM * ( GIN(PREV+ILG-1)              +GIN(PREV+1) )
     +                   +                   GIN(PREV+ILG)
     +                   +   GIN(LAST+ILG-1)+GIN(LAST+ILG)+GIN(LAST+1) 

          END IF

          GOUT(   1  ) = GOUT(   1  ) * OVMEAN
          GOUT(LAST+1) = GOUT(LAST+1) * OVMEAN
          GOUT( ILG1 ) = GOUT( ILG1 ) * OVMEAN
          GOUT( NWDS ) = GOUT( NWDS ) * OVMEAN

***        ... THEN CONSIDER THE FIRST AND LAST ROWS ... 
 
          IF (DEF .AND. SUBA) OVMEAN = 1./(4.+2*GEOM)

          DO 200 I=2,ILG1-1

              GOUT(     I) =   GIN(     I-1)+GIN(     I)+GIN(     I+1)
     +                     +                 GIN(ILG1+I)
     +              + GEOM * ( GIN(ILG1+I-1)            +GIN(ILG1+I+1) )

              GOUT(LAST+I) = 
     +                GEOM * ( GIN(PREV+I-1)            +GIN(PREV+I+1) )
     +                     +                 GIN(PREV+I)
     +                     +   GIN(LAST+I-1)+GIN(LAST+I)+GIN(LAST+I+1)

              GOUT(     I) =   GOUT(     I) * OVMEAN
              GOUT(LAST+I) =   GOUT(LAST+I) * OVMEAN

  200     CONTINUE 
 
***        ... AND FINALLY, DO THE REST OF THE ARRAY. 
 
          IF (DEF) OVMEAN = 1./(5.+4*GEOM)

          IC = 0
          IN = ILG1

          DO 300 J=2,ILAT-1 

              IP = IC
              IC = IN
              IN = IN+ILG1

***            AT THIS POINT, IP POINTS TO THE PREVIOUS ROW, IC TO
***            THE CURRENT ONE AND IN TO THE NEXT ROW OF THE ARRAY.

              IF (.NOT.SUBA)                                   THEN
                  GOUT(IC+1) =
     +                OVMEAN * ( 
     +                  GEOM * ( GIN(IP+ILG)          +GIN(IP+2) )
     +                       +               GIN(IP+1)
     +                       +   GIN(IC+ILG)+GIN(IC+1)+GIN(IC+2)
     +                       +               GIN(IN+1)
     +                + GEOM * ( GIN(IN+ILG)          +GIN(IN+2) ) )
              ELSE
                  GOUT(IC+1) =
     +                OVMEAN * ( 
     +                  GEOM *                         GIN(IP+2)
     +                       +               GIN(IP+1)
     +                       +               GIN(IC+1)+GIN(IC+2)
     +                       +               GIN(IN+1)
     +                + GEOM *                         GIN(IN+2)   )
              END IF

              DO  I=2,ILG-1
                  GOUT(IC+I) =   
     +                OVMEAN * (
     +                  GEOM * ( GIN(IP+I-1)          +GIN(IP+I+1) )
     +                       +               GIN(IP+I)
     +                       +   GIN(IC+I-1)+GIN(IC+I)+GIN(IC+I+1)
     +                       +               GIN(IN+I)
     +                + GEOM * ( GIN(IN+I-1)          +GIN(IN+I+1) ) )
              END DO

              IF (.NOT.SUBA)                              THEN
                GOUT(IC+ILG) =
     +                OVMEAN * ( 
     +                  GEOM * ( GIN(IP+ILG-1)            +GIN(IP+1) )
     +                       +                 GIN(IP+ILG)
     +                       +   GIN(IC+ILG-1)+GIN(IC+ILG)+GIN(IC+1)
     +                       +                 GIN(IN+ILG)
     +                + GEOM * ( GIN(IN+ILG-1)            +GIN(IN+1) ) )
              ELSE
                GOUT(IC+ILG) =
     +                OVMEAN * ( 
     +                  GEOM *   GIN(IP+ILG-1)
     +                       +                 GIN(IP+ILG)
     +                       +   GIN(IC+ILG-1)+GIN(IC+ILG)
     +                       +                 GIN(IN+ILG)
     +                + GEOM *   GIN(IN+ILG-1) )
              END IF

              IF (ILG.NE.ILG1)
     +        GOUT(IC+ILG1)  =   GOUT(IC+1) 

  300     CONTINUE 
 
***        SAVE RESULT GRID. 
 
          CALL PUTFLD2( 2, GOUT, IBUF,MAXW ) 
 
      NR = NR+1 
      GOTO 100 

***    PREMATURE E.O.F. ON UNIT 1. 
 
  901 CALL                                         XIT(' Smooth ',-3 ) 

***    PROBLEM READING DEFAULT PARAMETRE.

  904 IF (IO.NE.0) WRITE(6,6004) IO
      CALL                                         XIT(' Smooth ',-4 )
*---------------------------------------------------------------------

 0010 FORMAT(BN,E10.0)

 6000 FORMAT(' Performing area average. Geometry parametre =',F2.0)
 6002 FORMAT(I10,' Records processed.') 
 6004 FORMAT(' Smooth reports I/O error number ',I3,' reading GEOM.')

      END 
#     endif
