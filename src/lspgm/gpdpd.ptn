#     if !defined (pression_au_toit)
#         define   pression_au_toit 1000.
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      gpdpd  HUM TEMP ES [SP] OUTPUT \ 
*             [ -kind VAL1 -c VAL2 -d VAL3 -i VAL4 [VAL5]  -def [SPWH][AABB] ]
*
*
*     DESCRIPTION...
*      gpdpd  - COMPUTES DEW POINT DEPRESSION FROM T,SHUM OR RHUM
*
*
*     AUTHOR  - J.D.Henderson, DEC 04/80.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/gpdpd.ptn,v 4.25 2014/09/25 20:20:49 dugas Exp $
*
*
*     PURPOSE - CONVERTS PRESSURE LEVEL GRID FILES OF TEMPERATURE AND
*               SPECIFIC OR RELATIVE HUMIDITY TO DEW POINT DEPRESSION.
*               1) CALCULATIONS ARE DONE WITH THE RPN PHYSIC'S SET
*                  OF THERMODYNAMIC CONVERSION FUNCTIONS (I.E. FINTERN)
*                  RATHER THAN THE FORMULAS USED IN CCCma MODEL.
*               2) IF TEMP CONTAINS VIRTUAL TEMPERATURES (I.E. 'VT'),
*                  HUM MUST CONTAIN SPECIFIC HUMIDITIES.
*
*
*     INPUT FILES...
*      HUM  = SPECIFIC OR RELATIVE HUMIDITY ARRAY.
*      TEMP = TEMPERATURE OR VIRTUAL TEMPERATURE ARRAY. Note that
*             the assumed units for 'VT' are either centigrades
*             (for RPN/CMC files) or kelvins (for CCCma files).
*     [SP   = SURFACE PRESSURE (MB), ONLY USED WHEN COORD .NE. 'PRES'.
*             NOTE THAT ITS ACCEPTED VARIABLE NAMES ARE 'P0' OR 'PS']
*
*     OUTPUT FILE...
*      ES   = DEW POINT DEPRESSION ARRAYS.
*
*
*     (COMMAND-LINE) INPUT PARAMETERS...
*
*      COORD (kind) = 'SIG'/'GEM'/'GEM2'/'GEM3'/'GEM4'/'PRES'.
*      PTOIT (c)    = CONSTANT PRESSURE (PA) AT THE LID OF MODEL WHEN
*                     (COORD.NE.'PRES') (DEF = pression_au_toit).
*
*      The next parametres are only used when COORD='GEMx', x=2,3 or 4.
*
*      PREF  (d)  = Ref pressure (DEF 80000 PA, except for 'GEM4', where
*                   the only acceptable value is 100000 Pa).
*      R     (i)  = Reference exponent (DEF 1.0)
*      R2    (i2) = Second reference exponent if COORD='GEM4' (DEF 1.0)
*
*
*      Notes: 1) Water and ice phases are considered in the conversion
*                when the command line parameter "-def" is specified without
*                a value. However, if a 'AABB' value is defined (see item 4
*                for more details), a 'SPWH' character sequence must also
*                be added to activate this option, as in "-def AABB/SPWH".
*                Otherwise, only water phase is considered.
*             2) 'GEM' is the original gem eta coordinate, while 'GEM2' is
*                the first gem hybrid coordinate as implemented by Edouard
*                & Gravel in GEM/DM v2.2.0. 'GEM3' is the normalized version
*                that was implemented in the v2.3.1 GEM/DM. 'GEM4' is the
*                staggered hybrid coordinate version of GEM/DM from v4.0.6.
*             3) The default value of COORD is determined by the file type
*                and the program will also try to determine it by the
*                (internal) coding used for the coordinate itself.
*             4) Specifying "-def AABB" will force the attempt to read
*                a text file called aabb.nml, containing a FORTRAN
*                namelist AABB_NML, which in turns will hold two arrays,
*                A and B such that the local pressure at level K, PL(K),
*                can be calculated as "A(K)+B(K)*PS" for most coordinates.
*                For 'GEM4', the corresponding formula to calculate the
*                K-level natural logaritm of the local pressure is rather
*                "A(K)+B(K)*LN(PS/PREF)". The A and B terms should be such
*                as to produce local pressures in Pa units, even though PS
*                is usually read in units of hPa (before being converted
*                to Pa units internally). In all cases, this approach then
*                by-passes the normal COORD-related calculations for PL(K).
*                                      *************
*                Given the above, correctly using the AABB option with a
*                GEM4 file requires specifying the "-kind GEM4" argument.
*                                      *************
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 UNABLE TO READ HUMIDITY FILE
*       2 FOUND DATA OTHER THAN TYPE 'GRID' OR 'SUBA'
*       3 HUMIDITY FILE IS NOT SHUM OR RHUM
*       4 PREMATURE EOF ON HUMIDITY FILE 
*       5 PREMATURE EOF ON TEMPERATURE FILE 
*       6 HUMIDITY AND TEMPERATURE ARRAYS NOT THE SAME SIZE
*       7 VIRTUAL TEMPERATURE NOT SUPPORTED WITH RELATIVE HUMIDITY
*       8 EITHER SP IS SPECIFIED WHEN IT SHOULD NOT,
*         OR IT IS NOT SPECIFIED WHEN IT SHOULD
*       9 PREMATURE EOF ON SURFACE PRESSURE FILE
*      10 SURFACE PRESSURE AND TEMPERATURE ARRAYS NOT THE SAME SIZE
*      11 UNSUPPORTED TYPE OF VERTICAL COORDINATE IN COORD ARGUMENT
*      12 PROBLEM READING COMMAND-LINE PARAMETRE
*      14 UNABLE TO ALLOCATE WORKING MEMORY
*      15 SP DOES NOT CONTAIN SURFACE PRESSURES FOR EARTH
*      16 UNSUPPORTED VERTICAL COORDINATE FOUND IN HUM
*      17 INPUT FILE AND "COORD" MISMATCH
*      18 UNABLE TO FIND A GEM4 '!!' RECORD
*      20 UNABLE TO READ AABB NAMELIST
*      21 MORE THAN ONE VERTICAL COORDINATE IN GPHUM
*      22 WRONG NUMBER OF A,B IN AABB
*      23 UNRECOGNIZED -DEF ARGUMENT VALUE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM gpdpd
*     PROGRAM GPDPD (GPHUM,       GPTEMP,       GPES,      INPUT,
*    1                                                     OUTPUT,
*    2        TAPE11=GPHUM,TAPE12=GPTEMP,TAPE13=GPES,TAPE5=INPUT,
*    3                                               TAPE6=OUTPUT)
*     -------------------------------------------------------------

*     $Log: gpdpd.ptn,v $
*     Revision 4.27  2018/06/14 15:15  dugas
*     - Allocation de max( MAXW,NWDS ) mots, au lieu de MAXW.
*     - Autres modifications des appels a ALLOCATE pour GFORTRAN.
*
*     Revision 4.26  2016/10/29 20:28  dugas
*     - Ajouter le support de GEM4.
*     - Modifications syntaxiques de type F77 --> F90.
*     - Modifications au traitement des arguments "-def".
*     - Usage des nouveaux comdecks toc_gest_1.cdk, toc_gest_2.cdk
*       et set_a_b_from_AABB.cdk.
*
*     Revision 4.25  2014/09/25 20:20:49  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.24  2014/09/02 22:29:03  dugas
*     Verifier que le nombre de parametres lus dans aabb.nml est correct.
*
*     Revision 4.23  2013/12/18 21:56:33  bernard
*      - Modifier le traitement des erreurs associees a la lecture du fichier
*        namelist aabb.nml.
*
*     Revision 4.22  2013/10/16 18:53:48  bernard
*     Ajouter des details au format d'erreur 6014.
*
*     Revision 4.21  2012/05/17 21:12:12  dugas
*     - Nouveaux code d'erreurs.
*     - Verification que la pression de surface est appropriee pour notre terre.
*     - Utiliser ALLOCATE plutot que HPALLOC pour la memoire de travail.
*     - Lecture du fichier namelist aabb.nml. Celui-ci doit contenir le
*       namelist FORTRAN AABB_NML, qui contient a son tour les deux
*       vecteurs verticaux A et B. Ces derniers sont utilises dans
*       dans le calcul de la pression locale (PL=A+B*PS).
*
*     Revision 4.20  2011/09/16 17:54:03  dugas
*     Ajouter la coordonnee ET16.
*
*     Revision 4.19  2009/09/08 20:46:22  dugas
*     Initialiser PR(NLEV)=1.0 si NLEV=1 (pour fichiers SQ).
*
*     Revision 4.18  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.17  2008/04/28 15:41:58  dugas
*     Ne plus tenir compte du cas non-SQ98.
*
*     Revision 4.16  2007/12/20 21:10:29  dugas
*     - Utiliser CONVPR pour decoder les niveaux verticaux.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.15  2005/04/14 16:56:20  dugas
*     Proteger PTOIT,PREF,R lors de l'appel a LIRPT.
*
*     Revision 4.14  2004/12/10 00:41:05  dugas
*     Conversion des unites de VT.
*
*     Revision 4.13  2002/09/17 17:54:59  dugas
*     Modifier/simplifier le traitement des coordonnees verticales hybrides
*      de GEM (v2.2.0 et v2.3.1). Utilisation systematique de GETKIND et
*      definition du type de coordonnee par defaut selon le genre de
*      fichier rencontre (CCC ou RPN).
*
*     Revision 4.12  2002/02/02 00:58:05  dugas
*     Les coordonnees verticales de type SIG et ETxx du GCM/CCCma,
*      de meme que les coordonnees GEM2 (v2.2.1) et GEM3 (v2.3.1)
*      sont maintenant supportees.
*
*     Revision 4.11  2002/01/14 15:33:53  dugas
*     Ajouter le support de la coordonnee verticale GEM3 (v2.3.1).
*
*     Revision 4.10  2001/03/16 21:58:15  armnrbd
*     Ajouter le support de la coordonnee GEM2 (hybride Edouard-Gravel).
*
*     Revision 4.9  2000/04/07 18:57:54  armnrbd
*     Ajouter le support des coordonnes 'SIG', et 'GEM'.
*
*     Revision 4.8  1999/03/16 18:19:30  armnrbd
*     Modifier selon la routine mhuaes (FINTERN).
*
*     Revision 4.7  1998/07/03 02:26:28  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.6  1998/05/21  20:20:49  armnrbd
*     Modifier la valeur par defaut de taille_entete
*
*     Revision 4.5  1997/09/26  17:38:58  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.4  1997/09/04  19:39:24  armnrbd
*     Utiliser GETSIZ2 pour determiner la taille du probleme.
*
*     Revision 4.3  1997/05/30  18:24:56  armnrbd
*     Utiliser le common EPS pour les valeurs de A,B,EPS1 et EPS2.
*
*     Revision 4.2  1996/11/12  19:41:23  armnrbd
*     Ajouter le support de grilles de type SUBA.
*
*     Revision 4.1  1995/05/31  14:08:08  armnrbd
*     Convertir TT en degres Kelvin (fichiers SQI).
*
*     Revision 4.0  1994/11/17  14:20:32  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:56:17  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.2  93/06/08  21:56:13  armnrbd
*     Implanter le support de RHUM (en plus de celui de SHUM).
*     
*     Revision 1.1  92/11/09  19:42:20  armnrbd
*     Implantation de GETSIZ/GETSIZ2.
*     
*     Revision 1.0  92/04/29  01:28:08  armnrbd
*     Initial revision
*     
*     MAY 11/83 - R.LAPRISE.
*     DEC 04/80 - J.D.HENDERSON

*-----------------------------------------------------------------------
      use diag_toc, only: GetTOC, LirTOC, LopTOC

      IMPLICIT    none

      INTEGER,    PARAMETER :: MAXLEV = 999
      REAL,       PARAMETER :: PTMIN = pression_au_toit
      INTEGER,    PARAMETER :: HEAD = taille_entete

      REAL(8)     PTOIT8,PREF8,R8,R28, E,C,TD
      LOGICAL     OK,OK2,SHUM,SPWH,MODETA,AABB
      REAL        PRES,T,Q,SATQ,VT,PREF,PREF0,
     +            CORR1,CORR2,R,R2,R0,R20,PTOIT,
     +            PTOIT0,AMIN,AMAX,AMEAN, BIGBIN
      INTEGER     I,L,L0,LL,IER,TYPE,NFF,NRECS,NWDS,IO,IUN, NI,NJ,
     +            LEV(MAXLEV),NLEV,NLEV2,MAX1,MAX2,MAX3,LEN1,I0,J0,
     +            LEN2,LEN3,HUM,MAXW,KBUF(HEAD),LBUF(HEAD),IN1,
     +            MBUF(taille_entete),KPAK,LPAK,MPAK,VKIND,NSL
      CHARACTER   VALEUR*10,VKINDC*16,PKTYP*2,CHECK*2,GRTYP
      CHARACTER*4 KIND,NAME,ES,NOMT,NOMP,COORD,VERBEX*8

      INTEGER     TOC_NBR,IG10,IG20,IG1,IG2

      INTEGER,    DIMENSION(:),POINTER            :: LEVT
      REAL,       DIMENSION(:),POINTER            :: PR
      REAL,       DIMENSION(:),ALLOCATABLE,TARGET :: ETA

      REAL        A(MAXLEV+1), B(MAXLEV+1)
      NAMELIST   /AABB_NML/ A,B

      INTEGER,    DIMENSION(:), ALLOCATABLE        :: IBUF,JBUF
      REAL,       DIMENSION(:), ALLOCATABLE        :: F,G, PS

      ! nullify local_pressure which is used in LoPTOC and has to be initialized
      real,       dimension(:,:,:), save, pointer  :: local_pressure=>null()
      REAL,       DIMENSION(:,:), ALLOCATABLE      :: PS2D

      LOGICAL,    EXTERNAL :: RPBLOC
      CHARACTER*4,EXTERNAL :: GETYP,GETHIC
      INTEGER,    EXTERNAL :: GETSIZ,GETSIZ2,GETKIND,GETHIGH
      EXTERNAL    JCLPNT,CONVPR,XIT,LIRPT,GETPT,
     +            SETPT,GETFLD2,CMPLBL,PUTFLD2,
     +            INCTDIA,WRITLEV,GENAB,
     +            SETKIND,FMMM2

      INTEGER,    EXTERNAL :: FCLOS,FNOM

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
#     include "consdia.cdk"
#     include "dintern.cdk"
#     include "fintern.cdk"
      DATA        CHECK/  ' '    /
      DATA        ES   /  'ES'   /
      DATA        AABB,MODETA,SPWH / 3*.FALSE. /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/gpdpd.ptn,v $'

*---------------------------------------------------------------------
      ALLOCATE( ETA(MAXLEV) )
      PR => ETA ! PR and ETA are equivalent.

      NFF = 5 ; IN1 = 11
      CALL JCLPNT( NFF, IN1,12,13,14, 6 )
      CALL INCTDIA

      VERBEX = '  Gpdpd '

      PKTYP = GETYP( IN1 )

      COORD ='DEF'
      PTOIT = PTMIN
      PREF  = 80000.
      PREF8  =-1.0
      R      = 1.0
      R2     = 1.0
      R0     =-1.0
      R20    =-1.0

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('KIND',VALEUR)
          IF (OK) COORD = VALEUR

          OK = RPBLOC('C',VALEUR)
          IF (OK) READ(VALEUR,0010,END=912,ERR=912,IOSTAT=IO) PTOIT

          OK = RPBLOC('D',VALEUR)
          IF (OK) READ(VALEUR,0010,END=912,ERR=912,IOSTAT=IO) PREF8

          IF (COORD == 'GEM4')                                 THEN
              OK = RPBLOC('I2',VALEUR)
              IF (OK) READ(VALEUR,0010, END=912,ERR=912,IOSTAT=IO ) R20
          END IF

          OK = RPBLOC('I',VALEUR)
          IF (OK) READ(VALEUR,0010,END=912,ERR=912,IOSTAT=IO) R

          OK = RPBLOC('DEFAUT',VALEUR)
          IF (OK)                                              THEN
              IF (VALEUR /= ' ') CALL LEADBLK( VALEUR )
              IF (VALEUR == '-1')                              THEN
                  SPWH = OK
              ELSE IF (VALEUR /= ' ')                          THEN
                  CALL low2up( VALEUR,VALEUR )
                  IF (index( VALEUR,'AABB' ) > 0) AABB = OK
                  IF (index( VALEUR,'SPWH' ) > 0) SPWH = OK
                  IF (.NOT.(SPWH .OR. AABB))                   THEN
                      WRITE(6,6023) TRIM( VALEUR )
                      CALL                         XIT( Verbex ,-23)
                  END IF
              END IF
          END IF

      END IF

      IF (SPWH) WRITE(6,6000)

***    ACCOUNT FOR DEFAULT TREATMENT.

      IF (COORD.NE.' ') CALL LEADBLK( COORD )
      IF (COORD.EQ.' ') COORD = 'DEF'

      IF (AABB .AND. COORD == 'DEF')                           THEN
          COORD  = 'GEM'
          VKINDC = 'ETA' ! i.e. ETA or SIGMA
      END IF

      IF (R0  > 0.) R  = R0
      IF (R20 > 0.) R2 = R20

      IF (PREF8 <= 0.0_8)                                      THEN
          ! Reset PREF8 for GEM4. PREF is already set otherwise.
          IF (COORD == 'GEM4') PREF8 = 100000.
      ELSE IF (COORD == 'GEM4')                                THEN
          PREF8 = 100000. ! This is the only allowed value.
      ELSE
          PREF = PREF8
      END IF

      IF (COORD     .NE.'DEF'  .AND.
     +    COORD     .NE.'SIG'  .AND.
     +    COORD     .NE.'ETA ' .AND.
     +    COORD     .NE.'ET10' .AND.
     +    COORD     .NE.'ET15' .AND.
     +    COORD     .NE.'ET16' .AND.
     +    COORD(1:3).NE.'GEM'  .AND.
     +    COORD     .NE.'PRES' )                               THEN
              WRITE(6,6011) COORD
              CALL                                 XIT( VERBEX ,-11) 
      ELSE
     +IF (PKTYP == 'SQ')                                       THEN

!!!       IF (COORD == 'DEF'  .OR.
          IF (COORD == 'GEM2' .OR.
     +        COORD == 'GEM3' )
     +        CALL SETPT( PTOIT,PREF,R )

          IF (COORD /= 'DEF')                                  THEN
              If (COORD == 'GEM'   .or.
     +            COORD == 'GEM2') VKINDC = 'ETA'
              If (COORD == 'PRES') VKINDC = 'PRESSION'
              If (COORD == 'GEM3'  .or.
     +            COORD == 'GEM4') VKINDC = 'HYBRIDE'
          END IF

      END IF

***    GET SIZES FROM HUM AND TEMP FILES. STOP IF NOT GRID/SUBA.

      MAX2 = GETSIZ2( 12, LBUF,LEN2,NWDS,LPAK, LEV,NLEV2 )
      MAX1 = GETSIZ2( IN1, KBUF,LEN1,NWDS,KPAK, LEV,NLEV )

      MAXW = MAX( MAX1,MAX2 ) ; NI = KBUF(5) ; NJ = KBUF(6)

      IF (PKTYP.EQ.'SQ' .AND. .NOT.AABB)                       THEN

***        ATTEMPT TO DEFINE VERTICAL LEVEL INFO FROM HY OR !! RECORDS.

#         define SET_VKINDC
#         include "toc_gest_1.cdk"

      ELSE IF (.NOT.AABB)                                      THEN

          VKINDC = 'ETA' ; VKIND = 2
          IF (COORD.EQ.'DEF' ) COORD  = 'PRES'
          IF (COORD == 'PRES') VKINDC = 'PRESSION'

      END IF

      CORR1 = LOG( 100. )
      IF (COORD == 'GEM4') CORR2 = LOG( PREF8 ) ! Used in AABB-mode

      NSL = NLEV

      DO  L=1,NLEV
          CALL CONVPR( LEV(L), PR(L), VKIND, -2 )
          IF (COORD.NE.'PRES' .AND. VKIND.EQ.2) PR(L) = 0.001 * PR(L)
      END DO

      IF (PKTYP     /= 'SQ'   .AND.
     +    COORD     /= 'PRES' .AND.
     +    LEV(NLEV) ==  1   ) PR(NLEV) = 1.0

      IF (COORD.NE.'GEM2' .AND.
     +    COORD.NE.'GEM3' .AND. COORD.NE.'GEM4')               THEN
          WRITE(6,6120) PTOIT
      END IF
 
      CALL WRITLEV( PR,NLEV,COORD )

      CALL CMPLBL( 0,KBUF, 0,LBUF, OK )

      IF ((COORD.NE.'PRES' .AND. NFF.NE.4) .OR.
     +    (COORD.EQ.'PRES' .AND. NFF.NE.3) )                   THEN
          WRITE(6,6008)
          CALL                                     XIT( VERBEX ,-8 )
      END IF

      IF (COORD.NE.'PRES')                                     THEN

***        GET SIZE OF SURFACE PRESSURE FILE.

          MAX3 = GETSIZ ( 14, MBUF,LEN3,NWDS,MPAK )
          MAXW = MAX( MAXW,MAX3 )

          CALL CMPLBL( 0,KBUF, 0,MBUF, OK2 )

          OK = (OK .AND. OK2)

      END IF

      IF (NLEV.LT.1 .OR. NLEV.NE.NLEV2  .OR.                           
     +    .NOT.OK   .OR. NLEV.GT.MAXLEV .OR.
     +    MAX1.EQ.0 .OR. MAX2.EQ.0      ) CALL     XIT( VERBEX ,-1 )

      WRITE(6,6130) TRIM( COORD )

      IF (AABB)                                                THEN

***        A and B are read from namelist file 'aabb.nml'.

#         define NSLM1_NOT_OK
#         include "set_a_b_from_AABB.cdk"

      ELSE IF (COORD.NE.'PRES')                                THEN

          IF (COORD.EQ.'SIG') PTOIT = 0.0

          IF (COORD(1:2).EQ.'ET')                              THEN

***            EVALUATE THE PARAMETERS OF THE
***            ETA VERTICAL DISCRETIZATION.

              CALL COORDAB( A,B, NSL,ETA, COORD,PTOIT )

          ELSE IF (COORD.EQ.'GEM2' .OR.
     +             COORD.EQ.'GEM3')                            THEN

              IF (.NOT.MODETA .AND. COORD.EQ.'GEM3')           THEN

                  MODETA =.TRUE.

                  ETA(1:NSL) = ETA(1:NSL)
     +                       + ( 1.0 - ETA(1:NSL) ) * PTOIT / PREF

              END IF

              WRITE(6,6120) PTOIT,PREF,R

              CALL GENAB( A,B, ETA, PTOIT,PREF,R, NSL )

          ELSE IF (COORD.EQ.'GEM')                             THEN
              
***            For GEM, PRLOC = PTOIT + ETA(:) * ( PS(:) - PTOIT )

              A(1:NSL) = PTOIT*(1.0-ETA(1:NSL))
              B(1:NSL) = ETA(1:NSL)

          ELSE IF (COORD == 'GEM4')                            THEN

              WRITE(6,6120) PTOIT,PREF,R,R2
              
          END IF

      ELSE

***        CONVERT PR TO PASCAL.

          PR(1:NLEV) = 100. * PR(1:NLEV)

      END IF

      TYPE = KBUF(1)
      HUM  = KBUF(3)
      WRITE(KIND,4) TYPE
      WRITE(NAME,4) HUM

      IF (KIND.NE.'GRID' .AND.
     +    KIND.NE.'SUBA') CALL                     XIT( VERBEX ,-2 )

***    ALLOCATE WORK SPACE.

      ALLOCATE( IBUF(HEAD+MAXW),F(MAX( MAXW,NWDS )),
     +          JBUF(HEAD+MAXW),G(MAX( MAXW,NWDS )),
     +                                    STAT=IER )
      IF (IER /= 0)     GOTO 914
      IF (COORD /= 'PRES')                                     THEN
          ALLOCATE( PS(MAX( MAXW,NWDS )), STAT=IER )
          IF (IER /= 0) GOTO 914
      END IF
      IF (COORD == 'GEM4')                                     THEN
          ALLOCATE( PS2D(NI,NJ),          STAT=IER )
          IF (IER /= 0) GOTO 914
      END IF


***    CHECK THAT THE MOISTURE VARIABLE IS SUPPORTED.

      IF (NAME.EQ.'SHUM' .OR. NAME.EQ.'HU')                    THEN
          SHUM = .TRUE.
      ELSE IF (NAME.EQ.'RHUM' .OR. NAME.EQ.'HR')               THEN
          SHUM = .FALSE.
      ELSE
          CALL                                     XIT( VERBEX ,-3 )
      END IF

***    LEVEL LOOP OVER ALL MOISTURE LEVELS.

      NRECS = 0
  100 CONTINUE

          DO 300 L=1,NLEV

***            GET THE NEXT PAIR OF HUM,T FIELDS.

  125         CALL GETFLD2( IN1, F, 'GRID'//'SUBA',-1,' ',LEV(L), 
     +                             IBUF,MAXW,OK )


***            CHECK FOR (VERTICAL) REFERENCE RECORD CHANGES.

#             define SET_L_EQUAL_1
#             include "toc_gest_2.cdk"

              IF (.NOT.OK)                                     THEN
                  WRITE(6,6010) NRECS
                  IF (NRECS.EQ.0)                              THEN
                      CALL                         XIT( VERBEX ,-4 )
                  ELSE
                      CALL                         XIT( VERBEX , 0 )
                  END IF
              ELSE

                  WRITE(NAME,4) IBUF(3)

                  IF (     SHUM .AND. NAME.NE.'SHUM'
     +                          .AND. NAME.NE.'HU'  ) GOTO 125
                  IF (.NOT.SHUM .AND. NAME.NE.'RHUM'
     +                          .AND. NAME.NE.'HR'  ) GOTO 125

              END IF

              IF (NRECS.EQ.0) CALL PRTLAB( IBUF )

  150         CALL GETFLD2( 12, G, 'GRID'//'SUBA',IBUF(2),' ',LEV(L), 
     +                             JBUF,MAXW,OK )

                  IF (.NOT.OK)                                 THEN
                      WRITE(6,6010) NRECS
                      CALL                         XIT( VERBEX ,-5 )
                  END IF

                  WRITE(NOMT,4) JBUF(3)

              IF (NOMT.NE.'VT' .AND. NOMT.NE.'TT'
     +                         .AND. NOMT.NE.'TEMP') GOTO 150

              IF (NRECS.EQ.0) CALL PRTLAB( JBUF )

***            CHECK THAT FIELDS ARE SAME SIZE.

              CALL CMPLBL( 0,IBUF, 0,JBUF, OK )

              IF (.NOT.OK)                                     THEN
                  CALL PRTLAB( IBUF ) ; CALL PRTLAB( JBUF )
                  CALL                             XIT( VERBEX ,-6 )
              END IF

***            WE HAVE NO FUNCTION THAT USES RELATIVE HUMIDITY
***            AND VIRTUAL TEMPERATURE TO DO THE CONVERSION.

              IF (.NOT.SHUM .AND. NOMT.EQ.'VT')
     +            CALL                             XIT( VERBEX ,-7 )
                  
***            ACCOUNT FOR TEMPERATURES IN DEGREES C.

              IF (NOMT.EQ.'TT' .OR.
     +           (NOMT.EQ.'VT' .AND. PKTYP.EQ.'SQ'))           THEN
                  DO  I=1,NWDS
                      G(I) = G(I)+TCDK
                  END DO
              END IF

              IF (COORD.NE.'PRES' .AND. L.EQ.1)                THEN

***                READ THE CORRESPONDING SURFACE PRESSURE FIELD.

  175             CALL GETFLD2( 14, PS, 'GRID'//'SUBA',IBUF(2),' ',-1,
     +                                  JBUF,MAXW,OK )

                  IF (.NOT.OK)                                 THEN
                      WRITE(6,6010) NRECS
                      CALL                         XIT( VERBEX ,-9 )
                  ELSE
                      WRITE(NOMP,4) JBUF(3)
                      IF (NOMP.NE.'P0' .AND. NOMP.NE.'PS') GOTO 175
                  END IF

                  IF (NRECS.EQ.0) CALL PRTLAB( JBUF )

***                CHECK THAT FIELDS STILL ARE THE SAME SIZE.

                  CALL CMPLBL( 0,IBUF, 0,JBUF, OK )

                  IF (.NOT.OK)                                 THEN
                      CALL PRTLAB( IBUF ) ; CALL PRTLAB( JBUF )
                      CALL                         XIT( VERBEX ,-10)
                  END IF

***                CONVERT PS TO PASCAL.

                  PS = 100.* PS

***                Check that PS really contains earth surface pressures in Pascals. 

                  IF (CHECK /= 'OK')                           THEN
                     CALL FMMM2( AMIN,AMAX,AMEAN, PS,NWDS )
                     IF (AMIN <  33000. .OR.
     +                   AMAX > 121200.) CALL      XIT( VERBEX ,-15)
                     CHECK = 'OK'
                  END IF

                  if (COORD == 'GEM4')                         THEN

                      IF (AABB)                                THEN

                          PS2D(1:NWDS,1) = LOG( PS(1:NWDS) )
 
                          IF (.not.ASSOCIATED( local_pressure ))   THEN
                              allocate( local_pressure( NI,NJ,NLEV ), STAT=IER )
                              IF (IER /= 0) GOTO 914
                          END IF

                          DO  L0=1,NSL
                              ! Calculate A(L)+B(L)*LN(PS/PREF)
                              local_pressure(:,:,L0) = 
     +                        A(L0)+B(L0)*(PS2D(:,:)-CORR2)
                          END DO

                      ELSE

***                    COMPUTE LOG OF LOCAL PRESSURE.

                           PS2D(1:NWDS,1) = PS(1:NWDS)
                           CALL LoPTOC( local_pressure, lev(1:nlev),
     +                                 PS2D, IG1,IG2 )

                      END IF

                      local_pressure = EXP( local_pressure )

                  END IF

              END IF

***            IF MOISTURE FILE IS RHUM, CONVERT TO SHUM. 
***            SATURATION VAPOR CONTENT IS THEN CALCULATED

***            USING SATQ = FOQSA( T,PRES )    *** OR ***
***                         FOQST( T,PRES ) (DEPENDING ON SPWH)
***                  Q    = RHUM*SATQ
              
***            COMPUTE DEW POINT DEPRESSION FROM THE SPECIFIC
***            HUMIDITY Q (NOTE: IF Q IS GREATER OR EQUAL 1.E-9)

***            USING E    = FOEFQ( Q,PRES )
***            AND THE INVERSE OF FOEWA, WHICH STATES THAT
***              LN(E/E0) = 17.269*(TD-TRPL)/(TD-35.86)

***            IF SPWH IS TRUE AND THE VALUE OF TD OBTAINED WITH
***            THE ABOVE APPROACH IS LESS THAN TRPL, WE INVERT
***              LN(E/E0) = 21.875*(TD-TRPL)/(TD-7.66)

***            WHERE E0 = 610.78 Pa, TRPL = 273.16 K,
***                  E IS THE VAPOR PRESSURE CORRESPONDING TO Q
***                  AND TD IS THE SATURATION TEMPERATURE.

              PRES = PR(L) ; I0 = 0 ; J0 = 1

              DO 200 I=1,NWDS

                  I0 = I0+1
                  IF (I0 > NI)                                 THEN
                      J0 = J0+1
                      I0 = 1
                  END IF

                  IF (COORD == 'GEM4')                         THEN
                      PRES       = local_pressure(I0,J0,L)
                  ELSE IF (COORD == 'SIG' )                    THEN
                      PRES       = PTOIT + ETA(L) * ( PS(I) - PTOIT )
                  ELSE IF (COORD /= 'PRES')                    THEN
                      PRES       = A(L) + B(L) * PS(I)
                  END IF
   
                  IF      (SHUM .AND. NOMT.NE.'VT')            THEN
                      Q          = F(I)
                      T          = G(I)
                  ELSE IF (SHUM .AND. NOMT.EQ.'VT')            THEN
                      Q          = F(I)
                      VT         = G(I)
                      T          = FOTTV( VT,Q )
                  ELSE
                      T          = G(I)
                      IF (SPWH)                                THEN
                          SATQ   = FOQST( T,PRES )
                      ELSE
                          SATQ   = FOQSA( T,PRES )
                      END IF
                      Q          = SATQ*F(I)
                  END IF

                  E              = FOEFQ( MAX( 1.E-9, Q ),PRES )

                  C              = LOG( E / ttns1 )
                  TD             = (ttns4w * C - ttns3w * TRPL)
     +                           /       (C - ttns3w)

                  IF (SPWH .AND. TD < DBLE( TRPL ))
     +                TD         = ( ttns4i * C - ttns3i * TRPL)
     +                           /       (C - ttns3i)

                  F(I)           = T-TD

  200         CONTINUE

              IF (PKTYP == 'SQ') CALL SETKIND( VKINDC )

***            SAVE DEW POINT DEPRESSION ON FILE ES.

              READ(ES,4) IBUF(3)
              CALL PUTFLD2( 13, F, IBUF,MAXW )
              IF (NRECS.EQ.0) CALL PRTLAB( IBUF )

              NRECS = NRECS+1

  300     CONTINUE

      GOTO 100

***    E.O.F. ON INPUT.

 0912 IF (IO.NE.0) WRITE(6,6012) IO
      CALL                                         XIT( VERBEX ,-12)
 0914 CALL                                         XIT( VERBEX ,-14)
 0920 IF (IO.NE.0) WRITE(6,6020) IO
      CALL                                         XIT( VERBEX ,-20)

*---------------------------------------------------------------------
 0004 FORMAT(A4)
 0010 FORMAT(BN,E10.0)

 6000 FORMAT(' Water and ice phases are considered.'/)
 6008 FORMAT(" File SP should be specified when coord not equal 'PRES'")
 6010 FORMAT(1X,I6,' records read.')
 6011 FORMAT(' Unsupported type of vertical coordinate ',A,
     +       ' in COORD argument.')
 6012 FORMAT(' Gpdpd reports I/O error number ',I5/)
 6016 FORMAT(' Unsupported vertical coordinate in hum, VKIND =',I9/)
 6019 FORMAT(' More that one input vertical coordinate.'/) 
 6020 FORMAT(' Unable to read A,B in aabb.nml namelist file,',
     +       ' error no.',I5/)
 6021 FORMAT(' More that one input vertical coordinate.'/) 
 6022 FORMAT(' Wrong number of A,B entries in AABB namelist.',
     +       ' Expecting ',I3,' of each, but found ',I3,'.'/)
 6023 FORMAT(' Unrecognized -def argument value... ',A/)

 6110 FORMAT(' Using A and B from file aabb.nml'/)
 6120 FORMAT('  p.lid (pa)=',F10.3/:'  p.ref (pa)=',F10.3,
     +       ', R (exponent)=',F10.3:', R2 (exponent)=',F10.3)
 6130 FORMAT('  Vertical coordinate = ',A)

      END
#     endif
