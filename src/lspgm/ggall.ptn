#     if !defined (latitude_maximale)
#         define   latitude_maximale 4999
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      ggall \ 
*      nhall  GG LL INPUT OUTPUT [ -lon  VAL1 -lat VAL2 
*      shall /                     -kind VAL3 -npg VAL4 ]
*
*
*     AUTHORS - J.D.Henderson, MAR 23 1981.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/ggall.ptn,v 4.14 2014/09/25 20:20:48 dugas Exp $
*
*
*     DESCRIPTION...
*      (gg/nh/sh)all  - CONVERT GAUSSIAN GRID FILE TO LAT-LONG FILE 
*
*
*     PURPOSE - CONVERTS A FILE OF GAUSSIAN GRIDS TO A FILE OF LAT-LON 
*               GRIDS BY LINEAR OR CUBIC INTERPOLATION. 
*
*     NOTES   - 1) THE LAT-LONG GRIDS LL HAVE NLG EQUALLY SPACED 
*                  LONGITUDES AND NLAT EQUALLY SPACED LATITUDES. 
*               2) IF GG IS GLOBAL, THE POLES ARE INCLUDED AS THE
*                  TOP AND BOTTOM ROWS. 
*               3) IF GG IS HEMISPHERIC, THE RELEVANT POLE AS WELL AS THE
*                  EQUATOR ARE INCLUDES IN LL.
*               4) LONGITUDE 0 IS REPEATED FOR EACH LATITUDE IN LL SO THAT
*                  THE FINAL OUTPUT SIZE IS LON+1. THE SAME REPITITION IS
*                  ASSUMED TO APPLY TO GG WHEN ITS NUMBER OF LONGITUDES IS
*                  AN ODD NUMBER.
*               5) AS APPLIED TO LL, CONDITIONS "1) to 4)" ARE EQUIVALENT
*                  TO A RPN STANDARD GRID TYPE B. THE INPUT GRID TYPE IS G.
*               6) NHALL AND SHALL DO THE SAME WORK AS GGALL. THEY ARE
*                  RESTRICTED TO NH AND SH INPUT GRIDS, RESPECTIVELY.
*
*
*       *************************************************************** 
*      *****************************************************************
*     * WHEN WORKING WITH RPN/CMC FILES, MODULE LLAGG SHOULD BE USED    *
*    *  AS IT ACTUALLY HANDLES A SUPERSET OF THE OPERATIONS DONE HERE    *
*     * SUCH AS DIGITAL FILTERING, NEAREST NEIGHBOR INTERPOLATION, ETC  *
*      *****************************************************************
*       *************************************************************** 
*
*
*     INPUT FILE... 
*      GG = (GLOBAL OR HEMISPHERIC) GAUSSIAN GRIDS 
*
*     OUTPUT FILE... 
*      LL = LAT-LONG GRIDS 
*
*
*     INPUT PARAMETERS... 
*
*      LON  = NUMBER OF DISTINCT POINTS IN THE OUTPUT LATITUDE CIRCLES.
*             THE DEFAULT VALUE IS THE NUMBER OF DISTINCT LONGITUDES
*             IN THE CORREPONDING GG GRID.
*      LAT  = NUMBER OF LATITUDES WANTED (INCLUDING POLES OR EQUATOR).
*             THE DEFAULT VALUE IS THE NUMBER OF LATITUDES IN THE
*             CORREPONDING GG GRID.
*      KIND = INTERPOLATION TYPE (1=LINEAR, 3=CUBIC).
*             THE DEFAULTS IS CUBIC
*      NPG  = OUTPUT PACKING DENSITY. THE DEFAULT IS 16 BITS/WORD.
*
*      READ(5,5010) LON,LAT,KIND,NPG
*5010  FORMAT(10X,4I5)
*
*
*     EXAMPLE OF INPUT CARD... 
*
*    GGALL   72   36    1    4 
*
*        0123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 UNABLE TO READ 'GRID' TYPE DATA IN GG
*       2 PREMATURE END OF FILE ON UNIT 5
*       3 INPUT GRID TYPE IS NOT GAUSSIAN
*       4 NHALL DID NOT READ NH GAUSSIAN GRID OR
*         SHALL DID NOT READ SH GAUSSIAN GRID
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM GGALL 
*     PROGRAM GGALL (GG,       LL,       INPUT,       OUTPUT, 
*    +         TAPE1=GG, TAPE2=LL, TAPE5=INPUT, TAPE6=OUTPUT) 
*     ------------------------------------------------------- 

*     $Log: ggall.ptn,v $
*     Revision 4.14  2014/09/25 20:20:48  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.13  2014/01/09 19:32:00  dugas
*     Faire un UP2LOW sur le resultat de l'appel a GETVERB.
*
*     Revision 4.12  2013/10/17 11:23:37  bernard
*     Utiliser le macro latitude_maximale pour definir le parametre MAXJ.
*
*     Revision 4.11  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.10  2007/12/20 21:19:13  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.9  2004/11/12 16:43:33  dugas
*     Correction a la documentation automatique.
*
*     Revision 4.8  2003/07/04 18:00:51  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*     Corriger la documentation automatique.
*
*     Revision 4.7  2002/04/22 14:09:03  dugas
*     Modifier la documentation interne.
*
*     Revision 4.6  2001/03/17 22:01:06  armnrbd
*     Remplacer GETPARC/PUTPARC par GETHIC/PUTHIC.
*
*     Revision 4.5  1999/06/21 18:44:05  armnrbd
*     Ajouter les point d'entrees SHALL et NHALL.
*
*     Revision 4.4  1998/07/03 02:26:25  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.3  1997/09/26  17:38:54  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.2  1997/02/17  03:36:30  armnrbd
*     Conserver les enregistrtements de type LABL.
*
*     Revision 4.1  1995/11/22  20:57:56  armnrbd
*     Corriger la definition de NLG.
*     Mieux tenir compte de IHEM pour les fichiers SQ92.
*
*     Revision 4.0  1994/11/17  14:20:14  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:56:06  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.1  93/07/08  11:59:13  armnrbd
*     Premiere version fonctionnelle.
*     
*     Revision 1.0  93/07/08  11:36:18  armnrbd
*     Initial revision
*     
*     MAY 11/83 - R.LAPRISE. 
*     MAR 23/81 - J.D.HENDERSON 

*----------------------------------------------------------------------- 
      IMPLICIT    none

      INTEGER, PARAMETER :: MAXJ = latitude_maximale

      CHARACTER*4 TYPE,NOM,PKTYP
      REAL        ZERO,SLAT(MAXJ)
      CHARACTER   VERBE*8,GRTYP*1,LIGNE*256
      LOGICAL     OK,VRAI,FAUX,NHINP,SHINP
      REAL*8      SL(MAXJ),CL(MAXJ),WL(MAXJ),
     +            WOSSL(MAXJ),RAD(MAXJ),ANG(MAXJ)
      INTEGER     HEAD,JBUF(taille_entete), NLG,NLG1,IER,
     +            NLAT,KIND,NPKGG,NFF,IO,LEN,I,J,
     +            NWDS,JPAK,MAXW,NR,ILG1,ILAT,
     +            ILATH,HEM,INTERP,OBUF(taille_entete),
     +            OLEN,OWDS,OPAK,LENLAB

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL,       DIMENSION(:), ALLOCATABLE :: GG,LL

      LOGICAL     RPBLOC
      INTEGER     GETSIZ
      CHARACTER*4 GETYP,GETHIC
      EXTERNAL    GETSIZ,RPBLOC,MACSPE,JCLPNT,GETLIGN,
     +            GETFLD2,XIT,PUTFLD2,GETYP,GETHIC,PUTHIC,
     +            BURNF,GAUSSG,TRIGL2,GGILL2,CMPLBL,
     +            LBLCHK,GETLAB,PUTLAB,GETVERB

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        VRAI,FAUX / .TRUE.,.FALSE. /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/ggall.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NFF = 4 
      CALL JCLPNT( NFF, 1,2, 5,6 )

      PKTYP = GETYP( 1 )
      PKTYP = PKTYP(1:2)

***    WHAT OPERATING MODE: STANDARD, NH OR SH EXCLUSIVE ?

      NHINP = FAUX
      SHINP = FAUX

      CALL GETVERB( VERBE ) ; CALL up2low( VERBE,VERBE )

      IF (VERBE.EQ.'nhall') NHINP = VRAI
      IF (VERBE.EQ.'shall') SHINP = VRAI

***    READ LATITUDE-LONGITUDE GRID SIZE IN NLG, NLAT.
***    KIND  = 1 FOR LINEAR INTERPOLATION, OTHERWISE CUBIC. 
***    NPKGG = OUTPUT PACKING DENSITY. 

      NR = 0

      IF (RPBLOC( ' ',LIGNE ))                                THEN

***        CHECK PARAMETRE BLOCK.

          NLG   = 0
          NLAT  = 0
          KIND  = 0
          NPKGG = 0

          OK = RPBLOC('LON',LIGNE)
          IF (OK) READ(LIGNE,'(BN,I5)',ERR=902,IOSTAT=IO) NLG

          OK = RPBLOC('LAT',LIGNE)
          IF (OK) READ(LIGNE,'(BN,I5)',ERR=902,IOSTAT=IO) NLAT

          OK = RPBLOC('KIND', LIGNE)
          IF (OK) READ(LIGNE,'(BN,I5)',ERR=902,IOSTAT=IO) KIND

          OK = RPBLOC('NPG', LIGNE)
          IF (OK) READ(LIGNE,'(BN,I5)',ERR=902,IOSTAT=IO) NPKGG

      ELSE

***        READ NLG,NLAT,KIND AND NPKGG FROM UNIT 5 (STDIN).
 
          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 902
          ELSE
              READ( LIGNE, 5010,ERR=902,END=902,IOSTAT=IO)
     +                     NLG,NLAT,KIND,NPKGG 
              CALL BURNF
          END IF

      END IF

                      INTERP =   3 
      IF (KIND .EQ.1) INTERP =   1 
      IF (NPKGG.EQ.0) NPKGG  = -16

***    ASK FOR NECESSARY MEMORY. READ FIRST INFO BUFFER.

  050 MAXW = GETSIZ( 1, JBUF,LEN,NWDS,JPAK )
      IF (MAXW.LE.0) CALL                          XIT( VERBE ,-1 )

      WRITE(TYPE,4) JBUF(1)
      IF (TYPE.NE.'GRID') CALL                     XIT( VERBE ,-1 )

      ILG1 = JBUF(5) 
      ILAT = JBUF(6) 
      HEM  = JBUF(7)

      IF ((NHINP .AND. HEM.NE.1) .OR.
     +    (SHINP .AND. HEM.NE.2)) CALL             XIT( VERBE ,-4 )

      IF (NLG .EQ.0)                                           THEN
          IF (MOD( ILG1,2 ).EQ.0) NLG  = ILG1
          IF (MOD( ILG1,2 ).NE.0) NLG  = ILG1-1
      END IF
                                  NLG1 = NLG +1
      IF (NLAT.EQ.0)              NLAT = ILAT

      DO  I=1,HEAD
          OBUF(I) = JBUF(I)
      END DO

      OBUF(5) = NLG1
      OBUF(6) = NLAT
      OBUF(8) = NPKGG

      CALL LBLCHK( OLEN,OWDS,OPAK,OBUF )

      LEN  = MAX( LEN,OLEN )
      MAXW = LEN-HEAD

      ALLOCATE( IBUF(LEN),GG(NWDS),LL(NLG1*NLAT) )

      WRITE(6,6005) NLG1,NLAT,INTERP 
      CALL PRTLAB( JBUF )

***    COMPUTE LATITUDE VALUES IN DEGREES FROM THE SOUTH POLE. 

      ILATH = ILAT
      IF (HEM.EQ.0) ILATH = ILATH/2
      CALL GAUSSG( ILATH, SL,WL,CL,RAD,WOSSL ) 
      CALL TRIGL2( ILATH, SL,WL,CL,RAD,WOSSL,HEM ) 

      DO  I=1,ILAT 
          ANG(I)  = RAD(I)*45./ATAN( 1.0D0 ) 
          SLAT(I) = ANG(I)+90. 
      END DO

***    READ THE NEXT GAUSSIAN GRID. 

  100 CALL GETFLD2( 1, GG, 'GRID'//'LABL',-1,' ',-1, IBUF,MAXW,OK ) 

          IF (.NOT.OK)                                         THEN 

              DEALLOCATE( IBUF,GG,LL )

              IF (MAXW.EQ.0) GOTO 050

              WRITE(6,6010) NR 
              CALL                                 XIT( VERBE , 0 ) 

          END IF 

          IF (PKTYP.EQ.'SQ')                                   THEN
              GRTYP = GETHIC( 'GRTYP',IBUF )
              IF (GRTYP.NE.'G')                                THEN
                  WRITE(6,6015) GRTYP
                  CALL                             XIT( VERBE ,-3 )
              END IF
          END IF

          WRITE(TYPE,4) IBUF(1)

          IF (TYPE.EQ.'GRID')                                  THEN

***            CHECK FOR GRID CONSISTENCY.

              CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

              IF (.NOT.OK)                                     THEN
                  DEALLOCATE( IBUF,GG,LL )
                  GOTO 050
              END IF

***            CONVERT TO LAT-LONG GRID. 

              CALL GGILL2( LL, NLG1,NLAT, GG, ILG1,ILAT, SLAT,INTERP )

***            OUTPUT PACKING IS SET IN NPKGG. 

              IBUF(5) = NLG1 
              IBUF(6) = NLAT 
              IBUF(8) = NPKGG 

              IF (PKTYP.EQ.'SQ')
     +            CALL PUTHIC('B','GRTYP',IBUF )

              CALL PUTFLD2( 2, LL, IBUF,MAXW ) 
              IF(NR.EQ.0) CALL PRTLAB( IBUF )

          ELSE

***            SAVE THE LAST LABEL READ.

              LENLAB = IBUF(5)

              CALL GETLAB( 0, LIGNE, IBUF,LENLAB, OK )
              WRITE(NOM,4) IBUF(3)

              IF (NOM.EQ.'LABL')                               THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, FAUX,FAUX )
              ELSE IF (NOM.EQ.'FILE')                          THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, VRAI,FAUX )
              ELSE IF (NOM.EQ.'INFO')                          THEN
                  CALL PUTLAB( 2, LIGNE, IBUF,LENLAB, FAUX,VRAI )
              END IF

          END IF

      NR = NR+1 
      GOTO 100 

***    E.O.F. ON INPUT. 

  902 CALL                                         XIT( VERBE ,-2 )
*----------------------------------------------------------------------- 

    4 FORMAT(A4)

 5010 FORMAT(10X,4I5) 
 6005 FORMAT('0Grid size',2I6,'  interp =',I3) 
 6010 FORMAT('0',I6,' records processed.') 
 6015 FORMAT(' Input grid type is not gaussian, GRTYP=',A)

      END 
#     endif
