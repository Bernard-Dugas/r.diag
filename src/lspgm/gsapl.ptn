#     if !defined (pression_au_toit)
#         define   pression_au_toit 0.01
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      gsapl  GSFLD GSLNSP GPFLD GSPRES INPUT OUTPUT \ 
*      [ -plv VAL1 -a VAL2 -b VAL3 -c VAL4 -d VAL5 -i VAL6 \ 
*        -kind VAL8 -def [AABB][DEFLEVS][FREEFMT] ]
*
*
*     DESCRIPTION...
*      gsapl  - INTERPOLATE SIGMA/HYBRID/GAL-CHEN/GEM LEVELS TO PRESSURE LEVELS
*
*
*     AUTHOR  - R. Laprise, FEB 29/88.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/gsapl.ptn,v 4.39 2014/09/25 19:53:18 dugas Exp $
*
*
*     PURPOSE - INTERPOLATES FROM ETA (SIGMA/HYBRID/GAL-CHEN/GEM) LEVELS TO
*               NPL PRESSURE LEVELS. THE INTERPOLATION IS LINEAR IN LN(ETA).
*               ANY EXTRAPOLATION UP AND DOWN IS BY LAPSE RATES SPECIFIED BY
*               THE USER.
*
*
*     INPUT FILES...
*      GSFLD  = SETS OF ETA (SIGMA/HYBRID/GAL-CHEN/GEM) LEVEL GRID DATA
*      GSLNSP = SERIES OF GRIDS OF LN(SF PRES) (see note 2) on units)
*               (the variable's name should be 'LP' or 'LNSP')
*      GSPRES = SETS OF LN(PRESSURE) (EXCLUSIVELY FOR GAL-CHEN LEVELS)
*
*     OUTPUT FILE...
*      GPFLD  = SETS OF PRESSURE LEVEL GRID DATA
*
*
*     INPUT PARAMETERS...
*
*      NPL   (plv)  = NUMBER OF REQUESTED PRESSURE LEVELS (DEF 16, MAX 999).
*                     IF NPL IS NEGATIVE, EACH -NPL LEVP VALUES ARE READ WITH
*                     EITHER A I10 FORMAT OR AN E10.0 DEPENDING ON WETHER ANY
*                     OF THESE VALUES CONTAINS A DECIMAL POINT. INTEGER VALUES
*                     ARE THEN ASSUMED TO BE ENCODED.
*      RLUP  (a)    = LAPSE RATE USED TO EXTRAPOLATE UPWARDS (DEF 0.0).
*      RLDN  (b)    = LAPSE RATE USED TO EXTRAPOLATE DOWNWARDS (DEF 0.0).
*      COORD (kind) = 'SIG','ETA','GALC' OR 'GEM'/'GEM2'/'GEM3'/'GEM4' FOR
*                     SIGMA, ETA, GAL-CHEN AND FOUR VARIANTS OF THE GEM VERTICAL
*                     COORDINATES, RESPECTIVELY. THE FILE CONTENTS IS USED TO
*                     DETERMINE THE RPN DEFAULTS ('GEM2','GEM3' OR 'GEM4').
*      PTOIT (c)    = PRESSURE (PA) AT THE LID OF MODEL. THIS PARAMETER
*                     IS NOT USED WITH THE GAL-CHEN INPUT LEVELS. THE DEFAULT
*                     VALUE DEPENDS ON COORD: 1000. FOR GEM AND 0.01 OTHERWISE.
*      PREF  (d)    = REF PRESSURE USED WHEN COORD='GEM2' OR 'GEM3' (DEF 80000 PA).
*                     Note that for COORD='GEM4', PREF is always set to 100000 PA.
*      R      (i)   = EXPONENT USED ONLY WHEN COORD='GEM2','GEM3' OR 'GEM4' (DEF 1.0)
*      R2     (i2)  = EXPONENT USED ONLY WHEN COORD='GEM4' (DEF 1.0)
*
*      LEVP         = MONOTONIC PRESSURE LEVELS (MB) (READ FROM STANDARD INPUT).
*                     THE DEFAULTS ARE AS SPECIFIED IN THE EXAMPLE BELOW.
*
*      Notes: 1) Units for RLUP and RLDN are that of D(GSFLD)/D(LN PRES)
*             2) Units for GSLNSP and GSPRES should be consistent. The
*                GAL-CHEN routines expect Pascal, while the routines
*                for the other vertical coordinates expect hPa (MB).
*             3) RLUP and RLDN are ignored when COORD='GEM','GEM2' or 'GEM3'.
*             4) The first input line is NOT read if any
*                command-line parameters are passed.
*             5) Furthermore, the second set of lines will not be read either
*                if the "-def" defaults processing mode is requested without
*                a value. However, if an 'AABB' value is set (see notes #8
*                for more details), a 'DEFLEVS' character sequence must also
*                be added to activate this option, as in "-def AABB/DEFLEVS".
*             6) 'GEM' is the original gem coordinate, while 'GEM2' is the
*                original hybrid coordinate as implemented by Edouard &&
*                Gravel in GEM/DM v2.2.0. 'GEM3' is the normalized version
*                that was implemented in the v2.3.1 GEM/DM. 'GEM4' is the
*                staggered hybrid coordinate version of GEM/DM from v4.0.6.
*             7) The default value of COORD is determined by the file type
*                and the program will also try to determine it by the
*                (internal) coding used for the coordinate itself.
*             8) Specifying "-def AABB" will force the attempt to read
*                a text file called aabb.nml, containing a FORTRAN
*                namelist AABB_NML, which in turns will hold two arrays,
*                A and B such that the local pressure at level K, PL(K),
*                can be calculated as "A(K)+B(K)*PS" for most coordinates.
*                For 'GEM4', the corresponding formula to calculate the
*                K-level natural logaritm of the local pressure is rather
*                "A(K)+B(K)*LN(PS/PREF)". The A and B terms should be such
*                as to produce local pressures in Pa units, even though PS
*                is usually read in units of hPa (before being converted
*                to Pa units internally). In all cases, this approach then
*                by-passes the normal COORD-related calculations for PL(K).
*                                      *************
*                Given the above, correctly using the AABB option with a
*                GEM4 file requires specifying the "-kind GEM4" argument.
*                                      *************
*             9) Specifying "-def FREEFMT" indicates that the output pressure
*                levels should read with a list-directed free format. This
*                is obviously not the default behaviour. Pressure values
*                should then only be separated by spaces or comas, and
*                spread over one or more lines. These numbers are then
*                always assumed to be the actual real pressure values,
*                and not their possibly encoded integer values.Turning
*                on the "FREE_FORMAT_LEVEL_IO" environment variable
*                will also activate this behaviour.
*
*
*      READ( 5,5010 ) NPL,RLUP,RLDN,COORD,PTOIT,PREF,R,R2
*      IF (FREEFMT)     READ( 5,* )    (  PR(I),I=1,ABS(NPL))
*      ELSEIF (NPL > 0) READ( 5,5020 ) (LEVP(I),I=1,    NPL)
*      ELSEIF (NPL < 0) READ( 5,5030 ) (LEVP(I),I=1,   -NPL)
*5010  FORMAT(10X,I5,2E10.0,1X,A4,4E10.0)
*5020  FORMAT(16I5)
*5030  FORMAT(8E10.0)
*
*
*     EXAMPLE OF INPUT CARDS (with format 5010 & 5020)...
*
* GSAPL.     16        0.        0.  GEM     1000.
*  10   20   30   50   70  100  150  200  250  300  400  500  700  850  925 1000
*
*        01234567890123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 NUMBER PRESSURE LEVELS GREATER THAN MAXLEV
*       2 PRESSURE OR MODEL VERT COORDINATE NOT MONOTONIC
*       3 ERROR READING FIRST SET IN GSLNSP
*       4 ERROR READING FIRST SET IN GSFLD
*       5 GSFLD, GSLNSP NOT THE SAME SIZE
*       6 ERROR UNPACKING FIRST SET IN GSFLD
*       7 MORE THAN ONE SIZE IN GSFLD
*       8 MISSING GSLNSP FIELD
*       9 ERROR ABORT READING INPUT CARD 1
*      10 ERROR ABORT READING OUTPUT LEVELS
*      11 ERROR READING FIRST SET IN GSPRES
*      12 GSFLD, GSPRES NOT THE SAME SIZE
*      13 MISSING GSPRES SET
*      14 MORE THAN ONE SIZE IN GSPRES
*      15 PTOIT GREATER THAN TOP MODEL LEVEL (=ETA(TOP)*PREF)
*      16 UNSUPPORTED VERTICAL COORDINATE IN GSFLD
*      17 COORD PARAMETRE AND GSFLD DATA MISMATCH
*      18 UNABLE TO FIND A GEM4 '!!' RECORD
*      19 FOUND DATA NOT OF TYPE 'GRID' OR 'SUBA'
*      20 UNABLE TO READ AABB NAMELIST
*      21 MORE THAN ONE VERTICAL COORDINATE IN GSFLD
*      22 WRONG NUMBER OF A,B IN AABB
*      23 GAL-CHEN NOT supported in AABB mode
*      24 UNABLE TO ALLOCATE WORKING MEMORY
*      25 LEVP DOES NOT CONTAIN PRESSURE DATA
*      26 GSLNSP DOES NOT CONTAIN LN( SURFP ) FOR EARTH
*      27 UNRECOGNIZED -DEF ARGUMENT VALUE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM gsapl
*    1               (GSFLD,       GSLNSP,       GPFLD,       INPUT,
*    2                                                        OUTPUT,
*    3          TAPE1=GSFLD, TAPE2=GSLNSP, TAPE3=GPFLD, TAPE5=INPUT,
*    4                                                  TAPE6=OUTPUT)
*     ---------------------------------------------------------------

*     $Log: gsapl.ptn,v $
*     Revision 4.44  2019/04/15 08:08  dugas
*     Modifier l'initialisation de CLEVP.
*
*     Revision 4.43  2019/01/10 17:17  dugas
*     Faire appel aux nouveaux comdecks *_formats.cdk
*     associes aux autres implementes en fin 2016.
*
*     Revision 4.42  2018/11/17 22:22  dugas
*     Tenir compte de la variable d'environnement FREE_FORMAT_LEVEL_IO.
*
*     Revision 4.41  2018/10/17 16:16  dugas
*     Ajouter l'option 'FREEFMT' de lecture des niveaux de pression.
*
*     Revision 4.40  2016/10/29 20:37  dugas
*     - Ajouter le support de GEM4 en mode AABB.
*     - Modifications syntaxiques de type F77 --> F90.
*     - Modifications au traitement des arguments "-def".
*     - Usage des nouveaux comdecks toc_gest_1.cdk, toc_gest_2.cdk
*       et set_a_b_from_AABB.cdk.
*
*     Revision 4.39  2014/09/25 19:53:18  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG et enlever l'appel a MACSPE.
*
*     Revision 4.38  2014/09/11 20:39:19  dugas
*     Verifier la consistance des niveaux verticaux.
*
*     Revision 4.37  2014/09/02 22:29:03  dugas
*     Verifier que le nombre de parametres lus dans aabb.nml est correct.
*
*     Revision 4.36  2013/12/18 21:47:49  bernard
*      - Deplacer le code du calcul de ETA (GSAPL) et SG (GSAPZL) avant
*        leur usage lors du calcul des termes A,B (GSAPL) ou AG,BG (GSAPZL).
*        Idem pour les valeurs de TOP,BOT,INT qui leur sont assignees !!!
*      - Aussi deplacer du code CCC portant sur la valeur de la coordonnee
*        verticale a la surface pour que celui-ci ne soit invoque que
*        pour les coordonnees trouvees dans ce type de fichiers.
*      - Modifier le traitement des erreurs associees a la lecture du fichier
*        namelist aabb.nml.
*
*     Revision 4.35  2013/10/16 18:51:56  bernard
*      - GETKINDC passe a 16 caracters
*      - La valeur par defaut de COORD pour les fichiers CMC/RPN est 'GEM'
*      - Verifier que l'allocation de la memoire de travail a ete reussie
*
*     Revision 4.34  2013/03/21 21:43:30  bernard
*     Ajouter le support de VKIND=5003 et desallouer le mode AABB pour GEM4.
*
*     Revision 4.32  2012/07/02 21:19:46  dugas
*     Corriger l'appel a GETTOC qui definit PTOIT8.
*
*     Revision 4.31  2012/05/17 21:13:23  dugas
*     - Lecture du fichier namelist aabb.nml. Celui-ci doit contenir le
*       namelist FORTRAN AABB_NML, qui contient a son tour les deux
*       vecteurs verticaux A et B. Ces derniers sont utilises dans
*       dans le calcul de la pression locale (PL=A+B*PS).
*
*     Revision 4.30  2011/06/06 19:23:55  dugas
*     Small documentation and comment changes.
*
*     Revision 4.29  2010/05/04 18:41:41  dugas
*     Re-activer la prise en charge du VKIND des donnees
*       via un argument sur la ligne de commande.
*
*     Revision 4.28  2010/02/15 22:39:14  dugas
*     Support BETA de la coordonnee verticale GEM4.
*
*     Revision 4.27  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.26  2008/04/28 15:41:58  dugas
*     Ne plus tenir compte du cas non-SQ98.
*
*     Revision 4.25  2007/12/20 21:06:37  dugas
*     - Support du format E10.0 pour les niveaux verticaux en arguments.
*     - Utiliser CONVPR pour decoder les niveaux verticaux.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.24  2007/08/29 18:23:13  dugas
*     Mieux documenter les unites utilisees pour GSLNSP.
*
*     Revision 4.23  2006/12/18 12:24:37  dugas
*     Ajouter un message informatif associe a l'erreur -8
*
*     Revision 4.22  2005/04/14 18:07:36  dugas
*     - Proteger PTOIT,PREF,R lors de l'appel a LIRPT.
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.21  2005/03/03 21:41:08  dugas
*     Verifier que les donnees sont de type 'GRID' ou 'SUBA'.
*
*     Revision 4.20  2005/02/23 19:21:59  dugas
*     Verifier que GSLNSP contient bien des valeurs qui sont
*      dans l'eventail connu du ln( pression de surface ) pour
*      notre planete. Un nuveau code d'erreur est
*      associe a cette operation.
*
*     Revision 4.19  2005/01/17 19:02:33  dugas
*     Corriger la documentation automatique'
*
*     Revision 4.18  2003/10/24 20:59:30  dugas
*     Corriger un format de sortie pour le listing.
*
*     Revision 4.17  2002/12/06 16:13:43  dugas
*     Faire en sorte que VKIND ne soit pas defini par LNSP
*
*     Revision 4.16  2002/09/17 17:52:25  dugas
*     Modifier/simplifier le traitement des coordonnees verticales hybrides
*      de GEM (v2.2.0 et v2.3.1). Utilisation systematique de GETKIND et
*      definition du type de coordonnee par defaut selon le genre de
*      fichier rencontre (CCC ou RPN).
*
*     Revision 4.15  2002/01/14 15:35:41  dugas
*     Ajouter le support de la coordonnee verticale GEM3 (v2.3.1).
*
*     Revision 4.14  2001/03/16 21:58:15  armnrbd
*     Ajouter le support de la coordonnee GEM2 (hybride Edouard-Gravel).
*
*     Revision 4.13  2001/02/08 15:41:36  armnrbd
*     Modifier le trraitement du nom de LNSP.
*
*     Revision 4.12  1998/10/30 19:31:23  armnrbd
*     Utiliser CHKLVLC sur les niveaux de sortie.
*
*     Revision 4.11  1998/10/20  17:01:09  armnrbd
*     Refiner le controle de lecture de la deuxieme carte de donnees.
*
*     Revision 4.10  1998/09/18  01:29:57  armnrbd
*     L'orientation de la coordonne verticale du fichier
*     de donnees GSFLD peut etre croissante ou decroissante.
*
*     Revision 4.9  1998/07/03  20:24:25  armnrbd
*     Premiere version supportant la coordonnee GEM.
*
*     Revision 4.8  1997/11/05  15:54:52  armnrbd
*     Passer IP1 en mode pression pour les fichiers standards.
*
*     Revision 4.7  1997/09/26  17:38:59  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.6  1997/05/30  18:04:36  armnrbd
*     Conversions de noms/unites seulement pour fichiers SQ89.
*
*     Revision 4.5  1996/10/15  17:17:11  armnrbd
*     Ajouter le support des grilles de type SUBA.
*
*     Revision 4.4  1996/09/19  15:09:56  armnrbd
*     Ajouter interpolation de niveaux Gal-Chen.
*
*     August 24/1993 - M. Giguere
*     Introducing GAL-CHEN levels
*
*     Revision 4.3  1995/06/22  18:13:39  armnrbd
*     Ajouter un commentaire sur les unites correspondants
*     aux parametres I/O RLUP et RLDN.
*
*     Revision 4.2  1995/06/02  20:19:55  armnrbd
*     Supposer que si le dernier niveau sigma (entier) est egal
*     a 1, on voudrait vraiment que sigma (reel) soit egal a 1.0
*
*     Revision 4.1  1995/01/23  10:31:31  armnrbd
*     Corriger les noms dans le cas de fichiers SQI.
*
*     Revision 4.0  94/11/17  14:20:36  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*     
*     Revision 3.2  94/01/13  10:42:50  10:42:50  armnrbd (Bernard Dugas)
*     Modifications cosmetiques.
*     
*     Revision 3.1  94/01/12  21:33:00  21:33:00  armnrbd (Bernard Dugas)
*     Modifier l'appel a GETLIGN qui s'occupe des niveaux verticaux.
*     
*     Revision 3.0  93/10/13  13:56:19  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.4  92/11/10  09:33:19  armnrbd
*     Implantation de GETSIZ/GETSIZ2.
*     
*     Revision 1.3  92/06/02  16:34:48  armnrbd
*     Effectuer la desallocation de memoire dynamique a la sortie.
*     
*     Revision 1.2  92/03/17  14:04:02  armnrbd
*     Ajouter codes EXIT dans documentation.
*     
*     Revision 1.1  92/03/11  12:11:34  armnrbd
*     Ajouter la documentation automatique.
*     
*     Revision 1.0  92/02/24  14:41:46  armnrbd
*     Initial revision
*     

*     JAN 24/92 - B.DUGAS, RPN. (CALL TO MEMOIR ADDED FOR F AND IBUF)
*     JAN 17/91 - B.DUGAS, RPN. (CALL TO GETLIGN ADDED)
*     FEB 29/88 - R.LAPRISE.

*----------------------------------------------------------------------------
      use diag_toc, only: GetTOC, LirTOC

      IMPLICIT      none

      INTEGER,      PARAMETER :: MAXLEV = 999
      REAL,         PARAMETER :: PTMIN = pression_au_toit
      INTEGER,      PARAMETER :: HEAD = taille_entete

      REAL          AMIN,AMAX,AMEAN
      REAL(8)       PTOIT8,PREF8,R8,R28
      CHARACTER     GRTYP,LIGNE*80,VERBEX*8
      CHARACTER(10) CLEVP(MAXLEV),COORD,CHOLD
      LOGICAL       OK,DEF,MONOTON,NA,MODETA,
     +              BIGF,AABB,FFMT,RLV,calclp
      CHARACTER(4)  TYPE,CLNSP,CHECK,PKTYP*2
      REAL          PRES,RLUP,RLDN,TOPASCL,BIGBIN,CORR1,
     +              CORR2,PTOIT,PREF,R,R2, PTOIT0,PREF0,R0,R20
      INTEGER       KBUF(HEAD),LBUF(HEAD),MBUF(HEAD),NF,NPL,NSL,NSL1,
     +              NSL4,I,IJ,J,K,L,NAME,MAXL,MAXW,MAXW1,MAXW2,MAXW4,IN1,
     +              LEN,LEN1,LEN2,LEN4,NWDS,KPAK,LPAK,MPAK,VKIND,VKINDI,
     +              NPACK,NSETS,IO,IER,LIM1,LIM2,BASE,TOP,BOT,INC,NST,
     +              TOC_NBR,MEM,NC,IG10,IG20,IG1,IG2,NI,NJ,IUN,
     +              ERR,LL,L1,L2

      INTEGER       LEV(MAXLEV),LEVP (MAXLEV)
      REAL          ETA(MAXLEV),FSIG (MAXLEV),DFLNSIG(MAXLEV+2)
      REAL          PR (MAXLEV),PRLOG(MAXLEV),DLNSIG (MAXLEV)

      REAL          A(MAXLEV+1), B(MAXLEV+1)
      NAMELIST     /AABB_NML/ A,B

      LOGICAL,      EXTERNAL :: RPBLOC,GetFreeFormatLevelIO
      CHARACTER(4), EXTERNAL :: GETYP,GETHIC
      CHARACTER(16),EXTERNAL :: GETKINDC
      INTEGER,      EXTERNAL :: GETSIZ,GETSIZ2,GETKIND,GETHIGH
      EXTERNAL      MACSPE,JCLPNT,GETLIGN,XIT,BURNF,CMPLBL,
     +              CONVPR,COORDAB,GETSET2,LEADBLK,GEMAPL,SETKIND,
     +              MONVERT,GETFLD2,EAPL,GAPL,PUTSET2,WRITLEV,
     +              GENAB,FMMM2,LIRPT,SETPT

      INTEGER,      EXTERNAL :: FCLOS,FNOM

      INTEGER,      DIMENSION(:), POINTER            :: LEVT
      INTEGER,      DIMENSION(:), ALLOCATABLE        :: IBUF
      REAL,         DIMENSION(:), ALLOCATABLE        :: F
      REAL,         DIMENSION(:), POINTER            :: LNPH,  PS
      REAL,         DIMENSION(:), ALLOCATABLE,TARGET :: PRESLN,LNSP

      REAL,         DIMENSION(:,:,:), ALLOCATABLE    :: LOG_PRESSURE

      DATA          DEF   / .FALSE. /
      DATA          MODETA/ .FALSE. /
      DATA          CHECK / ' '     /

      CHARACTER     NOMPRG*256
      COMMON       /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/gsapl.ptn,v $'

*-----------------------------------------------------------------------
***   INITIALISER LES VARIABLES LIEES AU MODE DEFLEVS.

      CLEVP(1) = '   10' ; CLEVP(7)  = '  150' ; CLEVP(13) = '  700'
      CLEVP(2) = '   20' ; CLEVP(8)  = '  200' ; CLEVP(14) = '  850' 
      CLEVP(3) = '   30' ; CLEVP(9)  = '  250' ; CLEVP(15) = '  925'
      CLEVP(4) = '   50' ; CLEVP(10) = '  300' ; CLEVP(16) = ' 1000'
      CLEVP(5) = '   70' ; CLEVP(11) = '  400' ; NPL       =     16
      CLEVP(6) = '  100' ; CLEVP(12) = '  500'

***   ACCEDER LES FICHIERS D'E/S.

      NF = 6 ; IN1 = 1

      CALL JCLPNT( NF, IN1,2,3,4, 5,6 )
 
      VERBEX = '  Gsapl '

      PKTYP = GETYP(IN1)
      PKTYP = PKTYP(1:2)

      PTOIT = PTMIN
      PREF  = 80000.
      PREF8 = -1.0
      R     =  1.0
      R2    =  1.0
      R0    = -1.0
      R20   = -1.0

      COORD ='DEF'
      BIGF  =.FALSE.
      AABB  =.FALSE.
      FFMT  =.FALSE.
      RLV   =.FALSE.

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

          RLUP  = 0.0
          RLDN  = 0.0

***        CHECK THE KIND PARAMETRE.

          OK = RPBLOC('KIND',LIGNE)
          IF (OK) COORD = LIGNE

***        CHECK THE REST OF THE PARAMETRE BLOCK.

          OK = RPBLOC('PLV',LIGNE)
          IF (OK) READ(LIGNE,0005,END=909,ERR=909,IOSTAT=IO) NPL

          OK = RPBLOC('A',LIGNE)
          IF (OK) READ(LIGNE,0011,END=909,ERR=909,IOSTAT=IO) RLUP

          OK = RPBLOC('B',LIGNE)
          IF (OK) READ(LIGNE,0011,END=909,ERR=909,IOSTAT=IO) RLDN

          OK = RPBLOC('C',LIGNE)
          IF (OK) READ(LIGNE,0011,END=909,ERR=909,IOSTAT=IO) PTOIT

          OK = RPBLOC('D',LIGNE)
          IF (OK) READ(LIGNE,0011,END=909,ERR=909,IOSTAT=IO) PREF8
          IF (OK) PREF = PREF8

          OK = RPBLOC('I',LIGNE)
          IF (OK) READ(LIGNE,0011,END=909,ERR=909,IOSTAT=IO) R0

          IF (COORD == 'GEM4')                                 THEN
              OK = RPBLOC('I2',LIGNE)
              IF (OK) READ(LIGNE,0011, END=910,ERR=910,IOSTAT=IO ) R20
          END IF

          OK = RPBLOC('DEFAUT',LIGNE)
          IF (OK)                                              THEN
              IF (LIGNE /= ' ') CALL LEADBLK( LIGNE )
              IF (LIGNE == '-1')                               THEN
                  DEF = OK
              ELSE IF (LIGNE /= ' ')                           THEN
                  CALL low2up( LIGNE,LIGNE )
                  IF (index( LIGNE,'AABB'   )  > 0) AABB   = OK
                  IF (index( LIGNE,'DEFLEVS' ) > 0) DEF    = OK
                  IF (index( LIGNE,'FREEFMT' ) > 0) FFMT   = OK
                  IF (.NOT.(AABB .OR. DEF .OR. FFMT))          THEN
                      WRITE(6,6027) TRIM( LIGNE )
                      CALL                         XIT( Verbex ,-27)
                  END IF
              END IF
          END IF

          IF (DEF)  NPL = 16

      ELSE

***        READ THE FIRST CONTROL CARD.

          CALL GETLIGN( 5,LIGNE,80,OK ) 

          IF (.NOT.OK)                                         THEN
              GOTO 909
          ELSE
              READ( LIGNE, 5010,END=909,ERR=909,IOSTAT=IO) 
     +                     NPL,RLUP,RLDN,COORD,PTOIT,PREF8,R0,R20
          END IF  

      END IF

      FFMT = ( FFMT .OR. GetFreeFormatLevelIO() )
      IF (FFMT) RLV =.TRUE.
      
***    ACCOUNT FOR DEFAULT TREATMENT.

      IF (COORD.NE.' ') CALL LEADBLK( COORD )
      IF (COORD.EQ.' ') COORD = 'DEF'

      IF (AABB .AND. COORD == 'DEF') COORD = 'GEM'

      IF (R0  > 0.) R  = R0
      IF (R20 > 0.) R2 = R20

      IF (PREF8 <= 0.0_8)                                      THEN
          ! Reset PREF8 for GEM4. PREF is already set otherwise.
          IF (COORD == 'GEM4') PREF8 = 100000.
      ELSE IF (COORD == 'GEM4')                                THEN
          PREF8 = 100000. ! This is the only allowed value.
      ELSE
          PREF = PREF8
      END IF

      IF (NPL.LT.0)                                            THEN
          NPL  = -NPL
          BIGF =.TRUE.
      END IF

      IF (NPL.GT.MAXLEV) CALL                      XIT( VERBEX ,-1 )

      IF (PKTYP.EQ.'SQ')                                       THEN

!!!       IF (COORD.EQ.'DEF'  .OR. 
          IF (COORD.EQ.'GEM2' .OR. 
     +        COORD.EQ.'GEM3')
     +        CALL SETPT( PTOIT,PREF,R )

          IF (COORD /= 'DEF')                                  THEN
              if (COORD == 'GEM'   .or.
     +            COORD == 'GEM2') CALL setkind('SIGMA')
              if (COORD == 'GEM3'  .or.
     +            COORD == 'GEM4') CALL setkind('HYBRID')
          END IF

      END IF

      IF (.NOT.(DEF .AND. (NPL.EQ.16)))                        THEN

***        READ THE REQUESTED PRESSURE LEVELS.

          IF (FFMT)                                            THEN
              ! Use a list-directed input command.
              READ( 5, *, END=910,ERR=910,IOSTAT=IO) (PR(K),K=1,NPL)
              CLEVP(:)(1:NPL) = ' '

          ELSE IF (BIGF)                                       THEN
              DO  K=1,(NPL-1)/8+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 910
                  ELSE
                      LIM1 = 8*(K-1)+1
                      LIM2 = MIN( NPL, 8*K )
                      READ( LIGNE, 5030,END=910,ERR=910,IOSTAT=IO) 
     +                                  (CLEVP(I),I=LIM1,LIM2)
                      DO  I=LIM1,LIM2
                          IF (INDEX( CLEVP(I),'.') /= 0) RLV = .TRUE.
                      END DO
                  END IF  
              END DO
          ELSE
              DO  K=1,(NPL-1)/16+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 910
                  ELSE
                      LIM1 = 16*(K-1)+1
                      LIM2 = MIN( NPL, 16*K )
                      READ( LIGNE, 5020,END=910,ERR=910,IOSTAT=IO) 
     +                                  (CLEVP(I),I=LIM1,LIM2)
                      DO  I=LIM1,LIM2
                          IF (INDEX( CLEVP(I),'.') /= 0) RLV = .TRUE.
                      END DO
                  END IF
              END DO
          END IF

          CALL BURNF

      END IF

***    CHECK LEVP ENCODING(+2)/DECODING(-2).

      DO  K=1,NPL
          IF (FFMT .OR. RLV)                                   THEN
              IF (.NOT.FFMT)
     +            READ( CLEVP(K),11, ERR=910,END=910,IOSTAT=IO ) PR(K)
              IF (PKTYP == 'SQ')                               THEN
                  VKIND = 2
                  CALL CONVPR( LEVP(K), PR(K), VKIND, +2 )
              ELSE IF (PR(K) >= 0.)                            THEN
                  CALL LVCODE( LEVP(K), PR(K)/1000.,1 )
              END IF

              IF (-10000. < PR(K) .AND. PR(K) < -99.)          THEN
                 ! Attemp to account for old-style CCCma
                 ! coding of pressures < 10hPa and > 10**-7.
                  LEVP(K) = NINT( PR(K) )
                  CALL CONVPR( LEVP(K), PR(K), VKIND, -2 )
              ELSE IF (PR(K) <= -10000.)                       THEN
                  LEVP(K) = -999999 ! Signals an error
              END IF

          ELSE
              READ( CLEVP(K),10, ERR=910,END=910,IOSTAT=IO ) LEVP(K)
              CALL CONVPR( LEVP(K), PR(K), VKIND, -2 )
              IF (PKTYP.EQ.'SQ')                               THEN
                  IF (VKIND.NE.2) CALL             XIT( VERBEX ,-25)
                  CALL CONVPR( LEVP(K),PR(K),VKIND, +2 )
              END IF

          END IF

          IF (LEVP(K) == -999999)                              THEN
              ! Check for CONVPR error condition.
              WRITE(6,6010) K,PR(K)
              GOTO 910
          END IF
           
      END DO

***    GET SIZE FROM FIRST SET OF BUFFERS.
***    GET INPUT VERTICAL LEVEL VALUES FROM THE GSFLD FILE.
 
      MAXW1 = GETSIZ2( IN1, KBUF,LEN1,NWDS,KPAK, LEV,NSL )

      IF (MAXW1.EQ. 0 .OR.
     +    NSL  .EQ. 0 .OR.
     +    NSL  .GT. MAXLEV) CALL                   XIT( VERBEX ,-4 )

      IF (PKTYP.EQ.'SQ' .AND. .NOT.AABB)                       THEN

***        ATTEMPT TO DEFINE VERTICAL LEVEL INFO FROM HY OR !! RECORDS.
 
#         include "toc_gest_1.cdk"

      ELSE IF (.NOT.AABB)                                      THEN

          IF (COORD == 'DEF') COORD = 'ET15'
          VKIND = 2

      END IF

      CORR1 = LOG( 100. )
      IF (COORD == 'GEM4') CORR2 = LOG( PREF8 ) ! Used in AABB-mode

      NI = KBUF(5) ; NJ = KBUF(6)
      
      MAXW2 = GETSIZ(  2, LBUF,LEN2,NWDS,LPAK )

      IF (MAXW2.EQ. 0) CALL                        XIT( VERBEX ,-3 )

***    THE DEFAULT VALUE FOR PTOIT DEPENDS ON COORD.

      IF (COORD.EQ.'SIG')                                      THEN 
          PTOIT = MAX( PTOIT,0.00 ) 
      ELSE IF (COORD(1:3).NE.'GEM')                            THEN
          PTOIT = MAX( PTOIT, PTMIN ) 
      ENDIF 

      IF (COORD /= 'GEM2' .AND.
     +    COORD /= 'GEM3' .AND.
     +    COORD /= 'GEM4')                                     THEN
          WRITE(6,6120) RLUP,RLDN,COORD,PTOIT
      ELSE IF (COORD == 'GEM4')                                THEN
          WRITE(6,6120) RLUP,RLDN,COORD,PTOIT
          WRITE(6,6122) PREF,R,R2
      END IF
 
      CALL WRITLEV( PR,NPL,'PRES' )

***     CHECK THAT PR IS MONOTONIC.

      CALL MONVERT( PR,NPL, TOP,BOT,INC, MONOTON )

      IF (.NOT.MONOTON) CALL                       XIT( VERBEX ,-2 )

***    PRESSURE IN GEM AND IN THE REGIONAL CLIMATE MODEL: PASCAL.

                                    TOPASCL =   1.0
      IF (COORD     .EQ.'GALC' .OR.
     +    COORD(1:3).EQ.'GEM'  )    TOPASCL = 100.0

      DO  L=1,NPL
          PR(L)    = PR(L)*TOPASCL   
          PRLOG(L) = LOG( PR(L) )
      END DO
 
      IF (COORD.EQ.'GALC')                                     THEN

          MAXW4 = GETSIZ2( 4, MBUF,LEN4,NWDS,MPAK, LEV,NSL4 )

          IF (MAXW4.EQ. 0       .OR.
     +        NSL4 .NE. NSL     .OR.
     +        NSL4 .GT. MAXLEV) CALL               XIT( VERBEX ,-11)

          LEN  = MAX( LEN1, LEN2, LEN4  )
          MAXW = MAX( MAXW1,MAXW2,MAXW4 )

      ELSE

          LEN  = MAX( LEN1, LEN2  )
          MAXW = MAX( MAXW1,MAXW2 )

      END IF

***    COMPARE FIRST SETS.

      CALL CMPLBL( 0,KBUF, 0,LBUF, OK ) 

      IF (.NOT.OK)                                             THEN
          CALL PRTLAB( KBUF ) ; CALL PRTLAB( LBUF )
          CALL                                     XIT( VERBEX ,-5 ) 
      END IF

      DO  L=1,NSL
          CALL CONVPR( LEV(L), ETA(L), VKIND, -2 )
          IF (VKIND.EQ.2) ETA(L) = ETA(L) * 0.001
      END DO

***    CHECK THAT ETA IS MONOTONIC.

      CALL MONVERT( ETA,NSL, TOP,BOT,INC, MONOTON )

      IF (.NOT.MONOTON) CALL                       XIT( VERBEX ,-2 )

      IF (COORD.EQ.'GALC')                                     THEN

          CALL CMPLBL( 0,KBUF, 0,MBUF, OK ) 

          IF (.NOT.OK)                                         THEN
              CALL PRTLAB( KBUF ) ; CALL PRTLAB( MBUF )
              CALL                                 XIT( VERBEX ,-12) 
          END IF

          IF (AABB)                                            THEN
***            GALC not supported in AABB mode.
              CALL                                 XIT('  Gaspl ',-23)
          END IF

      ELSE IF (.NOT.AABB)                                      THEN

***        GENERATE THE A,B TERMS THAT ARE USED
***        TO DETERMINE THE LOCAL PRESSURE VALUES.

          IF (COORD == 'GEM2' .OR.
     +        COORD == 'GEM3' )                                THEN

              IF (.NOT.MODETA .AND. COORD.EQ.'GEM3')           THEN

                  MODETA =.TRUE.

                  ETA(1:NSL) = ETA(1:NSL)
     +                       + ( 1.0 - ETA(1:NSL) ) * PTOIT / PREF

              END IF

              WRITE(6,6120) RLUP,RLDN,COORD,PTOIT
              WRITE(6,6121) PREF,R

              CALL GENAB( A,B, ETA, PTOIT,PREF,R, NSL )

              IF ((1.0-ETA(TOP)*PREF/PTOIT) .GT. 1.E-7)        THEN
                  WRITE(6,6015) (PTOIT/PREF)-ETA(TOP)
                  CALL                             XIT( VERBEX ,-15)
              END IF

          ELSE IF (COORD == 'GEM')                             THEN

***            For GEM, PR = PTOIT + ETA(:) * ( PS(:) - PTOIT )

              A(1:NSL) = PTOIT*(1.0-ETA(1:NSL))
              B(1:NSL) = ETA(1:NSL)

          ELSE IF (COORD /= 'GEM4')                            THEN

***            EVALUATE THE PARAMETERS OF THE CCC'S ETA
***            FAMILY OF VERTICAL DISCRETIZATIONS.
 
              CALL COORDAB( A,B, NSL,ETA, COORD,PTOIT )

***            BECAUSE CCC CANNOT CODE OTHERWISE THAN IN PRESSURE
***            SUPPOSE THAT LEV = 1 IS THE SURFACE... 

              IF (VKIND.EQ.2 .AND. LEV(BOT).EQ.1) ETA(BOT) = 1.0

              CHOLD = COORD ; IF (AABB) COORD = GETKINDC( VKIND )
              CALL WRITLEV( ETA,NSL,COORD ) ; COORD = CHOLD

          END IF

      ELSE

***        A and B are read from namelist file 'aabb.nml'.

#         include "set_a_b_from_AABB.cdk"

      END IF

***    ALLOCATE WORKING MEMORY.

      WRITE(TYPE,4) KBUF(1)

      IF (TYPE.NE.'GRID' .AND.
     +    TYPE.NE.'SUBA') CALL                     XIT( VERBEX ,-19) 

      MAXL = MAX( NSL,NPL )+1 
      MEM  = MAX( MAXW,NWDS*MAXL )

      ALLOCATE( IBUF(LEN),LNSP(NWDS),F(MEM), STAT=ERR )
      IF (ERR /= 0) GOTO 924

      PS => LNSP ! PS points to LNSP
      
      IF (AABB .OR. COORD.EQ.'GALC' .OR. COORD(1:3).EQ.'GEM')  THEN
          ALLOCATE( PRESLN(MEM) )
          LNPH => PRESLN ! LNPH points to PRESLN
      END IF

*---------------------------------------------------------------------
***    GET NEXT SET FROM FILE GSFLD.
 
      NSETS = 0

  150 CALL GETSET2( IN1, F, LEV,NSL1, IBUF,MAXW,OK )

           IF (NSETS.EQ.0) CALL PRTLAB( IBUF )

           IF (.NOT.OK)                 THEN
              WRITE(6,6100) NSETS
              IF (NSETS.EQ.0)          THEN
                  CALL                             XIT( VERBEX ,-6 )
              ELSE
                  CALL                             XIT( VERBEX , 0 )
              END IF
              GOTO 1000
          END IF

          NST   = IBUF(2)
          NAME  = IBUF(3)
          NPACK = IBUF(8)
 
***        IGNORE LABEL OR CHARACTER RECORDS.

          WRITE(TYPE,4) IBUF(1)
          IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR') GOTO 150

***        VERIFY DIMENSIONS AND TYPE.

          CALL CMPLBL( 0,IBUF, 0,KBUF, OK )

          IF (.NOT.OK .OR. NSL /= NSL1)                        THEN
              IF (.NOT.OK)                                     THEN
                  CALL PRTLAB( IBUF ) ; CALL PRTLAB( KBUF )
              END IF
              IF (NSL /= NSL1) WRITE(6,6007) NSL, NSL1
              CALL                                 XIT( VERBEX ,-7 ) 
          END IF

***        CHECK FOR (VERTICAL) REFERENCE RECORD CHANGES.

#         include "toc_gest_2.cdk"

***        GET LN(SF PRES) FOR THIS STEP, PUT AT BEFORE F IN MEMORY.
 
          NC = 0

  200     CALL GETFLD2( 2, LNSP, TYPE,NST,' ',-1, IBUF,MAXW,OK )

          IF (NSETS.EQ.0) CALL PRTLAB( IBUF )

          IF (OK)                                              THEN

              WRITE(CLNSP,0004) IBUF(3)

              IF (CLNSP.NE.'LNSP' .AND.
     +            CLNSP.NE.'LP')                               THEN
                  NC = NC+1
                  GOTO 200
              END IF

          ELSE

              IF (NC.NE.0) WRITE(6,6008) CLNSP
              CALL                                 XIT( VERBEX ,-8 )

          END IF

          CALL CMPLBL( 0,IBUF, 0,LBUF, OK )

          IF (.NOT.OK)                                         THEN
              CALL PRTLAB( IBUF ) ; CALL PRTLAB( LBUF )
              CALL                                 XIT( VERBEX ,-5 ) 
          END IF

***        CHECK THAT LNSP REALLY CONTAINS LN( SURFP ).

          IF (CHECK /= 'OK')                                   THEN
              CALL FMMM2( AMIN,AMAX,AMEAN, LNSP,NWDS )
              AMIN = EXP( AMIN ) ; AMAX = EXP( AMAX )
              IF (AMIN .LE. 330.  .OR.
     +            AMAX .GE. 1212.) CALL            XIT( VERBEX ,-26)
              CHECK = 'OK'
          END IF

          IF (COORD.EQ.'GALC')                                 THEN

***            GET LN( PRES )

  250         CALL GETSET2( 4, PRESLN, LEV,NSL, IBUF,MAXW,OK )

              IF (NSETS.EQ.0) CALL PRTLAB( IBUF )
              IF (.NOT.OK) CALL                    XIT( VERBEX ,-13) 

***            AGAIN, IGNORE LABEL OR CHARACTER RECORDS.

              WRITE(TYPE,4) IBUF(1)
              IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR') GOTO 250

              CALL CMPLBL( 0,IBUF, 0,MBUF, OK )

              IF (.NOT.OK .OR. 
     +            NST .NE. IBUF(2))                            THEN
                  CALL PRTLAB( IBUF ) ; CALL PRTLAB( MBUF )
                  CALL                             XIT( VERBEX ,-14) 
              END IF

***            INTERPOLATE IN-PLACE FROM GAL-CHEN TO PRESSURE.

              CALL GAPL( F,    NWDS,PRLOG,NPL, 
     +                   F,    PRESLN,NSL ,
     +                   LNSP, RLUP,RLDN,
     +                         NSL+1,FSIG, DFLNSIG,DLNSIG )

          ELSE IF (COORD(1:3).EQ.'GEM' .and. COORD /= 'GEM4')  THEN

***            CALCULATE LOG OF LOCAL PRESSURE. NOTE THAT THE
***            UPCOMING HYDROSTATIC VERSION OF GEM WILL HAVE TO
***            READ THIS FIELD FROM INPUT. GEMAPL WILL NOT HAVE
***            TO BE MODIFIED.

              PS = EXP( LNSP+CORR1 )

              DO  L=1,NSL
                  BASE = (L-1)*NWDS
                  DO  I=1,NWDS
                      LNPH(BASE+I) = LOG( A(L) + B(L) * PS(I) )
                  END DO
              END DO

***            DO INTERPOLATION USING GEM ROUTINES.

              CALL GEMAPL( F,LNPH,PR,
     +                     NWDS,NPL,NSL,
     +                     TOP,BOT,INC )

          ELSE IF (COORD.EQ.'GEM4')                            THEN
 
***            DO INTERPOLATION FROM GEM4 TO PRESSURE.

              IF (.not.ALLOCATED( log_pressure ))              THEN
                  allocate( log_pressure( NI,NJ,NSL ), STAT=ERR )
                  IF (ERR /= 0) GOTO 924
              END IF

              IF (AABB)                                        THEN

                  ! Do NOT recalculate local pressure in GEM4APL
                  ! as it is calculated immediately, PS=LN(PASCAL)
                  OK = .FALSE. ! And this option is passed to GEM4APL

                  PS = LNSP+CORR1 ! PS IN LN(PASCAL).

                  L1 = 0   ; IF (LL == NSL-1 .AND. INC < 0) L1 = 1
                  L2 = NSL ; IF (LL == NSL-1 .AND. INC < 0) L2 = 1

                  DO  L=1,LL
                      IJ = 0
                      DO  J=1,NJ
                          DO  I=1,NI
                              IJ = IJ+1 ! Calculate A(L)+B(L)*LN(PS/PREF)
                              log_pressure(I,J,L+L1) =
     +                        A(L)+B(L)*(PS(IJ)-CORR2)
                          END DO
                      END DO
                  END DO

                  ! Do we need to add the surface values ?

                  IF (LL == NSL-1)                             THEN
                      IJ = 0
                      DO  J=1,NJ
                          DO  I=1,NI
                              IJ = IJ+1
                              log_pressure(I,J,L2) = PS(IJ)
                          END DO
                      END DO
                  END IF

                  PS = EXP( LNSP )

                  CALL GEM4APL( F,PS, PR,LEV, NI,NJ,
     +                          NPL,NSL, RLUP,RLDN, IG1,IG2,
     +                          log_pressure, OK )

              ELSE

                  OK = .true.  ! Recalculate local pressure.

                  PS = EXP( LNSP+CORR1 ) ! PS is in PASCAL.

                  CALL GEM4APL( F,PS, PR,LEV, NI,NJ,
     +                          NPL,NSL, RLUP,RLDN, IG1,IG2,
     +                          log_pressure, OK )

              END IF

          ELSE
  
***            INTERPOLATE IN-PLACE FROM ETA TO PRESSURE.
 
              CALL EAPL( F,    NWDS,PRLOG,NPL, 
     +                   F,    ETA,NSL ,
     +                   LNSP, RLUP,RLDN,
     +                   A,B,  NSL+1,FSIG, DFLNSIG,DLNSIG )
 
          END IF

***        CHANGE IP1 CODING TO MB FOR STANDARD FILES.

          IF (PKTYP.EQ.'SQ') CALL SETKIND('PRESSION')

***        WRITE THE PRESSURE LEVEL GRIDS ONTO FILE 3.

          IBUF(3) = NAME
          IBUF(8) = NPACK
          CALL PUTSET2( 3, F, LEVP,NPL,IBUF,MAXW )

          IF (NSETS.EQ.0) CALL PRTLAB( IBUF )
          NSETS = NSETS+1

      GOTO 150
 
***    E.O.F. ON INPUT.
 
 0909 IF (IO.NE.0) WRITE(6,6009) IO
      CALL                                         XIT( VERBEX ,-9 )
 0910 IF (IO.NE.0) WRITE(6,6009) IO
      CALL                                         XIT( VERBEX ,-10 )
 0920 IF (IO.NE.0) WRITE(6,6020) IO
      CALL                                         XIT( VERBEX ,-20 )
 0924 CALL                                         XIT( VERBEX ,-24 )

 1000 CONTINUE
*---------------------------------------------------------------------

 0004 FORMAT(A4)
 0005 FORMAT(BN,I5)
 0010 FORMAT(BN,I10)
 0011 FORMAT(BN,E10.0)

 5010 FORMAT(10X,I5,2E10.0,1X,A4,4E10.0)
 5020 FORMAT(16A5)
 5030 FORMAT(8A10)

 6007 FORMAT(' Expecting ',I3,' levels, found ',I3,' instead.'/)
 6008 FORMAT('0 Found ',A,' while expecting LP or LNSP'/)
 6009 FORMAT(' Gsapl reports I/O error number ',I5/)
 6010 FORMAT(' Found illegal pressure value for level # ',I3,
     +       ' PR=',E20.10/)
 6015 FORMAT('  (P.LID/P.REF)-ETA(TOP)=',E12.4)
# include "toc_gest_formats.cdk"
 6020 FORMAT(' Unable to read A,B in aabb.nml namelist file,',
     +       ' error no.',I5/)
# include "set_a_b_formats.cdk"
 6027 FORMAT(' Unrecognized -def argument value... ',A/)

 6100 FORMAT('0 Gsapl interpolated',I5,' sets')
 6110 FORMAT(' Using A and B from file aabb.nml'/)
 6120 FORMAT(' RLUP,RLDN = ',2F6.2,', COORD=',1X,A4,
     +       ', P.LID (PA)=',E10.3)
 6121 FORMAT(' P.REF=',F10.3,', R=',F10.3)
 6122 FORMAT(' P.REF=',F10.3,', R=',2F10.3)

      END
#     endif
