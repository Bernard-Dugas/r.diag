#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      transpos  XIN XOUT OUTPUT [ -kind VAL1 ]
*
*
*     AUTHOR - B.Dugas, 25 novembre 1992, RPN.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/transpos.ptn,v 4.9 2014/09/25 20:20:55 dugas Exp $
*
*
*     DESCRIPTION...
*      A CCC FILE DATA MANIPULATION PROGRAM WHICH WILL EITHER...
*
*      ... 1) TRANSPOSES THE FIRST AND SECOND DIMENSIONS IN ARRAYS
*      ... 2) REVERSE THE ORDER OF THE FIRST DIMENSION
*
*     NOTE: OPTION 1) SWITCHES LONGITUDES AND LATITUDES OF ALL
*           GRIDS OR SWITCHES LATITUDES AND VERTICAL LEVELS IN
*           ALL ZONAL ARRAYS. OPTION 2) SWITCHES EAST AND WEST
*           GRID ORIENTATION OR NORTH AND SOUTH POLES POSITIONS
*           IN ZONAL ARRAYS.
*
*
*     PARAMETERS...
*
*      KIND  = 'TRANSPOSE' TO APPLY OPTION 1) (THIS IS THE DEFAULT)
*            = 'REVERSE' TO APPLY OPTION 2)
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 DATA NOT TYPE GRID, CMPL OR ZONL
*       2 MORE THAN ONE SIZE IN XIN
*       3 ERROR READING XIN
*       4 UNKOWN KIND VALUE
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM transpos
*    +            ( XIN,        XOUT,       OUTPUT,
*    +       TAPE1= XIN, TAPE2= XOUT, TAPE6=OUTPUT)
 
*     $Log: transpos.ptn,v $
*     Revision 4.9  2014/09/25 20:20:55  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.8  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.7  2007/12/20 21:17:51  dugas
*     Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.6  2004/11/12 18:18:46  dugas
*     Correction a la documentation automatique.
*
*     Revision 4.5  2003/07/05 14:52:24  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.4  2000/05/12 19:13:30  armnrbd
*     Ajouter l'option REVERSE.
*
*     Revision 4.3  1998/07/03 02:26:44  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.2  1997/09/26  17:39:27  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.1  1996/11/12  19:41:23  armnrbd
*     Ajouter le support de grilles de type SUBA.
*
*     Revision 4.0  1994/11/17  14:22:13  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.1  94/08/16  21:08:33  armnrbd
*     Enlever certaines references aux routines I/O Fortran.
*     
*     Revision 3.0  93/10/13  13:57:18  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.1  92/11/30  14:23:53  armnrbd
*     Premiere version fonctionnelle du programme.
*     
*     Revision 1.0  92/11/25  21:02:37  armnrbd
*     Initial revision
*     
***    NOVEMBRE 25/92 - B.DUGAS, RPN.

*---------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     MAXLEV
      PARAMETER ( MAXLEV = 999 )

      LOGICAL     OK 
      REAL        C,D,G,H,ZERO
      CHARACTER*9 TYPE*4,OPTION,VALEUR,BASEV
      INTEGER     IBUF,HEAD,JBUF(taille_entete),LON,LAT,LEV,LEVEL(MAXLEV),
     +            I,J,NR,NF,LEN,NWDS,JPAK,MAXW,NLEV,CMPL,IER,LENO

      POINTER   ( PI,IBUF(8) )
      POINTER   ( PG,G(1) )
      POINTER   ( PH,H(1) )
      POINTER   ( PG,C(2,1) )
      POINTER   ( PH,D(2,1) )

      LOGICAL     RPBLOC
      EXTERNAL    MACSPE,JCLPNT,PUTSET2,PUTFLD2,CMPLBL,
     +            HPALLOC,HPDEALLC,GETSET2,GETFLD2,XIT,
     +            RPBLOC,LOW2UP

      INTEGER     GETSIZ2
      EXTERNAL    GETSIZ2

      CHARACTER            NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/transpos.ptn,v $'

*---------------------------------------------------------------------
***    ALLER CHERCHER QUELQUES CONSTANTES SPECIFIQUES.

      CALL MACSPE( HEAD,ZERO )
      CALL SETRABT( '&NON' )

***    ACCEDER LES FICHIERS D'E/S.

      NF = 3
      CALL JCLPNT( NF, 1,2, 6 )

      NR      =  0
      OPTION  = ' '

      IF (RPBLOC( ' ',VALEUR ))                                THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('KIND', VALEUR)
          IF (OK) OPTION = VALEUR

      END IF

***    CHECK FOR VALID OPTION.

      IF (OPTION.EQ.' ')                                       THEN

***        DEFAULT BEHAVIOUR.

          OPTION = 'TRANSPOSE'

      ELSE

***        CHECK FOR (SHORT) OPTION NAME.

          CALL LOW2UP( OPTION,OPTION )
          LENO = INDEX( OPTION // ' ' , ' ' ) - 1

          BASEV = 'TRANSPOSE'
          IF (BASEV(1:LENO).EQ.OPTION)                         THEN
              OPTION = 'TRANSPOSE'
          ELSE
               BASEV = 'REVERSE'
               IF (BASEV(1:LENO).EQ.OPTION)
     +             OPTION = 'REVERSE'
           END IF

      END IF

      IF (OPTION .NE.'         ' .AND.
     +    OPTION .NE.'TRANSPOSE' .AND.
     +    OPTION .NE.'REVERSE  ' )
     +    CALL                                     XIT('Transpos',-4 )

***    ASK FOR NECESSARY MEMORY. READ FIRST INFO BUFFER.

  050 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEVEL,NLEV )
      IF (MAXW.LE.0) GOTO 903

      WRITE(TYPE,4) JBUF(1)
      IF (TYPE.NE.'GRID' .AND.
     +    TYPE.NE.'CMPL' .AND.
     +    TYPE.NE.'SUBA' .AND.
     +    TYPE.NE.'ZONL') CALL                    XIT('Transpos',-1 )

                          CMPL = 1
      IF (TYPE.EQ.'CMPL') CMPL = 2

                          NWDS = NWDS/CMPL

                          LAT  = JBUF(6)
      IF (TYPE.EQ.'ZONL') NWDS = JBUF(5)
      IF (TYPE.EQ.'GRID' .OR.
     +    TYPE.EQ.'SUBA' .OR.
     +   (TYPE.EQ.'CMPL' .AND.
     +    LAT .NE. 1   )) NLEV = 1
                          LEV  = NLEV

      CALL HPALLOC( PI,LEN           ,IER,1 )
      CALL HPALLOC( PG,CMPL*NWDS*NLEV,IER,1 )
      CALL HPALLOC( PH,CMPL*NWDS*NLEV,IER,1 )

  100 IF (TYPE.EQ.'ZONL' .OR.
     +   (TYPE.EQ.'CMPL' .AND. JBUF(6).EQ.1))                  THEN

***        READ THE NEXT SET OF ZONL ARRAYS FROM FILE XIN. 

          CALL GETSET2( 1, G, LEVEL,LEV, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  CALL                             HPDEALLC(PI,IER,1 )
                  CALL                             HPDEALLC(PG,IER,1 )
                  CALL                             HPDEALLC(PH,IER,1 )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT('Transpos', 0 ) 

          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          CALL CMPLBL( 0,IBUF, 0,JBUF, OK ) 

          IF (.NOT.OK .OR. NLEV.LT.LEV)                        THEN
              CALL PRTLAB( IBUF )
              CALL                                 XIT('Transpos',-2 ) 
          END IF

          LAT  = IBUF(5)

          IF (OPTION.EQ.'TRANSPOSE')                           THEN

***            Transpose G into H.

              DO 200 J=1,LEV
                  IF (CMPL.EQ.1)                                   THEN
                      DO  I=1,LAT
                          H((I-1)*LEV+J) = G((J-1)*LAT+I)
                      END DO
                  ELSE
                      DO  I=1,LAT
                          D(1,(I-1)*LEV+J) = C(1,(J-1)*LAT+I)
                          D(2,(I-1)*LEV+J) = C(2,(J-1)*LAT+I)
                      END DO
                  END IF
  200         CONTINUE
 
***            Switch lat and lev.

                                  IBUF(5) = LEV
                                  IBUF(6) = 1
              IF (TYPE.EQ.'ZONL') IBUF(6) = LAT

              DO J=1,LAT
                  LEVEL(J) = 1000+J
              END DO

***            Save H on file xout.

              CALL PUTSET2( 2, H, LEVEL,LAT, IBUF,MAXW )

          ELSE

***            Reverse first dimension.

              DO 201 J=1,LEV
                  IF (CMPL.EQ.1)                                   THEN
                      DO  I=1,LAT
                          H((J-1)*LAT+I) = G(J*LAT+1-I)
                      END DO
                  ELSE
                      DO  I=1,LAT
                          D(1,(J-1)*LAT+I) = C(1,J*LAT+1-I)
                          D(2,(J-1)*LAT+I) = C(2,J*LAT+1-I)
                      END DO
                  END IF
  201         CONTINUE

***            Save H on file xout.

              CALL PUTSET2( 2, H, LEVEL,LEV, IBUF,MAXW )

          END IF

      ELSE 

***        READ THE NEXT SET OF GRIDS FROM FILE XIN. 

          CALL GETFLD2( 1, G, ' ',-1,' ',-1, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              IF (MAXW.EQ.0)                                   THEN
                  CALL                             HPDEALLC(PI,IER,1 )
                  CALL                             HPDEALLC(PG,IER,1 )
                  CALL                             HPDEALLC(PH,IER,1 )
                  GOTO 050
              END IF

              CALL PRTLAB( IBUF )
              WRITE(6,6010) NR
              CALL                                 XIT('Transpos', 0 ) 

          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          CALL CMPLBL( 0,IBUF, 0,JBUF, OK ) 

          IF (.NOT.OK)                                         THEN
              CALL PRTLAB( IBUF )
              CALL                                 XIT('Transpos',-2 ) 
          END IF

          LON  = IBUF(5)
          LAT  = IBUF(6)

          IF (OPTION.EQ.'TRANSPOSE')                           THEN

***            Transpose G into H.

              DO 300 J=1,LAT
                  IF (CMPL.EQ.1)                                   THEN
                      DO I=1,LON
                          H((I-1)*LAT+J) = G((J-1)*LON+I)
                      END DO
                  ELSE
                      DO I=1,LON
                          D(1,(I-1)*LAT+J) = C(1,(J-1)*LON+I)
                          D(2,(I-1)*LAT+J) = C(2,(J-1)*LON+I)
                      END DO
                  END IF
  300         CONTINUE
 
***            Switch lat and lon.

              IBUF(5) = LAT
              IBUF(6) = LON

          ELSE

***            Reverse first dimension.

              DO 301 J=1,LAT
                  IF (CMPL.EQ.1)                                   THEN
                      DO I=1,LON
                          H((J-1)*LON+I) = G(J*LON+1-I)
                      END DO
                  ELSE
                      DO I=1,LON
                          D(1,(J-1)*LON+I) = C(1,J*LON+1-I)
                          D(2,(J-1)*LON+I) = C(2,J*LON+1-I)
                      END DO
                  END IF
  301         CONTINUE
 
          END IF

***        Save H on file xout.

          CALL PUTFLD2( 2, H, IBUF,MAXW )

      END IF

      NR = NR+LEV
      GOTO 100 

***   E.O.F. ON UNIT #1.

  903 CALL                                         XIT('Transpos',-3 )

*---------------------------------------------------------------------
    4 FORMAT(A4)

 6010 FORMAT('0 Transpos wrote ',I6,' records.')

      END 
#     endif
