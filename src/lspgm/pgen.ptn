#     if !defined (pression_au_toit)
#         define   pression_au_toit 0.01
#     endif
#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      pgen  XIN POUT [LNSP] OUTPUT \ 
*            [-kind VAL0 -a VAL1 -d VAL2 -i VAL3 [VAL4] -def [AABB] ]
*
*
*     DESCRIPTION...
*      pgen   - CREATES A FILE WITH VALUES SET EQUAL TO PRESSURE LEVEL
*
*
*     AUTHOR  - B.Dugas, NOV 29/83.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/pgen.ptn,v 4.20 2014/09/25 20:20:51 dugas Exp $
*
*
*     PURPOSE - GENERATES A FILE WHOSE VALUES ARE SET TO THE PRESSURE 
*               LEVEL VALUE FOUND IN IBUF(4).
*
*     NOTES     1) FOR SPECTRAL TYPE FILES, ONLY THE REAL PART OF
*                  THE (0,0) COEFFICIENT RECORD VALUES IS SET.
*               2) FOR CMPL TYPE FILES, ONLY THE REAL PART OF 
*                  EACH WORD IS SET.
*
*
*     INPUT FILE...
*      XIN  = FILE CONTAINING RECORDS AT PRESSURE LEVEL(S), IT CAN BE
*             OF TYPE SPECTRAL, ZONAL CROSS-SECTIONS, COMPLEX ARRAYS
*             OR GAUSSIAN GRID(S).
*      LNSP = (OPTIONAL) LOG OF SURFACE PRESSURE FIELD USED BY THE TERRAIN
*             FOLLOWING COORDINATES TO DETERMINE THE LOCAL PRESSURE. THIS
*             IS ASSUMED TO BE IN UNITS OF LN(MB).
*
*     OUTPUT FILE...
*      POUT = FILE OF THE SAME TYPE AS XIN WITH THE VALUE(S) OF EACH RECORD
*             SET EQUAL TO THE LOCAL PRESSURE VALUES (IN MB). THIS DATA IS
*             FOUND IN IBUF(4) WHEN THE VERTICAL COORDINATE IS ITSELF
*             PRESSURE. 
*
*
*     COMMAND-LINE PARAMETERS...
*
*      COORD (kind) = INPUT VERTICAL COORDINATE: THE POSSIBLE OPTIONS ARE
*                     'PRES'/'ETA' FOR PRESSURE/GCM-ETA AND 'GEM'/'GEM2'/'GEM3'
*                     /'GEM4' FOR DIFFERENT VERSIONS OF THE GEM COORDINATE.
*      PTOIT (a)    = PRESSURE (PA) AT THE LID OF MODEL. THE DEFAULT VALUE
*                     IS 0.01 OTHERWISE. THIS VALUE IS ONLY REQUIRED WITH
*                     THE CCCma GCM VERTICAL COORDINATES.
*
*      The next parametres are only used when COORD='GEMx', x=2,3 or 4.
*
*      PREF  (d)    = Ref pressure (DEF 80000 PA, except for 'GEM4', where
*                     the only acceptable value is 100000 Pa).
*      R     (i)    = Reference exponent (DEF 1.0)
*      R2    (i2)   = Second reference exponent if COORD='GEM4' (DEF 1.0)
*
*
*     NOTES: 1) THE PROGRAM REQUIRES THAT DATA TYPES BE EITHER OF 'GRID',
*               'SUBA' OR 'ZONL' WHEN OPERATING WITH ANY OF THE TERRAIN
*               FOLLOWING VERTICAL COORDINATES. THE OTHER TYPES OF DATA
*               ARE ONLY SUPPORTED WITH PRESSURE VERTICAL COORDINATES.
*            2) 'GEM' IS THE ORIGINAL GEM ETA COORDINATE, WHILE 'GEM2' IS
*               THE FIRST GEM HYBRID COORDINATE AS IMPLEMENTED BY EDOUARD
*               & GRAVEL IN GEM/DM V2.2.0. 'GEM3' IS THE NORMALIZED VERSION
*               THAT WAS IMPLEMENTED IN THE V2.3.1 GEM/DM.'GEM4' is the
*               staggered hybrid coordinate version of GEM/DM from v4.0.6.
*            3) THE DEFAULT VALUE OF COORD IS DETERMINED BY THE FILE TYPE
*               AND THE PROGRAM WILL ALSO TRY TO DETERMINE IT BY THE
*               (INTERNAL) CODING USED FOR THE COORDINATE ITSELF.
*            4) Specifying "-def AABB" will force the attempt to read
*               a text file called aabb.nml, containing a FORTRAN
*               namelist AABB_NML, which in turns will hold two arrays,
*               A and B such that the local pressure at level K, PL(K),
*               can be calculated as "A(K)+B(K)*PS" for most coordinates.
*               For 'GEM4', the corresponding formula to calculate the
*               K-level natural logaritm of the local pressure is rather
*               "A(K)+B(K)*LN(PS/PREF)". The A and B terms should be such
*               as to produce local pressures in Pa units, even though PS
*               is usually read in units of hPa (before being converted
*               to Pa units internally). In all cases, this approach then
*               by-passes the normal COORD-related calculations for PL(K).
*                                     *************
*               Given the above, correctly using the AABB option with a
*               GEM4 file requires specifying the "-kind GEM4" argument.
*                                     *************
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 UNABLE TO READ XIN
*       2 MORE THAN ONE SIZE IN XIN
*       3 UNKNOWN DATA TYPE
*       4 ILLEGAL "COORD" VALUE
*       5 LNSP FILE MISSING OR EMPTY
*       6 LNSP AND XIN NOT THE SAME SIZE
*       7 UNABLE TO CONTINUE (SEE NOTE 1)
*       8 PROBLEM READING PARAMETRES
*      12 LNSP DOES NOT CONTAIN LN(SURFACE PRESSURES) FOR EARTH
*      16 UNSUPPORTED VERTICAL COORDINATE IN XIN
*      18 UNABLE TO FIND A GEM4 '!!' RECORD
*      19 UNABLE TO ALLOCATE WORKING MEMORY
*      20 UNABLE TO READ AABB NAMELIST
*      21 MORE THAN ONE VERTICAL COORDINATE IN XIN
*      22 WRONG NUMBER OF A,B IN AABB
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM pgen
*    +             (XIN,       POUT,       OUTPUT,
*    +        TAPE1=XIN, TAPE2=POUT, TAPE6=OUTPUT)
*     --------------------------------------------

*     $Log: pgen.ptn,v $
*     Revision 4.22  2019/01/10 17:17  dugas
*     Faire appel aux nouveaux comdecks *_formats.cdk
*     associes aux autres implementes en fin 2016.
*
*     Revision 4.21  2016/10/28 17:40  dugas
*     - Ajouter le support des coordonnees verticales de
*       GEM4, et ce aussi pour le mode de traitement AABB.
*     - Ajouter une option "WEIGHT" au parametre "-def".
*     - Modifications syntaxiques de type F77 --> F90.
*     - Usage des nouveaux comdecks toc_gest_1.cdk, toc_gest_2.cdk
*       et set_a_b_from_AABB.cdk.
*
*     Revision 4.20  2014/09/25 20:20:51  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.19  2014/09/12 00:12:55  dugas
*     Verifier la consistance des niveaux verticaux.
*
*     Revision 4.18  2014/09/02 22:29:03  dugas
*     Verifier que le nombre de parametres lus dans aabb.nml est correct.
*
*     Revision 4.17  2013/12/18 21:56:33  bernard
*      - Modifier le traitement des erreurs associees a la lecture du fichier
*        namelist aabb.nml.
*
*     Revision 4.16  2013/10/16 18:43:27  bernard
*     Ajouter des details au format d'erreur 6011.
*
*     Revision 4.15  2012/05/17 21:12:51  dugas
*     - Verification que la pression de surface est appropriee pour notre terre.
*     - Lecture du fichier namelist aabb.nml. Celui-ci doit contenir le
*       namelist FORTRAN AABB_NML, qui contient a son tour les deux
*       vecteurs verticaux A et B. Ces derniers sont utilises dans
*       dans le calcul de la pression locale (PL=A+B*PS).
*
*     Revision 4.14  2011/09/16 17:54:03  dugas
*     Ajouter la coordonnee ET16.
*
*     Revision 4.13  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.12  2008/04/28 15:41:58  dugas
*     Ne plus tenir compte du cas non-SQ98.
*
*     Revision 4.11  2007/12/20 21:07:19  dugas
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Utiliser CONVPR pour decoder les niveaux verticaux.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.10  2006/04/26 22:31:06  dugas
*     Ne plus compacter le donnees de type ZONL.
*
*     Revision 4.9  2005/04/14 18:07:36  dugas
*     - Proteger PTOIT,PREF,R lors de l'appel a LIRPT.
*     - Ignorer les enregistrements de type LABL/CHAR.
*     - Assurer une allocation minimale a la lecture de MAXW mots.
*
*     Revision 4.8  2003/07/05 14:50:28  dugas
*     Implanter SETRABT pour le traitement de RECABT.
*
*     Revision 4.7  2002/09/17 17:52:25  dugas
*     Modifier/simplifier le traitement des coordonnees verticales hybrides
*      de GEM (v2.2.0 et v2.3.1). Utilisation systematique de GETKIND et
*      definition du type de coordonnee par defaut selon le genre de
*      fichier rencontre (CCC ou RPN).
*
*     Revision 4.6  2002/02/02 00:42:03  dugas
*     Ajouter le support de toutes les coordonnees ETA du GCM
*
*     Revision 4.5  2002/01/14 15:49:45  dugas
*     Les coordonnees verticales de type SIG et ETxx du GCM/CCCma, de meme
*      que la coordonnees GEM3 (v2.3.1) sont maintenant supportees.
*
*     Revision 4.4  1999/07/23 15:37:05  armnrbd
*     Modifier les circonstance ou l'erreur -2 est presente.
*     Utiliser HPALLOC pour faire l'allocation de memoire.
*
*     Revision 4.3  1997/09/26 17:39:11  armnrbd
*     Remplacer buf(16) par buf(taille_entete).
*
*     Revision 4.2  1997/02/24  16:01:54  armnrbd
*     Corriger le calcul dans le cas de donnees spectrales.
*
*     Revision 4.1  1996/11/12  19:41:23  armnrbd
*     Ajouter le support de grilles de type SUBA.
*
*     Revision 4.0  1994/11/17  14:21:19  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.0  93/10/13  13:56:40  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.4  92/11/23  14:26:07  armnrbd
*     Deuxieme iteration avec GETSIZ/GETSIZ2.
*     
*     Revision 1.3  92/11/10  13:09:26  armnrbd
*     Implantation de GETSIZ/GETSIZ2.
*     
*     Revision 1.2  92/10/13  15:57:16  armnrbd
*     Definir JBUF(8)=-32, plutot que JBUF(8)=1.
*     
*     Revision 1.1  92/03/26  13:32:04  armnrbd
*     Premier jeu de correction.
*     
*     Revision 1.0  92/03/26  12:15:19  armnrbd
*     Initial revision
*     
 
*     NOV 29/83 - B. DUGAS.
 
*-----------------------------------------------------------------------
      use diag_toc, only: GetTOC, LirTOC, LopTOC

      IMPLICIT     none

      INTEGER,    PARAMETER :: MAXLEV = 999
      REAL,       PARAMETER :: PTMIN = pression_au_toit
      INTEGER,    PARAMETER :: HEAD = taille_entete

      REAL(8)      PTOIT8,PREF8,R8,R28
      LOGICAL      OK,LNSP,MODETA,
     +             DEF,AABB,TOCLU
      CHARACTER(4) TYPE,PRES,COORD
      CHARACTER(2) PKTYP,CHECK,VERBEX*8
      CHARACTER    GRTYP,LIGNE*20,VKINDC*16
      REAL         ALEV,ZERO,PR(MAXLEV),CORR1,
     +             CORR2,PTOIT,PTOIT0,PREF,PREF0,R,
     +             R2,R0,R20, BIGBIN, AMIN,AMAX,AMEAN
      INTEGER      I,J,JL, ILAT,L,LL,LR, NF,NFF,IUN,IN1,
     +             LEN,LEN3,JBUF(HEAD),KBUF(HEAD),NSL,
     +             JPAK,KPAK,MAXW,MAX3,IER,LEV(MAXLEV),
     +             NLEV,NLEVA,NWDS,NWDS1,IO,NST,VKIND

      INTEGER     TOC_NBR, IG10,IG20, IG1,IG2, NI,NJ
      INTEGER,    POINTER, DIMENSION(:) :: LEVT
      real,       dimension(:,:),ALLOCATABLE :: LP2D
      real,       dimension(:,:,:), save, pointer  :: local_pressure=>null()

      REAL,       DIMENSION(:),POINTER :: PR0
      REAL,       DIMENSION(:),ALLOCATABLE,TARGET :: ETA

      REAL         A(MAXLEV+1),B(MAXLEV+1)
      NAMELIST    /AABB_NML/ A,B

      INTEGER,     DIMENSION(:), ALLOCATABLE :: IBUF
      REAL,        DIMENSION(:), ALLOCATABLE :: FF,LP

      CHARACTER    NOMPRG*256
      COMMON      /PROGNAM/ NOMPRG

      LOGICAL,      EXTERNAL :: RPBLOC
      CHARACTER(16),EXTERNAL :: GETKINDC
      CHARACTER(4), EXTERNAL :: GETYP,GETHIC
      INTEGER,      EXTERNAL :: GETSIZ,GETSIZ2,GETKIND,GETHIGH
      EXTERNAL     MACSPE,JCLPNT,GETSET2,
     +             CMPLBL,XIT,PUTSET2,CONVPR,
     +             GETPT,LIRPT,SETPT,GENAB,COORDAB,
     +             SETKIND,FMMM2

      INTEGER,     EXTERNAL :: FCLOS,FNOM

      DATA         CHECK  /  ' '    /
      DATA         MODETA / .FALSE. /
      DATA         TOCLU  / .FALSE. /
      DATA         PRES   / 'PRES'  /
*====================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/pgen.ptn,v $'

*-------------------------------------------------------------------
      ALLOCATE( ETA(MAXLEV) )
      PR0 => ETA ! PR0 and ETA are equivalent.

      CALL SETRABT( '&NON' )

***    ASSIGN I/O UNITS.

      NFF = 4 ; IN1 = 1
      CALL JCLPNT( NFF, IN1,2,3, 6 )
 
      VERBEX = '  Pgen  '

      PKTYP  = GETYP( 1 )

      LNSP   = (NFF.EQ.3)
      COORD  = 'DEF'
      PTOIT  = PTMIN
      PREF   = 80000.
      PREF8  =-1.0
      R      = 1.0
      R2     = 1.0
      R0     =-1.0
      R20    =-1.0
      AABB   =.FALSE.

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

***        CHECK PARAMETRE BLOCK.

          OK = RPBLOC('KIND',LIGNE)
          IF (OK) COORD = LIGNE

          OK = RPBLOC('A',LIGNE)
          IF (OK) READ(LIGNE,0020,END=908,ERR=908,IOSTAT=IO) PTOIT

          OK = RPBLOC('D',LIGNE)
          IF (OK) READ(LIGNE,0020,END=908,ERR=908,IOSTAT=IO) PREF8

          OK = RPBLOC('I',LIGNE)
          IF (OK) READ(LIGNE,0020,END=908,ERR=908,IOSTAT=IO) R

          IF (COORD == 'GEM4')                                 THEN
              OK = RPBLOC('I2',LIGNE)
              IF (OK) READ(LIGNE,0020, END=908,ERR=908,IOSTAT=IO ) R20
          END IF

          DEF = RPBLOC('DEFAUT',LIGNE)
          IF (DEF .AND. LIGNE == 'AABB') AABB = .TRUE.

      END IF

***    ACCOUNT FOR DEFAULT TREATMENT.

      IF (COORD.NE.' ') CALL LEADBLK( COORD )
      IF (COORD.EQ.' ') COORD = 'DEF'

      IF (AABB .AND. COORD == 'DEF')                           THEN
          COORD  = 'GEM'
          VKINDC = 'ETA'
      END IF

      IF (R0  > 0.) R  = R0
      IF (R20 > 0.) R2 = R20

      IF (PREF8 <= 0.0_8)                                      THEN
          ! Reset PREF8 for GEM4. PREF is already set otherwise.
          IF (COORD == 'GEM4') PREF8 = 100000.
      ELSE IF (COORD == 'GEM4')                                THEN
          PREF8 = 100000. ! This is the only allowed value.
      ELSE
          PREF = PREF8
      END IF

      IF (COORD     .NE.'DEF'  .AND.
     +    COORD     .NE.'SIG ' .AND.
     +    COORD     .NE.'ETA ' .AND.
     +    COORD     .NE.'ET10' .AND.
     +    COORD     .NE.'ET15' .AND.
     +    COORD     .NE.'ET16' .AND.
     +    COORD(1:3).NE.'GEM'  .AND.
     +    COORD     .NE.'PRES' )                               THEN
          CALL                                     XIT( VERBEX ,-4 )
      ELSE 
     +IF (PKTYP == 'SQ')                                       THEN

!!!       IF (COORD == 'DEF'  .OR.
          IF (COORD == 'GEM2' .OR.
     +        COORD == 'GEM3' )
     +        CALL SETPT( PTOIT,PREF,R )

          IF (COORD /= 'DEF')                                  THEN
              If (COORD == 'GEM'   .or.
     +            COORD == 'GEM2') VKINDC = 'ETA'
              If (COORD == 'PRES') VKINDC = 'PRESSION'
              If (COORD == 'GEM3'  .or.
     +            COORD == 'GEM4') VKINDC = 'HYBRIDE'
          END IF

      END IF

      NF = 0

***    ASK FOR WORKING MEMORY. CHECK FIRST DATA BUFFER.

  100 MAXW = GETSIZ2( IN1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )

      IF (MAXW.EQ.0) CALL                          XIT( VERBEX ,-1 )

      IF (PKTYP.EQ.'SQ' .AND. .NOT.(TOCLU .OR. AABB))          THEN

***        ATTEMPT TO DEFINE VERTICAL LEVEL INFO FROM HY OR !! RECORDS.

#         define SET_VKINDC
#         define KBUF JBUF
#         include "toc_gest_1.cdk"
#         undef  KBUF

          TOCLU = .TRUE.

      ELSE IF (.NOT.AABB)                                      THEN

          VKINDC = 'ETA' ; VKIND = 2
          IF (COORD.EQ.'DEF' ) COORD  = 'PRES'
          IF (COORD == 'PRES') VKINDC = 'PRESSION'

      END IF

      CORR1 = LOG( 100. )
      IF (COORD == 'GEM4') CORR2 = LOG( PREF8 ) ! Used in AABB-mode

      IF (COORD.EQ.'PRES')                                     THEN
          LNSP = .FALSE.
      ELSE IF (.NOT.LNSP)                                      THEN
          CALL                                     XIT( VERBEX ,-5 )
      END IF

      NI = JBUF(5) ; NJ = JBUF(6)

      IF (LNSP)                                                THEN

          MAX3 = GETSIZ ( 3, KBUF,LEN3,NWDS,KPAK )
          IF (MAX3.EQ.0) CALL                      XIT( VERBEX ,-5 )

          MAXW = MAX( MAXW,MAX3 )
          LEN  = MAX( LEN,LEN3 )

          CALL CMPLBL( 0,JBUF, 0,KBUF, OK )
          IF (.NOT.OK ) CALL                       XIT( VERBEX ,-6 )

      END IF

      WRITE(TYPE,0004) JBUF(1)
      IF (TYPE.EQ.'ZONL') NWDS = JBUF(5)

      IF (LNSP           .AND.
     +   (TYPE.NE.'GRID' .AND.
     +    TYPE.NE.'SUBA' .AND.
     +    TYPE.NE.'ZONL' ))                                    THEN

***        TERRAIN FOLLOWING COORDINATE CAN ONLY BE
***        USED WITH GRID/SUBA/ZONL TYPE OF DATA.

          CALL                                      XIT( VERBEX ,-8 )

      END IF

      ALLOCATE( FF(MAX( MAXW,NWDS*NLEV ) ),LP(NWDS),IBUF(LEN),STAT=IER )
      IF (IER /= 0) GOTO 919
      IF (COORD == 'GEM4')
     +    ALLOCATE( LP2D(NI,NJ), STAT=IER )
      IF (IER /= 0) GOTO 919

      NSL = NLEV

      DO  L=1,NLEV
          CALL CONVPR( LEV(L), PR(L), VKIND, -2 )
          IF (COORD.NE.'PRES' .AND. VKIND.EQ.2) PR(L) = PR(L) * 0.001
      END DO

      WRITE(6,6130) TRIM( COORD )

      IF (COORD.NE.'PRES')                                     THEN

          ETA(1:NSL) = PR(1:NSL)

          IF (COORD.EQ.'SIG') PTOIT = 0.0

          IF (AABB)                                            THEN

***            A and B are read from namelist file 'aabb.nml'.

#             define NSLM1_NOT_OK
#             include "set_a_b_from_AABB.cdk"

          ELSE IF (COORD(1:2).EQ.'ET')                         THEN

***            EVALUATE THE PARAMETERS OF THE
***            ETA VERTICAL DISCRETIZATION.
 
              CALL COORDAB( A,B, NSL,ETA, COORD,PTOIT )

          ELSE IF (COORD.EQ.'GEM2' .OR.
     +             COORD.EQ.'GEM3')                            THEN

              IF (.NOT.MODETA .AND. COORD.EQ.'GEM3')           THEN

                  MODETA      =.TRUE.
                  ETA(1:NSL) = ETA(1:NSL)
     +                       + ( 1.0 - ETA(1:NSL) ) * PTOIT / PREF

              END IF

              WRITE(6,6120) PTOIT,PREF,R

              CALL GENAB( A,B, ETA, PTOIT,PREF,R, NSL )


          ELSE IF (COORD.EQ.'GEM')                             THEN
              
***            For GEM, PRLOC = PTOIT + ETA(:) * ( PS(:) - PTOIT )

              A(1:NSL) = PTOIT*(1.0-ETA(1:NSL))
              B(1:NSL) = ETA(1:NSL)

              WRITE(6,6120) PTOIT

          ELSE IF (COORD == 'GEM4')                            THEN

              WRITE(6,6120) PTOIT,PREF,R,R2
              
          END IF

          IF (COORD /= 'GEM4')                                 THEN
              ! Output pressures are supposed to be in hPa and
              ! we assume that A is originally in units of Pa.
              A(1:NSL) = 0.01 * A(1:NSL)
          END IF

      END IF

      NWDS1 = NWDS-1

***    READ IN THE FIRST FIELD IN XIN.
 
  150 CALL GETSET2( IN1, FF,LEV,NLEVA, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN
              IF (MAXW.EQ.0)                                   THEN
                  DEALLOCATE( FF,LP,IBUF )
                  IF (ASSOCIATED( local_pressure ))
     +            DEALLOCATE( LP2D,local_pressure )
                  GOTO 100
              END IF
              IF (NF.EQ.0)                                     THEN
                 CALL                              XIT( VERBEX ,-1 )
              ELSE
                  CALL PRTLAB2('  Output  ', KBUF )
                  WRITE(6,6100) NF
                  CALL                             XIT( VERBEX , 0 )
              END IF
          ELSE
              KBUF(1:HEAD) = IBUF(1:HEAD)
              READ(PRES,0004) KBUF(3)
          END IF

***        CHECK FOR (VERTICAL) REFERENCE RECORD CHANGES.

#         include "toc_gest_2.cdk"

***        IGNORE LABEL OR CHARACTER DATA RECORDS.

          WRITE(TYPE,0004) IBUF(1)
          IF (TYPE.EQ.'LABL' .OR. TYPE.EQ.'CHAR') GOTO 150

          IF (NF.EQ.0) CALL PRTLAB2('  Pgen on ', IBUF )

***        MAKE SURE THAT THE FIELDS ARE STILL THE SAME KIND AND SIZE. 

          CALL CMPLBL( 0,IBUF, 0,JBUF, OK ) 

          IF (.NOT.OK .OR. NLEV /= NLEVA)                      THEN
              WRITE(6,6002) NLEVA ; CALL PRTLAB( IBUF )
              WRITE(6,6002) NLEV  ; CALL PRTLAB( JBUF )
              CALL                                 XIT( VERBEX ,-2 ) 
          END IF

          IF (LNSP .AND. COORD.NE.'PRES')                      THEN

              NST = IBUF(2)

***            GET LN(SF PRES) FOR THIS STEP.
 
              CALL GETFLD2( 3, LP, TYPE,NST,' ',-1,IBUF,MAXW,OK )

              IF (.NOT.OK) CALL                    XIT( VERBEX ,-5 )
              IF (NF.EQ.0) CALL PRTLAB2('  Read    ', IBUF )

***            CHECK THAT FIELDS STILL ARE THE SAME SIZE.

              CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

              IF (.NOT.OK)                                     THEN
                  CALL PRTLAB( IBUF ) ; CALL PRTLAB( JBUF )
                  CALL                             XIT( VERBEX ,-6 )
              END IF

***            Check that LP really contains values that are
***            representative of earth's LN( surface pressures )
***            in units of hPa. 

              IF (CHECK.EQ.' ')                                THEN
                  CALL FMMM2( AMIN,AMAX,AMEAN, LP,NWDS )
                  AMIN = EXP( AMIN+CORR1 ) ! Convert to pressure in Pa
                  AMAX = EXP( AMAX+CORR1 ) 
                  IF (AMIN <  33000. .OR.
     +                AMAX > 121200.) CALL           XIT( VERBEX ,-12)
                  CHECK = 'OK'
              END IF

***            Convert to pressure BUT do not convert to Pa.

              IF (COORD /= 'GEM4')                             THEN
                  DO  I=1,NWDS
                      LP(I) = EXP( LP(I) )
                  END DO
              END IF

          END IF

***        DO IT BY LEVELS. TAKE CARE OF TYPES OF DATA.

          IF (TYPE.EQ.'GRID' .OR.
     +        TYPE.EQ.'SUBA' .OR.
     +        TYPE.EQ.'ZONL' )                                 THEN

              IF (COORD.EQ.'GEM4')                             THEN

                  ! Convert surface pressure to Ln(Pa).
                  LP2D(1:NWDS,1) = LP(1:NWDS)+CORR1

                  IF (AABB)                                    THEN

                      IF (.not.ASSOCIATED( local_pressure ))   THEN
                         allocate( local_pressure( NI,NJ,NLEV ), STAT=IER )
                         IF (IER /= 0) GOTO 919
                      END IF

                      DO  L=1,NSL
                          ! Calculate A(L)+B(L)*LN(PS/PREF)
                          local_pressure(:,:,L) =
     +                    A(L)+B(L)*(LP2D(:,:)-CORR2)
                      END DO

                  ELSE

                      LP2D = exp( LP2D ) ! Surface pressure in Pa

                      ! Compute Ln( local pressure ).
                      CALL LoPTOC( local_pressure, lev(1:nlev),
     +                             LP2D, IG1,IG2 )

                  END IF

                  ! Convert to hPa and transfer to FF for output.
                  FF(1:NWDS*NLEV) =
     +                0.01 * exp( local_pressure(1:NWDS*NLEV,1,1))

              ELSE ! All other vertical coordinates except GEM4

                  DO  L=1,NLEV
                      ALEV = PR(L)
                      JL = (L-1)*NWDS
                      DO  J=1,NWDS
                          IF (COORD /= 'PRES')                 THEN
                              IF (COORD == 'SIG' )             THEN
                                  ALEV = PTOIT + PR0(L) * ( LP(J) - PTOIT )
                              ELSE
                                  ALEV = A(L) + B(L) * LP(J)
                              END IF
                          END IF
                          FF(JL+J) = ALEV
                      END DO
                 END DO


              END IF

          ELSE IF (TYPE.EQ.'CMPL')                             THEN

***        COMPLEX ARRAYS CASE.

              DO  250 L=1,NLEV
                  ALEV = PR(L)
                  JL = (L-1)*NWDS
                  DO  J=1,NWDS,2
                      FF(JL+J)   = ALEV
                      FF(JL+J+1) = 0.0
                  END DO
  250         CONTINUE

          ELSE IF (TYPE.EQ.'SPEC')                             THEN

***        SPECTRAL CASE.
 
              DO  300 L=1,NLEV
                  JL     = (L-1)*NWDS+1
                  FF(JL) = PR(L) * SQRT(2.)
                  DO  J=1,NWDS1
                      FF(JL+J) = 0.
                  END DO
  300         CONTINUE

          ELSE IF ( TYPE.EQ.'FOUR')                            THEN
 
***        FOURIER CASE.
 
              ILAT = IBUF(6)
              LR   = IBUF(5) * 2

              JL   = 0

              DO 350 L=1,NLEV
                  ALEV = PR(L)
                  DO  J=1,ILAT
                        JL       = JL + 1
                      FF(JL)     = ALEV
                      DO  I=2,LR
                            JL   = JL + 1
                          FF(JL) = 0.
                      END DO
                  END DO
  350         CONTINUE

          ELSE

              CALL PRTLAB2('  Read    ', IBUF )
              CALL                                 XIT( VERBEX ,-3 )

          END IF
 
***        PUT F INTO OUTPUT FILE POUT = TAPE2.
 
          IF (TYPE.EQ.'ZONL') IBUF(8) = -32
          READ(PRES,0004) IBUF(3)

          IF (PKTYP == 'SQ') CALL SETKIND( VKINDC )

          CALL PUTSET2( 2, FF, LEV,NLEV, IBUF,MAXW )
          NF = NF + NLEVA

      GOTO 150

***    E.O.F. ON INPUT.

 0908 IF (IO.NE.0) WRITE(6,6008) IO
      CALL                                         XIT( VERBEX ,-8 )
 0920 IF (IO.NE.0) WRITE(6,6020) IO
      CALL                                         XIT( VERBEX ,-14)
 0919 CALL                                         XIT( VERBEX ,-19)
*----------------------------------------------------------------

 0004 FORMAT(A4)
 0020 FORMAT(BN,E20.0)

 6002 FORMAT(' Nlev=',I3,', ibuf= ')
 6008 FORMAT(' Pgen reports I/O error number ',I5/)
# include "toc_gest_formats.cdk"
 6020 FORMAT(' Unable to read A,B in aabb.nml namelist file,',
     +       ' error no.',I5/)
# include "set_a_b_formats.cdk"
 6100 FORMAT('  Pgen read ',I5,' fields.'/)
 6110 FORMAT('  Using A and B from file aabb.nml'/)
 6120 FORMAT('  p.lid (pa)=',F10.3/:'  p.ref (pa)=',F10.3,
     +       ', R (exponent)=',F10.3:', R2 (exponent)=',F10.3)
 6130 FORMAT('  Vertical coordinate = ',A)

      END
#     endif
