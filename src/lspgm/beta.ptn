#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      beta  PSFC BETFIL INPUT OUTPUT [ -plv VAL1 -def ]
*
*
*     DESCRIPTION...
*      beta   - COMPUTES THE FUNCTION BETA FOR ALL PRESSURE LEVELS
*
*
*     AUTHOR  - G.J.Boer, MAR 87.
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/beta.ptn,v 4.7 2014/09/25 20:20:45 dugas Exp $
*
*
*     PURPOSE - COMPUTES THE FUNCTION "BETA" FOR A FILE OF SURFACE
*               PRESSURE GRIDS. THE REQUIRED PRESSURE VALUES ARE
*               READ FROM STDIN
*
*     NOTES   - 1) BETA MAY EXCEED 1 IN LOWEST LAYER
*               2) THE FORM OF BETA IS CONSISTENT WITH THE USE 
*                  OF PROGRAM VPINT
*               3) THE MAXIMUM NUMBER OF LEVELS IS SET TO 999
*          
*
*     INPUT FILE...
*      PSFC = INPUT SERIES OF SURFACE PRESSURE GRIDS (MB).
*
*     OUTPUT FILE...
*      BETFIL = "NEW" COMPUTED BETA FOR EACH REQUESTED PRESSURE LEVEL;
*               (ONE SET FOR EACH PRESSURE GRID).
*
*
*     INPUT PARAMETERS...
*
*      NLEV (plv) = NUMBER OF PRESSURE LEVELS (DEF=16, MAX=999).
*                   IF NLEV IS NEGATIVE, EACH -NLEV LEVP VALUES ARE
*                   READ WITH A I10 FORMAT OR AN E10.0 IF ITS VALUE
*                   CONTAINS A DECIMAL POINT.
*
*      LEV        = VALUE OF THE PRESSURE IN MILLIBARS (LESS THAN 1013 MB)
*                   AS CODED BY ROUTINE LVCODE. THE DEFAULTS ARE SPECIFIED
*                   IN THE EXAMPLE BELOW.
*
*      Notes: 1) The first input line is NOT read if any command-line
*                parameters are passed.
*             2) Furthermore, the second line will not be read either
*                if the "-def" defaults processing mode is requested.
*
*      READ( 5,5010 )  NLEV
*      IF (NLEV.GT.0)
*      READ( 5,5020 ) (LEV(I),I=1,NLEV)
*      IF (NLEV.LT.0)
*      READ( 5,5030 ) (LEV(I),I=1,-NLEV)
*5010  FORMAT(10X,I5)
*5020  FORMAT(16I5)
*5030  FORMAT(8E10.0)
*
*
*     EXAMPLE OF INPUT CARDS...
*
* BETA       16
*  10   20   30   50   70  100  150  200  250  300  400  500  700  850  925 1000
*
*        01234567890123456789012345678901234567890123456789012345678901234567890
*        1         2         3         4         5         6         7
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 TOO MANY OR NOT ENOUGH REQUIRED LEVELS
*       2 FOUND THAT "PR(NLEV) > 1013"
*       3 PRESSURE LEVELS DO NOT VARY MONOTONICALLY
*       4 PREMATURE EOF ON FILE PSFC
*       5 ERROR READING FIRST LINE INPUT PARAMETERS
*       6 ERROR READING SECOND LINE INPUT PARAMETERS
*       7 LEV DOES NOT CONTAIN PRESSURE DATA
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM beta
*     PROGRAM BETA (PSFC,       BETFIL,       INPUT,       OUTPUT,
*    1        TAPE1=PSFC, TAPE2=BETFIL, TAPE5=INPUT, TAPE6=OUTPUT)
*     ------------------------------------------------------------

*     $Log: beta.ptn,v $
*     Revision 4.7  2014/09/25 20:20:45  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.6  2008/05/03 21:06:30  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.5  2007/12/20 21:11:29  dugas
*     - Support du format E10.0 pour les niveaux verticaux en arguments.
*     - Utiliser ALLOCATE/DEALLOCATE plutot que HPALLOC/HPDEALLC.
*     - Faire appel aux routines PRTLAB/PRTLAB2.
*
*     Revision 4.4  1998/10/20 17:29:31  armnrbd
*     Implanter le support de RPBLOC.
*
*     Revision 4.3  1998/07/03  02:26:20  armnrbd
*     Allonger le format d'ecriture de la date sur le listing.
*
*     Revision 4.2  1996/11/12  19:41:23  armnrbd
*     Ajouter le support de grilles de type SUBA.
*
*     Revision 4.1  1995/08/30  15:22:17  armnrbd
*     Ne plus forcer la compaction a 32 bits.
*
*     Revision 4.0  1994/11/17  14:19:17  armnrbd
*     Messages informatifs quand au passage de la version 3.x a 4.0...
*     1) Les espaces en debut des noms de variables de sont plus pertinents.
*     2) Les grilles complexes de type CMPL sont maintenant supportees.
*     3) Les fichiers SQI sont reconnus, lus et ecrit directements.
*     4) Plusieurs nouvelles cles sont disponibles au demarrage.
*
*     Revision 3.2  94/01/13  21:40:49  armnrbd
*     Ajouter du code de verification de monotonicite des niveaux.
*     
*     Revision 3.1  94/01/12  21:32:02  armnrbd
*     Modifier l'appel a GETLIGN qui s'occupe des niveaux verticaux.
*     
*     Revision 3.0  93/10/13  13:55:32  armnrbd
*     Premiere version compatible HP-UX.
*     
*     Revision 1.0  92/04/02  14:58:19  armnrbd
*     Initial revision
*     

*     MAR 87 - G.J.BOER.

*--------------------------------------------------------------------
      IMPLICIT    none

      INTEGER     MAXLEV,       HEAD
      PARAMETER ( MAXLEV = 999, HEAD = taille_entete )


      CHARACTER*10 CLEVP(MAXLEV)
      CHARACTER*4 LIGNE*80,CBETA
      LOGICAL     OK,DEF,MONOTON,BIGF
      REAL        PR(MAXLEV),PH(0:MAXLEV+1),PHMAX
      INTEGER     I,K,L,IO,NFF,NR,IER,MAXW,LEN,KPAK,
     +            NLEV,NLEVM,NLEVP,NLAT,NLG,NWDS,VKIND,
     +            LEV(MAXLEV),LIM1,LIM2,TOP,BOT,INC,
     +            KBUF(HEAD)

      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF
      REAL,       DIMENSION(:), ALLOCATABLE :: PS,BET

      CHARACTER   NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG

      DATA        DEF / .FALSE. /

      DATA        ( CLEVP(L), L=1,16 ) /
     +              '   10','   20','   30','   50',
     +              '   70','  100','  150','  200',
     +              '  250','  300','  400','  500',
     +              '  700','  850','  925',' 1000'
     +                                 /

      LOGICAL     RPBLOC 
      INTEGER     GETSIZ
      CHARACTER*4 GETYP,PKTYP*2
      EXTERNAL    BURNF,GETFLD2,GETLIGN,GETSIZ,GETYP,JCLPNT,
     +            MONVERT,PUTFLD2,RPBLOC,WRITLEV,XIT

      DATA        PHMAX / 1013.0 /, CBETA / 'BETA' /
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/beta.ptn,v $'

*--------------------------------------------------------------------
***    ACCEDER LES FICHIERS D'E/S.

      NFF = 4
      CALL JCLPNT( NFF, 1,2, 5,6 )

      MAXW = GETSIZ( 1, KBUF,LEN,NWDS,KPAK )
      IF (MAXW.LE.0) CALL                          XIT('  Beta  ',-4 )

      PKTYP = GETYP( 1 )
      BIGF  =.FALSE.

***    ALLOCATE WORK SPACE.

      ALLOCATE( IBUF(HEAD+MAXW), PS (MAX( MAXW,NWDS )),
     +                           BET(MAX( MAXW,NWDS )), STAT=IER )

      IF (RPBLOC( ' ',LIGNE ))                                 THEN

***        CHECK PARAMETRE BLOCK.

          NLEV = 16

          OK = RPBLOC('PLV',LIGNE)
          IF (OK) READ(LIGNE,0005,END=904,ERR=904,IOSTAT=IO) NLEV

          DEF = RPBLOC('DEFAUT',LIGNE)

      ELSE

***        READ THE PRESSURE LEVELS FROM CARDS. TEST THAT THE
***        MAXIMUM LOWEST LEVEL PRESSURE  IS  < 1013 MB.

          CALL GETLIGN( 5,LIGNE,80,OK )

          IF (.NOT.OK)                                         THEN
              GOTO 904
          ELSE
              READ( LIGNE, 5010,ERR=904,END=904,IOSTAT=IO) NLEV
          END IF
 
      END IF

      IF (NLEV.LT.0)                                           THEN
          NLEV =-NLEV
          BIGF =.TRUE.
      END IF

      IF (NLEV.LT.2 .OR. NLEV.GT.MAXLEV) CALL      XIT('  Beta  ',-1 )

      IF (.NOT.(DEF .AND. (NLEV.EQ.16)))                       THEN

          IF (BIGF)                                            THEN
              DO  K=1,(NLEV-1)/8+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 905
                  ELSE
                      LIM1 = 8*(K-1)+1
                      LIM2 = MIN( NLEV, 8*K )
                      READ( LIGNE, 5030,END=905,ERR=905,IOSTAT=IO) 
     +                                  (CLEVP(I),I=LIM1,LIM2)
                  END IF  
              END DO
          ELSE
              DO  K=1,(NLEV-1)/16+1
                  CALL GETLIGN( 5,LIGNE,80,OK ) 

                  IF (.NOT.OK)                                 THEN
                      GOTO 905
                  ELSE
                      LIM1 = 16*(K-1)+1
                      LIM2 = MIN( NLEV, 16*K )
                      READ( LIGNE, 5020,END=905,ERR=905,IOSTAT=IO) 
     +                                  (CLEVP(I),I=LIM1,LIM2)
                  END IF  
              END DO
          END IF

          CALL BURNF

      END IF

***    CHECK LEV CODING.

      DO  K=1,NLEV
          IF (INDEX( CLEVP(K),'.' ).EQ.0)                      THEN
              READ( CLEVP(K),10, ERR=905,END=905,IOSTAT=IO ) LEV(K)
              CALL CONVPR( LEV(K), PR(K), VKIND, -2 )
              IF (PKTYP.EQ.'SQ')                               THEN
                  IF (VKIND.NE.2) CALL             XIT('  Beta  ',-7 )
                  CALL CONVPR( LEV(K), PR(K), VKIND, +2 )
              END IF
          ELSE
             READ( CLEVP(K),11, ERR=905,END=905,IOSTAT=IO ) PR(K)
             IF (PKTYP.EQ.'SQ')                                THEN
                 VKIND = 2
                 CALL CONVPR( LEV(K), PR(K), VKIND, +2 )
             ELSE
                 CALL LVCODE( LEV(K), PR(K)/1000.,1 ) 
             END IF
          END IF
      END DO

      IF (PR(NLEV).GT.PHMAX) CALL                  XIT('  Beta  ',-2 )

      CALL WRITLEV( PR,NLEV,'PRES' )

***     CHECK THAT PR IS MONOTONIC.

      CALL MONVERT( PR,NLEV, TOP,BOT,INC, MONOTON )

      IF (.NOT.MONOTON) CALL                       XIT('  Beta  ',-3 )

      NLEVM = BOT-INC
      NLEVP = BOT+INC

***    HALF LEVELS - LOWEST HALF LEVEL PRESSURE IS SET = PHMAX =1013MB.

      PH(TOP)   = PR(TOP)*0.5
      DO 100 L=TOP+INC,BOT,INC
          PH(L) = (PR(L)+PR(L-INC))*0.5
  100 CONTINUE
      PH(NLEVP) = PHMAX

***    GET THE NEXT SURFACE PRESSURE FIELD INTO PS.

      NR = 0
  200 CALL GETFLD2( 1, PS, 'GRID'//'SUBA',-1,' ',-1, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN
              WRITE(6,6010) NR
              IF (NR.EQ.0) CALL                    XIT('  Beta  ',-4 )
              CALL                                 XIT('  Beta  ', 0 )
          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          NLG  = IBUF(5)
          NLAT = IBUF(6)
          NWDS = NLG*NLAT

***        OUTPUT ON PRESSURE COORDINATES.

          IF (PKTYP.EQ.'SQ') CALL SETKIND('PRESSION')

***        COMPUTE BETA FOR EACH PRESSURE LEVEL AND SAVE ON FILE 2.
***        NOTE THAT BETA MAY BE >1 AT LOWEST LEVEL.

          DO 400 L=1,NLEV

              DO 300 I=1,NWDS

                  IF (     PS(I) .LT. PH(L+INC) .AND.
     +                     PS(I) .GT. PH(L)   )                THEN

                           BET(I) = (PS(I)    -PH(L))
     +                            / (PH(L+INC)-PH(L))

                  ELSE IF (PS(I) .LT. PH(L))                   THEN

                           BET(I) = 0.0

                  ELSE

                           BET(I) = 1.0

                  END IF

***                SPECIAL PROCESSING FOR LAST HALF LAYER

                  IF (     PS(I).GT.PH(NLEVP) .AND.
     +                        L .EQ.   BOT    )
     +
     +                     BET(I) = (PS(I)    -PH(BOT))
     +                            / (PH(NLEVP)-PH(BOT))

  300         CONTINUE

              READ(CBETA,4) IBUF(3)
                            IBUF(4) = LEV(L)
CCC                         IBUF(8) = -32

              CALL PUTFLD2( 2, BET,IBUF,MAXW )

              IF (NR.EQ.0) CALL PRTLAB( IBUF )

  400     CONTINUE

      NR = NR+1
      GOTO 200

***    E.O.F. ON INPUT.

  904 CALL                                         XIT('  Beta  ',-5 )
  905 CALL                                         XIT('  Beta  ',-6 )
*---------------------------------------------------------------------

 0004 FORMAT(A4)
 0005 FORMAT(BN,I5)
 0010 FORMAT(BN,I10)
 0011 FORMAT(BN,E10.0)

 5010 FORMAT(10X,I5)
 5020 FORMAT(16A5)
 5030 FORMAT(8A10)

 6010 FORMAT('0',I6,' records read.')

      END
#     endif
