#     if defined (AUTO_DOC)
*
*     CALL SEQUENCE...
*      zxaglb  ZXIN GGOUT OUTPUT -lon VAL1
*
*
*     DESCRIPTION...
*      zxaglb - CREATES GLOBAL GRID FROM CROSS-SECTION
*
*
*     AUTHOR  - B.Dugas, AUG 2007
*     LAST REVISION: $Header: /home/cvs/RMNLIB/utils/rdiag/lspgm/zxaglb.ptn,v 4.3 2014/09/25 20:20:57 dugas Exp $
*
*
*     INPUT FILES...
*      ZXIN  = GLOBAL OR HEMISPHERIC CROSS-SECTIONS
*
*     OUTPUT FILES...
*      GGOUT = CORRESPONDING GLOBAL OR HEMISPHERIC ARRAYS
*
*
*     PARAMETRE...
*      LON  = NUMBER OF DISTINCT LONGITUDES IN THE OUTPUT GLOBAL FILE
*
*
*     EXIT CONDITIONS...
*       0 NO PROBLEMS
*       1 PROBLEMS READING INPUT FILE
*       2 ZXAGLB FOUND DATA TYPE OTHER THAN ZONAL
*       3 ABORT ERROR READING INPUT PARAMETRE
*
#     endif
#     if defined (RDIAG_LICENCE)
!---------------------------------- LICENCE BEGIN -------------------------------
! R.DIAG - Diagnostic tool kit for the GEM numerical atmospheric model
! Copyright (C) 1990-2010 - Division de Recherche en Prevision Numerique
!                       Environnement Canada
! This code is free software; you can redistribute it and/or modify it 
! under the terms of the GNU Lesser General Public License as published by
! the Free Software Foundation, version 2.1 of the License. This library is
! distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
! without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
! PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
! You should have received a copy of the GNU Lesser General Public License
! along with this library; if not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
!---------------------------------- LICENCE END ---------------------------------
#     endif
#     if !defined (NO_SOURCE)
      PROGRAM zxaglb
*     PROGRAM ZXAGLB (ZXIN,       ZXOUT,       OUTPUT,
*    1         TAPE1=ZXIN, TAPE2=ZXOUT, TAPE6=OUTPUT)
*     -----------------------------------------------

*     $Log: zxaglb.ptn,v $
*     Revision 4.3  2014/09/25 20:20:57  dugas
*     Inserer le texte de la licence LPGPL 2.1 pour R.DIAG.
*
*     Revision 4.2  2008/05/03 21:09:09  dugas
*     Modification generale pour r.gppf.
*
*     Revision 4.1  2007/12/21 20:35:21  dugas
*     Corrections aux definitions de MAXLEV et HEAD (AIX).
*
*     Revision 4.0  2007/12/21 00:04:24  dugas
*     Version initiale.
*

*-----------------------------------------------------------------------
      IMPLICIT    none

      INTEGER,    PARAMETER :: MAXLEV = 999, HEAD = taille_entete

      LOGICAL     OK
      REAL*8      VALUE
      REAL        PR(MAXLEV)
      CHARACTER*4 KIND,VALEUR*10
      INTEGER     LEV(MAXLEV),NFF, MAXW,NWDS,LEN,JPAK,
     +            JBUF(HEAD),OBUF(HEAD), I,J,L, IO,
     +            NR,NLEV,NLAT,VKIND,IP1(MAXLEV),
     +            BASE,IER,NLON,NLEVA,
     +            OLEN,OWDS,OPAK

      REAL*8,     DIMENSION(:), ALLOCATABLE :: X,ZX
      INTEGER,    DIMENSION(:), ALLOCATABLE :: IBUF

      INTEGER     GETSIZ2
      LOGICAL     RPBLOC,SETIO64
      EXTERNAL    GETSIZ2,MACSPE,JCLPNT,XIT,GETSET2,
     +            PUTSET2,GETVERB,CMPLBL,LBLCHK,
     +            GETYP,SETIO64

      CHARACTER            NOMPRG*256
      COMMON     /PROGNAM/ NOMPRG
*===================================================================

      NOMPRG =
     +'$Source: /home/cvs/RMNLIB/utils/rdiag/lspgm/zxaglb.ptn,v $'

*---------------------------------------------------------------------
***    ACCEDER LES FICHIERS D'E/S.

      NFF = 3
      CALL JCLPNT( NFF, 1,2, 6 )

      NR  = 0

***    CHECK PARAMETRE BLOCK.

      NLON = 0

      IF (RPBLOC( ' ',VALEUR ))                                THEN

          OK = RPBLOC('LON',VALEUR)
          IF (OK) READ( VALEUR,'(I5)', ERR=903,IOSTAT=IO ) NLON

      END IF

***    SETUP FOR 64-BIT I/O.

      OK = SETIO64(.TRUE.)

***    DETERMINE THE GRID SIZE.

  100 MAXW = GETSIZ2( 1, JBUF,LEN,NWDS,JPAK, LEV,NLEV )

      IF (MAXW.EQ.0 .OR. NLEV.LE.0
     +              .OR. NLEV.GT.MAXLEV)                      THEN
          WRITE(6,6001)  MAXW,NLEV,MAXLEV
          CALL                                     XIT( ' ZXaGLB',-1 )
      END IF

      CALL WRITLEV2( LEV,NLEV,JBUF )

      WRITE(KIND,4) JBUF(1)

      IF (KIND.NE.'ZONL')                                      THEN
          WRITE(6,6002) 'ZONL',KIND
          CALL                                     XIT( ' ZXaGLB',-2 )
      END IF

      NLAT    = JBUF(5)
      NWDS    = NLAT

      IF (NLON.EQ.0) NLON = NLAT

      KIND    ='GRID'
      OBUF    = JBUF
      OBUF(5) = NLON
      OBUF(6) = NLAT

      READ(KIND,4) OBUF(1)

      CALL LBLCHK( OLEN,OWDS,OPAK,OBUF )

      MAXW = MAX( MAXW,OWDS )
      LEN  = MAX( LEN,OLEN )

***    ASK FOR WORKING MEMORY.

      ALLOCATE( ZX(NLAT*NLEV),X(OWDS),IBUF(LEN) )
      
***    READ THE NEXT ARRAY STOP AT EOF. LEV WILL
***    CONTAIN THE PRESSURE LEVEL VALUES IN MILLIBARS.

  200 CALL GETSET2( 1, X,LEV,NLEVA, IBUF,MAXW,OK )

          IF (.NOT.OK)                                         THEN

              DEALLOCATE( ZX,X,IBUF )
              IF (MAXW.EQ.0) GOTO 100

              WRITE(6,6110) NR
              IF (NR.EQ.0) CALL                    XIT( ' ZXaGLB',-1 )
              CALL                                 XIT( ' ZXaGLB', 0 )

          END IF

***        IGNORE LABEL OR CHARACTER RECORDS.

          WRITE(KIND,4) IBUF(1)
          IF (KIND.EQ.'LABL' .OR. KIND.EQ.'CHAR') GOTO 200

***        CHECK THAT WE STILL HAVE THE SAME ARRAY SIZES.

          CALL CMPLBL( 0,JBUF, 0,IBUF, OK )

          IF (.NOT.OK .OR.
     +        NLEV.gt.NLEVA)                                   THEN

              DEALLOCATE( ZX,X,IBUF )
              CALL PRECEDE( 1,NLEVA )
              GOTO 100

          END IF

          IF (NR.EQ.0) CALL PRTLAB( IBUF )

          IF ((NLEV.LT.  1 )  .OR.
     +        (NLEV.GT.MAXLEV))                                THEN
              CALL                                 XIT( ' ZXaGLB',-1 )
          END IF

          IBUF(1) = OBUF(1)
          IBUF(5) = OBUF(5)
          IBUF(6) = OBUF(6)

***        TRANSFER THE LATITUDE VALUES TO ALL LONGITUDES.

          DO  L=1,NLEV

              DO  J=1,NLAT
                  VALUE = ZX(NLAT*(L-1)+J)
                  BASE  =    NLON*(J-1)
                  DO  I=1,NLON
                      X(BASE+I) = VALUE
                  END DO
              END DO

***            PUT THE RESULT ON FILE ZXOUT.

              IBUF(4) = LEV(L)
              CALL PUTFLD2( 2, X, IBUF,MAXW )
              IF (NR.EQ.0) CALL PRTLAB( IBUF )

              NR = NR + 1

          END DO

      GOTO 200

***    ERROR READING INPUT PARAMETRE.
 
  903 IF (IO.NE.0) WRITE(6,6100) IO
      CALL                                         XIT(' ZXaGLB',-3 )

*---------------------------------------------------------------------
    4 FORMAT(A4)

 6001 FORMAT(' Problems reading ZXIN, NLEV/MAXLEV',3I6)
 6002 FORMAT(' First file should be typed ',A,', found ',A)

 6100 FORMAT(' ZXaGLB reports I/O error number ',I3,
     +       ' reading the number of output longitudes.')
 6110 FORMAT(1X,I6,' records processed.')

      END
#     endif
