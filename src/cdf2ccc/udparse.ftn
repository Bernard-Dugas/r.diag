CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C     This subroutine is part of the netopen Fortran callable CDC
C     group of routines for reading generic netCDF files in the new
C     cooperative standard as presented in:
C	http://ferret.wrc.noaa.gov/noaa_coop/coop_cdf_profile.html
C
C     This routine takes a time value pulled from the netCDF file,
C     determines if it is in the new or old time format (by using the
C     udunits function) and then returns the representative year,
C     month, day and hour represented by the time value.
C
C     Written by Cathy Smith of CDC on ???
C     Modified by Tom Baltzer of CDC on Feb. 8, 1995
C	- To determine if time is old or new format and parse
C		accordingly
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      subroutine udparse2(timeunit,intime,oyear,omonth,oday,ohour,
     .                                    ominute,osecond)

C STEP 1.
#     include "udunits.inc"

******
*
*AUTEUR
* G. Bergeron  juin 2005
*
*    Modification de la valeur de intime si months. Patch pour regler
*    un bug ou il manquait une seconde apres conversion de intime en 
*    date. J'ai ajoute la plus petite valeur pour que sa fonctionne.
*
*REVISIONS 
*
*   Bernard Dugas  sept 2014 :
*   - Corriger la declaration de timeunit
*   Bernard Dugas  juin 2012 :
*   - Corriger les arguments a XIT
*   Bernard Dugas  avril 2011 :
*   - Corriger l'appel a utcaltime
*   Bernard Dugas  mai  2008 :
*   - Renommer udparse2
*   - Ajouter les arguments ominute,osecond
*   Bernard Dugas  aout 2007 :
*   - Renommer le fichier a udparse.ftn
*   - L'inclusion de "udunits.inc" se fait via un pre-processeur.
*     Ceci permets d'utiliser le macro udunits UD_POINTER et de
*     de rendre le tout "machine-dependant".
*   - Faire un "call xit" en cas d'erreur
*
******

C     Note: POINTER type is integer*4 on the CDC SparcCenter 2000
C     system running SunOS 5.3, but it is integer*8 under IBM
C     Power systems running AIX. The udunits pre-processor
C     macro UD_POINTER provides the correct size

      UD_POINTER unitptr ! Pointer to udunits "unit" type

      character*128 timeunit
			! The unit attribute for time in the netCDF file
      real*8 intime,xx	! The input time value and var to work with it
      integer oyear,omonth,oday,ohour,ominute,osecond
			! The output year,month,day and hour

CCC   integer tmin	! Temporary storage for minutes value
CCC   real    tsec	! Temporary storage for seconds value
      integer ercode    ! For determining udunits result
      real rsecond

      unitptr = UTMAKE()
      ercode = UTDEC(trim(timeunit),unitptr)

      if (ercode.ne.0) then

C        Assume old CDC standard if time unit is unknown

         ominute=0 ; oseconds=0

         if (ercode.eq.UT_EUNKNOWN.and.(timeunit(1:1).eq.'y'.or.
     &	     	timeunit(1:1).eq.'Y')) then
            xx=0.
            oyear=int(intime/10000000000.d0)
            xx=oyear*10000000000.d0
            omonth=int((intime-xx)/100000000.d0)
            xx=xx+omonth*100000000.
            oday=int((intime-xx)/1000000.)
            xx=xx+oday*1000000.
            ohour=int((intime-xx)/10000.)
         else
            call uduerr(ercode,'UTDEC','')
            write(0,*) ''
            write(0,*) 'NOTE: You must call netop_init to use gridread,'
            write(0,*) '      gridreadx, dayread, and dayreadx'
            call xit('udparse2',-1 )
         endif
      else
         
         ercode = UTCALTIME(intime,unitptr,oyear,omonth,oday,ohour,
     &                      ominute,rsecond)
         if (ercode.ne.0) then
            call uduerr(ercode,'UTCALTIME','')
            call xit('udparse2',-2 )
         endif
         osecond=rsecond

      if(.false.)write(6,6001)oyear,omonth,oday,ohour,           !debug
     .                        ominute,osecond                    !debug
 6001 format("UDPARSE :",                                        !debug
     .       i4.4,"-",i2.2,"-",i2.2," ",i2.2,":",i2.2,":",f5.2)  !debug
      
      endif


C     Free up the pointer
      call UTFREE(unitptr)

      return
      end

*-----------------------------------------------------------------------



